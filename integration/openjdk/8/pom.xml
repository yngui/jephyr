<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ The MIT License (MIT)
  ~
  ~ Copyright (c) 2015 Igor Konev
  ~
  ~ Permission is hereby granted, free of charge, to any person obtaining a copy
  ~ of this software and associated documentation files (the "Software"), to deal
  ~ in the Software without restriction, including without limitation the rights
  ~ to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  ~ copies of the Software, and to permit persons to whom the Software is
  ~ furnished to do so, subject to the following conditions:
  ~
  ~ The above copyright notice and this permission notice shall be included in
  ~ all copies or substantial portions of the Software.
  ~
  ~ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  ~ IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  ~ FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  ~ AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  ~ LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  ~ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  ~ THE SOFTWARE.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.jephyr.integration.openjdk</groupId>
        <artifactId>openjdk-parent</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>openjdk-8</artifactId>

    <profiles>
        <profile>
            <id>windows</id>
            <activation>
                <os>
                    <family>windows</family>
                </os>
            </activation>
            <properties>
                <openjdk-8.compilerExecutable>${env.JAVA_HOME}/bin/javac.exe</openjdk-8.compilerExecutable>
                <openjdk-8.runtimePath>${env.JAVA_HOME}/jre/lib/rt.jar</openjdk-8.runtimePath>
            </properties>
        </profile>
    </profiles>

    <build>
        <plugins>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                    <compilerArgs>
                        <arg>-XDignore.symbol.file</arg>
                    </compilerArgs>
                    <fork>true</fork>
                    <executable>${openjdk-8.compilerExecutable}</executable>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.jephyr.easyflow</groupId>
                <artifactId>easyflow-maven-plugin</artifactId>
                <configuration>
                    <excludes>
                        <exclude>org/jephyr/integration/openjdk/misc/ReflectionUtils.class</exclude>
                        <exclude>org/jephyr/integration/openjdk/misc/ReflectionUtils$*.class</exclude>
                        <exclude>org/jephyr/integration/openjdk/misc/SharedSecrets.class</exclude>
                        <exclude>org/jephyr/integration/openjdk/misc/UnsafeHolder.class</exclude>
                        <exclude>org/jephyr/integration/openjdk/nio/ch/DefaultSelectorProvider.class</exclude>
                    </excludes>
                    <excludedMethods>
                        <excludedMethod>org/jephyr/integration/openjdk/nio/ch/ResultHandler.checkInterrupted()V
                        </excludedMethod>
                        <excludedMethod>
                            org/jephyr/integration/openjdk/nio/ch/ResultHandler.completed(Ljava/lang/Object;Ljava/lang/Object;)V
                        </excludedMethod>
                        <excludedMethod>
                            org/jephyr/integration/openjdk/nio/ch/ResultHandler.failed(Ljava/lang/Throwable;Ljava/lang/Object;)V
                        </excludedMethod>
                        <excludedMethod>
                            org/jephyr/integration/openjdk/nio/ch/ServerSocketChannelImpl.bind(Ljava/net/SocketAddress;I)Ljephyr/java/nio/channels/ServerSocketChannel;
                        </excludedMethod>
                        <excludedMethod>
                            org/jephyr/integration/openjdk/nio/ch/ServerSocketChannelImpl.getLocalAddress()Ljava/net/SocketAddress;
                        </excludedMethod>
                        <excludedMethod>
                            org/jephyr/integration/openjdk/nio/ch/ServerSocketChannelImpl.setOption(Ljava/net/SocketOption;Ljava/lang/Object;)Ljephyr/java/nio/channels/ServerSocketChannel;
                        </excludedMethod>
                        <excludedMethod>
                            org/jephyr/integration/openjdk/nio/ch/ServerSocketChannelImpl.getOption(Ljava/net/SocketOption;)Ljava/lang/Object;
                        </excludedMethod>
                        <excludedMethod>
                            org/jephyr/integration/openjdk/nio/ch/ServerSocketChannelImpl.supportedOptions()Ljava/util/Set;
                        </excludedMethod>
                        <excludedMethod>
                            org/jephyr/integration/openjdk/nio/ch/ServerSocketChannelImpl.implCloseSelectableChannel()V
                        </excludedMethod>
                        <excludedMethod>
                            org/jephyr/integration/openjdk/nio/ch/SocketChannelImpl.bind(Ljava/net/SocketAddress;)Ljephyr/java/nio/channels/SocketChannel;
                        </excludedMethod>
                        <excludedMethod>
                            org/jephyr/integration/openjdk/nio/ch/SocketChannelImpl.getLocalAddress()Ljava/net/SocketAddress;
                        </excludedMethod>
                        <excludedMethod>
                            org/jephyr/integration/openjdk/nio/ch/SocketChannelImpl.setOption(Ljava/net/SocketOption;Ljava/lang/Object;)Ljephyr/java/nio/channels/SocketChannel;
                        </excludedMethod>
                        <excludedMethod>
                            org/jephyr/integration/openjdk/nio/ch/SocketChannelImpl.getOption(Ljava/net/SocketOption;)Ljava/lang/Object;
                        </excludedMethod>
                        <excludedMethod>
                            org/jephyr/integration/openjdk/nio/ch/SocketChannelImpl.supportedOptions()Ljava/util/Set;
                        </excludedMethod>
                        <excludedMethod>
                            org/jephyr/integration/openjdk/nio/ch/SocketChannelImpl.shutdownInput()Ljephyr/java/nio/channels/SocketChannel;
                        </excludedMethod>
                        <excludedMethod>
                            org/jephyr/integration/openjdk/nio/ch/SocketChannelImpl.shutdownOutput()Ljephyr/java/nio/channels/SocketChannel;
                        </excludedMethod>
                        <excludedMethod>
                            org/jephyr/integration/openjdk/nio/ch/SocketChannelImpl.getRemoteAddress()Ljava/net/SocketAddress;
                        </excludedMethod>
                        <excludedMethod>
                            org/jephyr/integration/openjdk/nio/ch/SocketChannelImpl.implCloseSelectableChannel()V
                        </excludedMethod>
                        <excludedMethod>jephyr/java/lang/Thread.currentThread()Ljephyr/java/lang/Thread;
                        </excludedMethod>
                        <excludedMethod>
                            jephyr/java/lang/Thread$ThreadAccessImpl.currentThread()Ljephyr/java/lang/Thread;
                        </excludedMethod>
                        <excludedMethod>
                            jephyr/java/lang/Thread$ThreadAccessImpl.setCurrentThread(Ljephyr/java/lang/Thread;)V
                        </excludedMethod>
                        <excludedMethod>
                            jephyr/java/lang/Thread$ThreadAccessImpl.getImpl(Ljephyr/java/lang/Thread;)Lorg/jephyr/thread/ThreadImpl;
                        </excludedMethod>
                        <excludedMethod>
                            jephyr/java/lang/Thread$ThreadAccessImpl.blockedOn(Ljephyr/java/lang/Thread;Lorg/jephyr/integration/openjdk/nio/ch/Interruptible;)V
                        </excludedMethod>
                        <excludedMethod>
                            jephyr/java/util/concurrent/locks/LockSupport.setBlocker(Ljephyr/java/lang/Thread;Ljava/lang/Object;)V
                        </excludedMethod>
                        <excludedMethod>
                            jephyr/java/util/concurrent/locks/LockSupport.unpark(Ljephyr/java/lang/Thread;)V
                        </excludedMethod>
                        <excludedMethod>
                            jephyr/java/util/concurrent/locks/LockSupport.getBlocker(Ljephyr/java/lang/Thread;)Ljava/lang/Object;
                        </excludedMethod>
                    </excludedMethods>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>enhance</goal>
                            <goal>testEnhance</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-jar-plugin</artifactId>
                <executions>
                    <execution>
                        <goals>
                            <goal>jar</goal>
                        </goals>
                        <configuration>
                            <classifier>easyflow</classifier>
                            <classesDirectory>${project.build.directory}/enhanced-classes</classesDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <dependencies>
        <dependency>
            <groupId>org.jephyr.thread</groupId>
            <artifactId>thread-api</artifactId>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>runtime</groupId>
            <artifactId>runtime</artifactId>
            <version>1.0</version>
            <scope>system</scope>
            <systemPath>${openjdk-8.runtimePath}</systemPath>
        </dependency>
    </dependencies>
</project>