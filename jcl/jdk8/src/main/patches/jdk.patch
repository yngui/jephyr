diff -r 57336c319de8 src/share/classes/java/lang/Iterable.java
--- a/src/share/classes/java/lang/Iterable.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/lang/Iterable.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,13 +22,13 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.lang;
+package org.jvnet.zephyr.jcl.java.lang;

-import java.util.Iterator;
-import java.util.Objects;
-import java.util.Spliterator;
-import java.util.Spliterators;
-import java.util.function.Consumer;
+import org.jvnet.zephyr.jcl.java.util.Iterator;
+import org.jvnet.zephyr.jcl.java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.Spliterators;
+import org.jvnet.zephyr.jcl.java.util.function.Consumer;

 /**
  * Implementing this interface allows an object to be the target of
@@ -71,7 +71,8 @@
      */
     default void forEach(Consumer<? super T> action) {
         Objects.requireNonNull(action);
-        for (T t : this) {
+        for (Iterator<T> iterator = this.iterator(); iterator.hasNext(); ) {
+            T t = iterator.next();
             action.accept(t);
         }
     }
diff -r 57336c319de8 src/share/classes/java/lang/SecurityManager.java
--- a/src/share/classes/java/lang/SecurityManager.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/lang/SecurityManager.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,24 +23,23 @@
  * questions.
  */

-package java.lang;
+package org.jvnet.zephyr.jcl.java.lang;

-import java.security.*;
+import org.jvnet.zephyr.jcl.impl.misc.ReflectionUtils;
+import sun.security.util.SecurityConstants;
+
+import java.io.File;
 import java.io.FileDescriptor;
-import java.io.File;
 import java.io.FilePermission;
-import java.awt.AWTPermission;
+import java.lang.reflect.Member;
+import java.net.InetAddress;
+import java.net.SocketPermission;
+import java.security.AccessControlContext;
+import java.security.AccessController;
+import java.security.Permission;
+import java.security.PrivilegedAction;
+import java.security.SecurityPermission;
 import java.util.PropertyPermission;
-import java.lang.RuntimePermission;
-import java.net.SocketPermission;
-import java.net.NetPermission;
-import java.util.Hashtable;
-import java.net.InetAddress;
-import java.lang.reflect.*;
-import java.net.URL;
-
-import sun.reflect.CallerSensitive;
-import sun.security.util.SecurityConstants;

 /**
  * The security manager is a class that allows
@@ -202,10 +201,10 @@
  *
  * @see     java.lang.ClassLoader
  * @see     java.lang.SecurityException
- * @see     java.lang.SecurityManager#checkTopLevelWindow(java.lang.Object)
+ * @see     SecurityManager#checkTopLevelWindow(java.lang.Object)
  *  checkTopLevelWindow
- * @see     java.lang.System#getSecurityManager() getSecurityManager
- * @see     java.lang.System#setSecurityManager(java.lang.SecurityManager)
+ * @see     System#getSecurityManager() getSecurityManager
+ * @see     System#setSecurityManager(SecurityManager)
  *  setSecurityManager
  * @see     java.security.AccessController AccessController
  * @see     java.security.AccessControlContext AccessControlContext
@@ -263,7 +262,7 @@
      *          should contain <code>true</code> if a security check is
      *          in progress,
      *          <code>false</code> otherwise.
-     * @see     java.lang.SecurityManager#inCheck
+     * @see     SecurityManager#inCheck
      * @deprecated This type of security checking is not recommended.
      *  It is recommended that the <code>checkPermission</code>
      *  call be used instead.
@@ -286,7 +285,7 @@
      * @exception  java.lang.SecurityException if a security manager already
      *             exists and its <code>checkPermission</code> method
      *             doesn't allow creation of a new security manager.
-     * @see        java.lang.System#getSecurityManager()
+     * @see        System#getSecurityManager()
      * @see        #checkPermission(java.security.Permission) checkPermission
      * @see java.lang.RuntimePermission
      */
@@ -313,7 +312,9 @@
      *
      * @return  the execution stack.
      */
-    protected native Class[] getClassContext();
+    protected Class[] getClassContext() {
+        return ReflectionUtils.getClassContext();
+    }

     /**
      * Returns the class loader of the most recently executing method from
@@ -360,7 +361,9 @@
         return cl;
     }

-    private native ClassLoader currentClassLoader0();
+    private ClassLoader currentClassLoader0() {
+        return null;
+    }

     /**
      * Returns the class of the most recently executing method from
@@ -419,7 +422,9 @@
      *
      */
     @Deprecated
-    protected native int classDepth(String name);
+    protected int classDepth(String name) {
+        return -1;
+    }

     /**
      * Returns the stack depth of the most recently executing method
@@ -469,7 +474,9 @@
         return depth;
     }

-    private native int classLoaderDepth0();
+    private int classLoaderDepth0() {
+        return -1;
+    }

     /**
      * Tests if a method from a class with the specified
@@ -520,9 +527,9 @@
      * @return  an implementation-dependent object that encapsulates
      *          sufficient information about the current execution environment
      *          to perform some security checks later.
-     * @see     java.lang.SecurityManager#checkConnect(java.lang.String, int,
+     * @see     SecurityManager#checkConnect(java.lang.String, int,
      *   java.lang.Object) checkConnect
-     * @see     java.lang.SecurityManager#checkRead(java.lang.String,
+     * @see     SecurityManager#checkRead(java.lang.String,
      *   java.lang.Object) checkRead
      * @see     java.security.AccessControlContext AccessControlContext
      */
@@ -576,7 +583,7 @@
      *             resource specified by the given permission.
      * @exception  NullPointerException if the permission argument is
      *             <code>null</code>.
-     * @see        java.lang.SecurityManager#getSecurityContext()
+     * @see        SecurityManager#getSecurityContext()
      * @see java.security.AccessControlContext#checkPermission(java.security.Permission)
      * @since      1.2
      */
@@ -660,12 +667,12 @@
      *             permission to modify the thread.
      * @exception  NullPointerException if the thread argument is
      *             <code>null</code>.
-     * @see        java.lang.Thread#resume() resume
-     * @see        java.lang.Thread#setDaemon(boolean) setDaemon
-     * @see        java.lang.Thread#setName(java.lang.String) setName
-     * @see        java.lang.Thread#setPriority(int) setPriority
-     * @see        java.lang.Thread#stop() stop
-     * @see        java.lang.Thread#suspend() suspend
+     * @see        Thread#resume() resume
+     * @see        Thread#setDaemon(boolean) setDaemon
+     * @see        Thread#setName(java.lang.String) setName
+     * @see        Thread#setPriority(int) setPriority
+     * @see        Thread#stop() stop
+     * @see        Thread#suspend() suspend
      * @see        #checkPermission(java.security.Permission) checkPermission
      */
     public void checkAccess(Thread t) {
@@ -713,12 +720,12 @@
      *             permission to modify the thread group.
      * @exception  NullPointerException if the thread group argument is
      *             <code>null</code>.
-     * @see        java.lang.ThreadGroup#destroy() destroy
-     * @see        java.lang.ThreadGroup#resume() resume
-     * @see        java.lang.ThreadGroup#setDaemon(boolean) setDaemon
-     * @see        java.lang.ThreadGroup#setMaxPriority(int) setMaxPriority
-     * @see        java.lang.ThreadGroup#stop() stop
-     * @see        java.lang.ThreadGroup#suspend() suspend
+     * @see        ThreadGroup#destroy() destroy
+     * @see        ThreadGroup#resume() resume
+     * @see        ThreadGroup#setDaemon(boolean) setDaemon
+     * @see        ThreadGroup#setMaxPriority(int) setMaxPriority
+     * @see        ThreadGroup#stop() stop
+     * @see        ThreadGroup#suspend() suspend
      * @see        #checkPermission(java.security.Permission) checkPermission
      */
     public void checkAccess(ThreadGroup g) {
@@ -916,7 +923,7 @@
      *             to read the specified file.
      * @exception  NullPointerException if the <code>file</code> argument is
      *             <code>null</code>.
-     * @see        java.lang.SecurityManager#getSecurityContext()
+     * @see        SecurityManager#getSecurityContext()
      * @see        java.security.AccessControlContext#checkPermission(java.security.Permission)
      */
     public void checkRead(String file, Object context) {
@@ -1089,7 +1096,7 @@
      *             <code>host</code> and <code>port</code>.
      * @exception  NullPointerException if the <code>host</code> argument is
      *             <code>null</code>.
-     * @see        java.lang.SecurityManager#getSecurityContext()
+     * @see        SecurityManager#getSecurityContext()
      * @see        java.security.AccessControlContext#checkPermission(java.security.Permission)
      */
     public void checkConnect(String host, int port, Object context) {
@@ -1254,8 +1261,8 @@
      *
      * @exception  SecurityException  if the calling thread does not have
      *             permission to access or modify the system properties.
-     * @see        java.lang.System#getProperties()
-     * @see        java.lang.System#setProperties(java.util.Properties)
+     * @see        System#getProperties()
+     * @see        System#setProperties(java.util.Properties)
      * @see        #checkPermission(java.security.Permission) checkPermission
      */
     public void checkPropertiesAccess() {
@@ -1287,7 +1294,7 @@
      *             <code>null</code>.
      * @exception  IllegalArgumentException if <code>key</code> is empty.
      *
-     * @see        java.lang.System#getProperty(java.lang.String)
+     * @see        System#getProperty(java.lang.String)
      * @see        #checkPermission(java.security.Permission) checkPermission
      */
     public void checkPropertyAccess(String key) {
@@ -1700,7 +1707,6 @@
      * @see        #checkPermission(java.security.Permission) checkPermission
      */
     @Deprecated
-    @CallerSensitive
     public void checkMemberAccess(Class<?> clazz, int which) {
         if (clazz == null) {
             throw new NullPointerException("class can't be null");
@@ -1759,7 +1765,9 @@
         checkPermission(new SecurityPermission(target));
     }

-    private native Class<?> currentLoadedClass0();
+    private Class<?> currentLoadedClass0() {
+        return null;
+    }

     /**
      * Returns the thread group into which to instantiate any new
@@ -1770,7 +1778,7 @@
      *
      * @return  ThreadGroup that new threads are instantiated into
      * @since   JDK1.1
-     * @see     java.lang.ThreadGroup
+     * @see     ThreadGroup
      */
     public ThreadGroup getThreadGroup() {
         return Thread.currentThread().getThreadGroup();
diff -r 57336c319de8 src/share/classes/java/lang/System.java
--- a/src/share/classes/java/lang/System.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/lang/System.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,26 +22,29 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.lang;
+package org.jvnet.zephyr.jcl.java.lang;

-import java.io.*;
-import java.lang.reflect.Executable;
-import java.lang.annotation.Annotation;
-import java.security.AccessControlContext;
-import java.util.Properties;
-import java.util.PropertyPermission;
-import java.util.StringTokenizer;
-import java.util.Map;
+import org.jvnet.zephyr.jcl.impl.misc.UnsafeHolder;
+import org.jvnet.zephyr.jcl.java.nio.channels.spi.SelectorProvider;
+import org.jvnet.zephyr.jcl.java.util.AbstractMap;
+import org.jvnet.zephyr.jcl.java.util.AbstractSet;
+import org.jvnet.zephyr.jcl.java.util.Iterator;
+import org.jvnet.zephyr.jcl.java.util.Map;
+import org.jvnet.zephyr.jcl.java.util.Properties;
+import org.jvnet.zephyr.jcl.java.util.Set;
+import sun.misc.Unsafe;
+import sun.security.util.SecurityConstants;
+
+import java.io.Console;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.PrintStream;
+import java.io.Serializable;
+import java.lang.reflect.Field;
+import java.nio.channels.Channel;
 import java.security.AccessController;
 import java.security.PrivilegedAction;
-import java.security.AllPermission;
-import java.nio.channels.Channel;
-import java.nio.channels.spi.SelectorProvider;
-import sun.nio.ch.Interruptible;
-import sun.reflect.CallerSensitive;
-import sun.reflect.Reflection;
-import sun.security.util.SecurityConstants;
-import sun.reflect.annotation.AnnotationType;
+import java.util.PropertyPermission;

 /**
  * The <code>System</code> class contains several useful class fields
@@ -58,18 +61,6 @@
  */
 public final class System {

-    /* register the natives via the static initializer.
-     *
-     * VM will invoke the initializeSystemClass method to complete
-     * the initialization for this class separated from clinit.
-     * Note that to use properties set by the VM, see the constraints
-     * described in the initializeSystemClass method.
-     */
-    private static native void registerNatives();
-    static {
-        registerNatives();
-    }
-
     /** Don't let anyone instantiate this class */
     private System() {
     }
@@ -200,7 +191,6 @@
         setErr0(err);
     }

-    private static volatile Console cons = null;
     /**
      * Returns the unique {@link java.io.Console Console} object associated
      * with the current Java virtual machine, if any.
@@ -210,12 +200,7 @@
      * @since   1.6
      */
      public static Console console() {
-         if (cons == null) {
-             synchronized (System.class) {
-                 cons = sun.misc.SharedSecrets.getJavaIOAccess().console();
-             }
-         }
-         return cons;
+         return java.lang.System.console();
      }

     /**
@@ -223,12 +208,12 @@
      * Java virtual machine.
      *
      * <p> This method returns the channel obtained by invoking the
-     * {@link java.nio.channels.spi.SelectorProvider#inheritedChannel
+     * {@link SelectorProvider#inheritedChannel
      * inheritedChannel} method of the system-wide default
-     * {@link java.nio.channels.spi.SelectorProvider} object. </p>
+     * {@link SelectorProvider} object. </p>
      *
      * <p> In addition to the network-oriented channels described in
-     * {@link java.nio.channels.spi.SelectorProvider#inheritedChannel
+     * {@link SelectorProvider#inheritedChannel
      * inheritedChannel}, this method may return other kinds of
      * channels in the future.
      *
@@ -254,9 +239,17 @@
         }
     }

-    private static native void setIn0(InputStream in);
-    private static native void setOut0(PrintStream out);
-    private static native void setErr0(PrintStream err);
+    private static void setIn0(InputStream in) {
+        UNSAFE.putObject(IN_BASE, IN_OFFSET, in);
+    }
+
+    private static void setOut0(PrintStream out) {
+        UNSAFE.putObject(OUT_BASE, OUT_OFFSET, out);
+    }
+
+    private static void setErr0(PrintStream err) {
+        UNSAFE.putObject(ERR_BASE, ERR_OFFSET, err);
+    }

     /**
      * Sets the System security.
@@ -350,7 +343,9 @@
      *          the current time and midnight, January 1, 1970 UTC.
      * @see     java.util.Date
      */
-    public static native long currentTimeMillis();
+    public static long currentTimeMillis() {
+        return java.lang.System.currentTimeMillis();
+    }

     /**
      * Returns the current value of the running Java Virtual Machine's
@@ -396,7 +391,9 @@
      *         high-resolution time source, in nanoseconds
      * @since 1.5
      */
-    public static native long nanoTime();
+    public static long nanoTime() {
+        return java.lang.System.nanoTime();
+    }

     /**
      * Copies an array from the specified source array, beginning at the
@@ -490,9 +487,11 @@
      * @exception  NullPointerException if either <code>src</code> or
      *               <code>dest</code> is <code>null</code>.
      */
-    public static native void arraycopy(Object src,  int  srcPos,
+    public static void arraycopy(Object src,  int  srcPos,
                                         Object dest, int destPos,
-                                        int length);
+                                        int length) {
+        java.lang.System.arraycopy(src, srcPos, dest, destPos, length);
+    }

     /**
      * Returns the same hash code for the given object as
@@ -505,7 +504,9 @@
      * @return  the hashCode
      * @since   JDK1.1
      */
-    public static native int identityHashCode(Object x);
+    public static int identityHashCode(Object x) {
+        return java.lang.System.identityHashCode(x);
+    }

     /**
      * System properties. The following properties are guaranteed to be defined:
@@ -529,7 +530,10 @@
      */

     private static Properties props;
-    private static native Properties initProperties(Properties props);
+    private static Properties initProperties(Properties props) {
+        props.putAll(new AdaptedMap<>(java.lang.System.getProperties()));
+        return props;
+    }

     /**
      * Determines the current system properties.
@@ -621,7 +625,7 @@
      *              to the system properties.
      * @see        #setProperties
      * @see        java.lang.SecurityException
-     * @see        java.lang.SecurityManager#checkPropertiesAccess()
+     * @see        SecurityManager#checkPropertiesAccess()
      * @see        java.util.Properties
      */
     public static Properties getProperties() {
@@ -645,11 +649,9 @@
      * @since 1.7
      */
     public static String lineSeparator() {
-        return lineSeparator;
+        return java.lang.System.lineSeparator();
     }

-    private static String lineSeparator;
-
     /**
      * Sets the system properties to the <code>Properties</code>
      * argument.
@@ -670,7 +672,7 @@
      * @see        #getProperties
      * @see        java.util.Properties
      * @see        java.lang.SecurityException
-     * @see        java.lang.SecurityManager#checkPropertiesAccess()
+     * @see        SecurityManager#checkPropertiesAccess()
      */
     public static void setProperties(Properties props) {
         SecurityManager sm = getSecurityManager();
@@ -707,8 +709,8 @@
      * @exception  IllegalArgumentException if <code>key</code> is empty.
      * @see        #setProperty
      * @see        java.lang.SecurityException
-     * @see        java.lang.SecurityManager#checkPropertyAccess(java.lang.String)
-     * @see        java.lang.System#getProperties()
+     * @see        SecurityManager#checkPropertyAccess(java.lang.String)
+     * @see        System#getProperties()
      */
     public static String getProperty(String key) {
         checkKey(key);
@@ -743,8 +745,8 @@
      *             <code>null</code>.
      * @exception  IllegalArgumentException if <code>key</code> is empty.
      * @see        #setProperty
-     * @see        java.lang.SecurityManager#checkPropertyAccess(java.lang.String)
-     * @see        java.lang.System#getProperties()
+     * @see        SecurityManager#checkPropertyAccess(java.lang.String)
+     * @see        System#getProperties()
      */
     public static String getProperty(String key, String def) {
         checkKey(key);
@@ -779,8 +781,8 @@
      *             <code>value</code> is <code>null</code>.
      * @exception  IllegalArgumentException if <code>key</code> is empty.
      * @see        #getProperty
-     * @see        java.lang.System#getProperty(java.lang.String)
-     * @see        java.lang.System#getProperty(java.lang.String, java.lang.String)
+     * @see        System#getProperty(java.lang.String)
+     * @see        System#getProperty(java.lang.String, java.lang.String)
      * @see        java.util.PropertyPermission
      * @see        SecurityManager#checkPermission
      * @since      1.2
@@ -820,7 +822,7 @@
      * @see        #setProperty
      * @see        java.util.Properties
      * @see        java.lang.SecurityException
-     * @see        java.lang.SecurityManager#checkPropertiesAccess()
+     * @see        SecurityManager#checkPropertiesAccess()
      * @since 1.5
      */
     public static String clearProperty(String key) {
@@ -894,7 +896,7 @@
             sm.checkPermission(new RuntimePermission("getenv."+name));
         }

-        return ProcessEnvironment.getenv(name);
+        return java.lang.System.getenv(name);
     }


@@ -938,13 +940,13 @@
      * @see    ProcessBuilder#environment()
      * @since  1.5
      */
-    public static java.util.Map<String,String> getenv() {
+    public static Map<String,String> getenv() {
         SecurityManager sm = getSecurityManager();
         if (sm != null) {
             sm.checkPermission(new RuntimePermission("getenv.*"));
         }

-        return ProcessEnvironment.getenv();
+        return new AdaptedMap<>(java.lang.System.getenv());
     }

     /**
@@ -1037,7 +1039,7 @@
      *
      * @see     java.lang.Runtime#exit(int)
      * @see     java.lang.Runtime#gc()
-     * @see     java.lang.SecurityManager#checkExit(int)
+     * @see     SecurityManager#checkExit(int)
      * @since   JDK1.1
      */
     @Deprecated
@@ -1079,11 +1081,10 @@
      * @exception  NullPointerException if <code>filename</code> is
      *             <code>null</code>
      * @see        java.lang.Runtime#load(java.lang.String)
-     * @see        java.lang.SecurityManager#checkLink(java.lang.String)
+     * @see        SecurityManager#checkLink(java.lang.String)
      */
-    @CallerSensitive
     public static void load(String filename) {
-        Runtime.getRuntime().load0(Reflection.getCallerClass(), filename);
+        java.lang.System.load(filename);
     }

     /**
@@ -1115,11 +1116,10 @@
      * @exception  NullPointerException if <code>libname</code> is
      *             <code>null</code>
      * @see        java.lang.Runtime#loadLibrary(java.lang.String)
-     * @see        java.lang.SecurityManager#checkLink(java.lang.String)
+     * @see        SecurityManager#checkLink(java.lang.String)
      */
-    @CallerSensitive
     public static void loadLibrary(String libname) {
-        Runtime.getRuntime().loadLibrary0(Reflection.getCallerClass(), libname);
+        java.lang.System.loadLibrary(libname);
     }

     /**
@@ -1130,145 +1130,144 @@
      * @return     a platform-dependent native library name.
      * @exception  NullPointerException if <code>libname</code> is
      *             <code>null</code>
-     * @see        java.lang.System#loadLibrary(java.lang.String)
+     * @see        System#loadLibrary(java.lang.String)
      * @see        java.lang.ClassLoader#findLibrary(java.lang.String)
      * @since      1.2
      */
-    public static native String mapLibraryName(String libname);
-
-    /**
-     * Create PrintStream for stdout/err based on encoding.
-     */
-    private static PrintStream newPrintStream(FileOutputStream fos, String enc) {
-       if (enc != null) {
-            try {
-                return new PrintStream(new BufferedOutputStream(fos, 128), true, enc);
-            } catch (UnsupportedEncodingException uee) {}
-        }
-        return new PrintStream(new BufferedOutputStream(fos, 128), true);
+    public static String mapLibraryName(String libname) {
+        return java.lang.System.mapLibraryName(libname);
     }

+    private static final Unsafe UNSAFE;
+    private static final Object IN_BASE;
+    private static final long IN_OFFSET;
+    private static final Object OUT_BASE;
+    private static final long OUT_OFFSET;
+    private static final Object ERR_BASE;
+    private static final long ERR_OFFSET;

     /**
      * Initialize the system class.  Called after thread initialization.
      */
     private static void initializeSystemClass() {
-
-        // VM might invoke JNU_NewStringPlatform() to set those encoding
-        // sensitive properties (user.home, user.name, boot.class.path, etc.)
-        // during "props" initialization, in which it may need access, via
-        // System.getProperty(), to the related system encoding property that
-        // have been initialized (put into "props") at early stage of the
-        // initialization. So make sure the "props" is available at the
-        // very beginning of the initialization and all system properties to
-        // be put into it directly.
-        props = new Properties();
-        initProperties(props);  // initialized by the VM
-
-        // There are certain system configurations that may be controlled by
-        // VM options such as the maximum amount of direct memory and
-        // Integer cache size used to support the object identity semantics
-        // of autoboxing.  Typically, the library will obtain these values
-        // from the properties set by the VM.  If the properties are for
-        // internal implementation use only, these properties should be
-        // removed from the system properties.
-        //
-        // See java.lang.Integer.IntegerCache and the
-        // sun.misc.VM.saveAndRemoveProperties method for example.
-        //
-        // Save a private copy of the system properties object that
-        // can only be accessed by the internal implementation.  Remove
-        // certain system properties that are not intended for public access.
-        sun.misc.VM.saveAndRemoveProperties(props);
-
-
-        lineSeparator = props.getProperty("line.separator");
-        sun.misc.Version.init();
-
-        FileInputStream fdIn = new FileInputStream(FileDescriptor.in);
-        FileOutputStream fdOut = new FileOutputStream(FileDescriptor.out);
-        FileOutputStream fdErr = new FileOutputStream(FileDescriptor.err);
-        setIn0(new BufferedInputStream(fdIn));
-        setOut0(newPrintStream(fdOut, props.getProperty("sun.stdout.encoding")));
-        setErr0(newPrintStream(fdErr, props.getProperty("sun.stderr.encoding")));
-
-        // Load the zip library now in order to keep java.util.zip.ZipFile
-        // from trying to use itself to load this library later.
-        loadLibrary("zip");
-
-        // Setup Java signal handlers for HUP, TERM, and INT (where available).
-        Terminator.setup();
-
-        // Initialize any miscellenous operating system settings that need to be
-        // set for the class libraries. Currently this is no-op everywhere except
-        // for Windows where the process-wide error mode is set before the java.io
-        // classes are used.
-        sun.misc.VM.initializeOSEnvironment();
-
-        // The main thread is not added to its thread group in the same
-        // way as other threads; we must do it ourselves here.
-        Thread current = Thread.currentThread();
-        current.getThreadGroup().add(current);
-
-        // register shared secrets
-        setJavaLangAccess();
-
-        // Subsystems that are invoked during initialization can invoke
-        // sun.misc.VM.isBooted() in order to avoid doing things that should
-        // wait until the application class loader has been set up.
-        // IMPORTANT: Ensure that this remains the last initialization action!
-        sun.misc.VM.booted();
+        props = new Properties();
+        initProperties(props);
+        setIn0(java.lang.System.in);
+        setOut0(java.lang.System.out);
+        setErr0(java.lang.System.err);
     }

-    private static void setJavaLangAccess() {
-        // Allow privileged classes outside of java.lang
-        sun.misc.SharedSecrets.setJavaLangAccess(new sun.misc.JavaLangAccess(){
-            public sun.reflect.ConstantPool getConstantPool(Class<?> klass) {
-                return klass.getConstantPool();
+    static {
+        Class<System> systemClass = System.class;
+        Field inField;
+        Field outField;
+        Field errField;
+
+        try {
+            inField = systemClass.getDeclaredField("in");
+            outField = systemClass.getDeclaredField("out");
+            errField = systemClass.getDeclaredField("err");
+        } catch (Exception e) {
+            throw new Error(e);
+        }
+
+        UNSAFE = UnsafeHolder.getUnsafe();
+        IN_BASE = UNSAFE.staticFieldBase(inField);
+        IN_OFFSET = UNSAFE.staticFieldOffset(inField);
+        OUT_BASE = UNSAFE.staticFieldBase(outField);
+        OUT_OFFSET = UNSAFE.staticFieldOffset(outField);
+        ERR_BASE = UNSAFE.staticFieldBase(errField);
+        ERR_OFFSET = UNSAFE.staticFieldOffset(errField);
+
+        initializeSystemClass();
+    }
+
+    private static final class AdaptedMap<K, V> extends AbstractMap<K, V> implements Serializable {
+
+        private static final long serialVersionUID = 1L;
+
+        private final java.util.Map<K, V> map;
+
+        AdaptedMap(java.util.Map<K, V> map) {
+            this.map = map;
+        }
+
+        @Override
+        public Set<Entry<K, V>> entrySet() {
+            final java.util.Set<java.util.Map.Entry<K, V>> set = map.entrySet();
+            return new AbstractSet<Entry<K, V>>() {
+                @Override
+                public Iterator<Entry<K, V>> iterator() {
+                    final java.util.Iterator<java.util.Map.Entry<K, V>> iterator = set.iterator();
+                    return new Iterator<Entry<K, V>>() {
+                        @Override
+                        public boolean hasNext() {
+                            return iterator.hasNext();
+                        }
+
+                        @Override
+                        public Entry<K, V> next() {
+                            return new AdaptedEntry<>(iterator.next());
+                        }
+
+                        @Override
+                        public void remove() {
+                            iterator.remove();
+                        }
+                    };
+                }
+
+                @Override
+                public int size() {
+                    return set.size();
+                }
+            };
+        }
+
+        private static final class AdaptedEntry<K, V> implements Entry<K, V> {
+
+            private final java.util.Map.Entry<K, V> entry;
+
+            AdaptedEntry(java.util.Map.Entry<K, V> entry) {
+                this.entry = entry;
             }
-            public boolean casAnnotationType(Class<?> klass, AnnotationType oldType, AnnotationType newType) {
-                return klass.casAnnotationType(oldType, newType);
+
+            @Override
+            public K getKey() {
+                return entry.getKey();
             }
-            public AnnotationType getAnnotationType(Class<?> klass) {
-                return klass.getAnnotationType();
+
+            @Override
+            public V getValue() {
+                return entry.getValue();
             }
-            public Map<Class<? extends Annotation>, Annotation> getDeclaredAnnotationMap(Class<?> klass) {
-                return klass.getDeclaredAnnotationMap();
+
+            @Override
+            public V setValue(V value) {
+                return entry.setValue(value);
             }
-            public byte[] getRawClassAnnotations(Class<?> klass) {
-                return klass.getRawAnnotations();
+
+            @Override
+            public boolean equals(Object o) {
+                if (o == this) {
+                    return true;
+                }
+                if (!(o instanceof AdaptedEntry)) {
+                    return false;
+                }
+                AdaptedEntry<?, ?> other = (AdaptedEntry<?, ?>) o;
+                return entry.equals(other.entry);
             }
-            public byte[] getRawClassTypeAnnotations(Class<?> klass) {
-                return klass.getRawTypeAnnotations();
+
+            @Override
+            public int hashCode() {
+                return entry.hashCode();
             }
-            public byte[] getRawExecutableTypeAnnotations(Executable executable) {
-                return Class.getExecutableTypeAnnotationBytes(executable);
+
+            @Override
+            public String toString() {
+                return getKey() + "=" + getValue();
             }
-            public <E extends Enum<E>>
-                    E[] getEnumConstantsShared(Class<E> klass) {
-                return klass.getEnumConstantsShared();
-            }
-            public void blockedOn(Thread t, Interruptible b) {
-                t.blockedOn(b);
-            }
-            public void registerShutdownHook(int slot, boolean registerShutdownInProgress, Runnable hook) {
-                Shutdown.add(slot, registerShutdownInProgress, hook);
-            }
-            public int getStackTraceDepth(Throwable t) {
-                return t.getStackTraceDepth();
-            }
-            public StackTraceElement getStackTraceElement(Throwable t, int i) {
-                return t.getStackTraceElement(i);
-            }
-            public String newStringUnsafe(char[] chars) {
-                return new String(chars, true);
-            }
-            public Thread newThreadWithAcc(Runnable target, AccessControlContext acc) {
-                return new Thread(target, acc);
-            }
-            public void invokeFinalize(Object o) throws Throwable {
-                o.finalize();
-            }
-        });
+        }
     }
 }
diff -r 57336c319de8 src/share/classes/java/lang/Thread.java
--- a/src/share/classes/java/lang/Thread.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/lang/Thread.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,23 +23,29 @@
  * questions.
  */

-package java.lang;
+package org.jvnet.zephyr.jcl.java.lang;
+
+import org.jvnet.zephyr.jcl.impl.misc.ReflectionUtils;
+import org.jvnet.zephyr.jcl.impl.misc.SharedSecrets;
+import org.jvnet.zephyr.jcl.impl.nio.ch.Interruptible;
+import org.jvnet.zephyr.jcl.java.nio.channels.Selector;
+import org.jvnet.zephyr.jcl.java.util.HashMap;
+import org.jvnet.zephyr.jcl.java.util.Map;
+import org.jvnet.zephyr.jcl.java.util.concurrent.locks.LockSupport;
+import org.jvnet.zephyr.thread.JavaThreadImpl;
+import org.jvnet.zephyr.thread.ThreadAccess;
+import org.jvnet.zephyr.thread.ThreadImpl;
+import sun.security.util.SecurityConstants;

 import java.lang.ref.Reference;
 import java.lang.ref.ReferenceQueue;
 import java.lang.ref.WeakReference;
+import java.security.AccessControlContext;
 import java.security.AccessController;
-import java.security.AccessControlContext;
 import java.security.PrivilegedAction;
-import java.util.Map;
-import java.util.HashMap;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
-import java.util.concurrent.locks.LockSupport;
-import sun.nio.ch.Interruptible;
-import sun.reflect.CallerSensitive;
-import sun.reflect.Reflection;
-import sun.security.util.SecurityConstants;
+import java.util.concurrent.TimeUnit;


 /**
@@ -139,26 +144,27 @@
  */
 public
 class Thread implements Runnable {
-    /* Make sure registerNatives is the first thing <clinit> does. */
-    private static native void registerNatives();
-    static {
-        registerNatives();
-    }
+
+    private static final java.lang.ThreadLocal<Thread> currentThread = new java.lang.ThreadLocal<Thread>() {
+        @Override
+        protected Thread initialValue() {
+            return new Thread(java.lang.Thread.currentThread());
+        }
+    };
+    private static final ThreadAccess<Thread, Interruptible> threadAccess = new ThreadAccessImpl();
+
+    static {
+        SharedSecrets.setThreadAccess(threadAccess);
+    }
+
+    final ThreadImpl<Thread> impl;

     private volatile char  name[];
     private int            priority;
-    private Thread         threadQ;
-    private long           eetop;
-
-    /* Whether or not to single_step this thread. */
-    private boolean     single_step;

     /* Whether or not the thread is a daemon thread. */
     private boolean     daemon = false;

-    /* JVM state */
-    private boolean     stillborn = false;
-
     /* What will be run. */
     private Runnable target;

@@ -195,11 +197,6 @@
     private long stackSize;

     /*
-     * JVM-private state that persists after native thread termination.
-     */
-    private long nativeParkEventPointer;
-
-    /*
      * Thread ID
      */
     private long tid;
@@ -207,22 +204,15 @@
     /* For generating thread ID */
     private static long threadSeqNumber;

-    /* Java thread status for tools,
-     * initialized to indicate thread 'not yet started'
-     */
-
-    private volatile int threadStatus = 0;
-
-
     private static synchronized long nextThreadID() {
         return ++threadSeqNumber;
     }

     /**
      * The argument supplied to the current call to
-     * java.util.concurrent.locks.LockSupport.park.
-     * Set by (private) java.util.concurrent.locks.LockSupport.setBlocker
-     * Accessed using java.util.concurrent.locks.LockSupport.getBlocker
+     * org.jvnet.zephyr.jcl.java.util.concurrent.locks.LockSupport.park.
+     * Set by (private) org.jvnet.zephyr.jcl.java.util.concurrent.locks.LockSupport.setBlocker
+     * Accessed using org.jvnet.zephyr.jcl.java.util.concurrent.locks.LockSupport.getBlocker
      */
     volatile Object parkBlocker;

@@ -233,7 +223,7 @@
     private volatile Interruptible blocker;
     private final Object blockerLock = new Object();

-    /* Set the blocker field; invoked via sun.misc.SharedSecrets from java.nio code
+    /* Set the blocker field; invoked via sun.misc.SharedSecrets from org.jvnet.zephyr.jcl.java.nio code
      */
     void blockedOn(Interruptible b) {
         synchronized (blockerLock) {
@@ -261,7 +251,9 @@
      *
      * @return  the currently executing thread.
      */
-    public static native Thread currentThread();
+    public static Thread currentThread() {
+        return currentThread.get();
+    }

     /**
      * A hint to the scheduler that the current thread is willing to yield
@@ -277,9 +269,11 @@
      * for debugging or testing purposes, where it may help to reproduce
      * bugs due to race conditions. It may also be useful when designing
      * concurrency control constructs such as the ones in the
-     * {@link java.util.concurrent.locks} package.
+     * {@link org.jvnet.zephyr.jcl.java.util.concurrent.locks} package.
      */
-    public static native void yield();
+    public static void yield() {
+        currentThread().impl.yield();
+    }

     /**
      * Causes the currently executing thread to sleep (temporarily cease
@@ -298,7 +292,9 @@
      *          <i>interrupted status</i> of the current thread is
      *          cleared when this exception is thrown.
      */
-    public static native void sleep(long millis) throws InterruptedException;
+    public static void sleep(long millis) throws InterruptedException {
+        currentThread().impl.sleep(millis, TimeUnit.MILLISECONDS);
+    }

     /**
      * Causes the currently executing thread to sleep (temporarily cease
@@ -442,6 +438,7 @@
      * {@code "Thread-"+}<i>n</i>, where <i>n</i> is an integer.
      */
     public Thread() {
+        impl = ThreadImpl.create(this, threadAccess);
         init(null, null, "Thread-" + nextThreadNum(), 0);
     }

@@ -458,6 +455,7 @@
      *         nothing.
      */
     public Thread(Runnable target) {
+        impl = ThreadImpl.create(this, threadAccess);
         init(null, target, "Thread-" + nextThreadNum(), 0);
     }

@@ -466,6 +464,7 @@
      * This is not a public constructor.
      */
     Thread(Runnable target, AccessControlContext acc) {
+        impl = ThreadImpl.create(this, threadAccess);
         init(null, target, "Thread-" + nextThreadNum(), 0, acc);
     }

@@ -493,6 +492,7 @@
      *          thread group
      */
     public Thread(ThreadGroup group, Runnable target) {
+        impl = ThreadImpl.create(this, threadAccess);
         init(group, target, "Thread-" + nextThreadNum(), 0);
     }

@@ -505,6 +505,7 @@
      *          the name of the new thread
      */
     public Thread(String name) {
+        impl = ThreadImpl.create(this, threadAccess);
         init(null, null, name, 0);
     }

@@ -529,6 +530,7 @@
      *          thread group
      */
     public Thread(ThreadGroup group, String name) {
+        impl = ThreadImpl.create(this, threadAccess);
         init(group, null, name, 0);
     }

@@ -545,6 +547,7 @@
      *         the name of the new thread
      */
     public Thread(Runnable target, String name) {
+        impl = ThreadImpl.create(this, threadAccess);
         init(null, target, name, 0);
     }

@@ -593,6 +596,7 @@
      *          thread group or cannot override the context class loader methods.
      */
     public Thread(ThreadGroup group, Runnable target, String name) {
+        impl = ThreadImpl.create(this, threadAccess);
         init(group, target, name, 0);
     }

@@ -672,9 +676,21 @@
      */
     public Thread(ThreadGroup group, Runnable target, String name,
                   long stackSize) {
+        impl = ThreadImpl.create(this, threadAccess);
         init(group, target, name, stackSize);
     }

+    Thread(java.lang.Thread javaThread) {
+        impl = new JavaThreadImpl(javaThread);
+        name = javaThread.getName().toCharArray();
+        group = new ThreadGroup(ThreadGroup.ROOT, javaThread.getThreadGroup().getName());
+        daemon = javaThread.isDaemon();
+        priority = javaThread.getPriority();
+        contextClassLoader = javaThread.getContextClassLoader();
+        inheritedAccessControlContext = AccessController.getContext();
+        tid = nextThreadID();
+    }
+
     /**
      * Causes this thread to begin execution; the Java Virtual Machine
      * calls the <code>run</code> method of this thread.
@@ -701,7 +717,7 @@
          *
          * A zero status value corresponds to state "NEW".
          */
-        if (threadStatus != 0)
+        if (getState() != State.NEW)
             throw new IllegalThreadStateException();

         /* Notify the group that this thread is about to be started
@@ -725,7 +741,9 @@
         }
     }

-    private native void start0();
+    private void start0() {
+        impl.start();
+    }

     /**
      * If this thread was constructed using a separate
@@ -842,7 +860,7 @@
         }
         // A zero status value corresponds to "NEW", it can't change to
         // not-NEW because we hold the lock.
-        if (threadStatus != 0) {
+        if (getState() != State.NEW) {
             resume(); // Wake up thread if it was suspended; no-op otherwise
         }

@@ -891,11 +909,11 @@
      * status will be set, and the thread will receive a {@link
      * java.nio.channels.ClosedByInterruptException}.
      *
-     * <p> If this thread is blocked in a {@link java.nio.channels.Selector}
+     * <p> If this thread is blocked in a {@link Selector}
      * then the thread's interrupt status will be set and it will return
      * immediately from the selection operation, possibly with a non-zero
      * value, just as if the selector's {@link
-     * java.nio.channels.Selector#wakeup wakeup} method were invoked.
+     * Selector#wakeup wakeup} method were invoked.
      *
      * <p> If none of the previous conditions hold then this thread's interrupt
      * status will be set. </p>
@@ -941,7 +959,7 @@
      * @revised 6.0
      */
     public static boolean interrupted() {
-        return currentThread().isInterrupted(true);
+        return currentThread().impl.interrupted();
     }

     /**
@@ -958,17 +976,10 @@
      * @revised 6.0
      */
     public boolean isInterrupted() {
-        return isInterrupted(false);
+        return impl.isInterrupted();
     }

     /**
-     * Tests if some Thread has been interrupted.  The interrupted state
-     * is reset or not based on the value of ClearInterrupted that is
-     * passed.
-     */
-    private native boolean isInterrupted(boolean ClearInterrupted);
-
-    /**
      * Throws {@link NoSuchMethodError}.
      *
      * @deprecated This method was originally designed to destroy this
@@ -997,7 +1008,9 @@
      * @return  <code>true</code> if this thread is alive;
      *          <code>false</code> otherwise.
      */
-    public final native boolean isAlive();
+    public final boolean isAlive() {
+        return impl.isAlive();
+    }

     /**
      * Suspends this thread.
@@ -1089,7 +1102,7 @@
             if (newPriority > g.getMaxPriority()) {
                 newPriority = g.getMaxPriority();
             }
-            setPriority0(priority = newPriority);
+            priority = newPriority;
         }
     }

@@ -1120,9 +1133,6 @@
     public final synchronized void setName(String name) {
         checkAccess();
         this.name = name.toCharArray();
-        if (threadStatus != 0) {
-            setNativeName(name);
-        }
     }

     /**
@@ -1132,7 +1142,7 @@
      * @see     #setName(String)
      */
     public final String getName() {
-        return new String(name, true);
+        return new String(name);
     }

     /**
@@ -1148,7 +1158,7 @@

     /**
      * Returns an estimate of the number of active threads in the current
-     * thread's {@linkplain java.lang.ThreadGroup thread group} and its
+     * thread's {@linkplain ThreadGroup thread group} and its
      * subgroups. Recursively iterates over all subgroups in the current
      * thread's thread group.
      *
@@ -1169,7 +1179,7 @@
     /**
      * Copies into the specified array every active thread in the current
      * thread's thread group and its subgroups. This method simply
-     * invokes the {@link java.lang.ThreadGroup#enumerate(Thread[])}
+     * invokes the {@link ThreadGroup#enumerate(Thread[])}
      * method of the current thread's thread group.
      *
      * <p> An application might use the {@linkplain #activeCount activeCount}
@@ -1189,7 +1199,7 @@
      * @return  the number of threads put into the array
      *
      * @throws  SecurityException
-     *          if {@link java.lang.ThreadGroup#checkAccess} determines that
+     *          if {@link ThreadGroup#checkAccess} determines that
      *          the current thread cannot access its thread group
      */
     public static int enumerate(Thread tarray[]) {
@@ -1208,7 +1218,9 @@
      *             were never well-defined.
      */
     @Deprecated
-    public native int countStackFrames();
+    public int countStackFrames() {
+        throw new UnsupportedOperationException();
+    }

     /**
      * Waits at most {@code millis} milliseconds for this thread to
@@ -1231,29 +1243,9 @@
      *          <i>interrupted status</i> of the current thread is
      *          cleared when this exception is thrown.
      */
-    public final synchronized void join(long millis)
+    public final void join(long millis)
     throws InterruptedException {
-        long base = System.currentTimeMillis();
-        long now = 0;
-
-        if (millis < 0) {
-            throw new IllegalArgumentException("timeout value is negative");
-        }
-
-        if (millis == 0) {
-            while (isAlive()) {
-                wait(0);
-            }
-        } else {
-            while (isAlive()) {
-                long delay = millis - now;
-                if (delay <= 0) {
-                    break;
-                }
-                wait(delay);
-                now = System.currentTimeMillis() - base;
-            }
-        }
+        impl.join(millis, TimeUnit.MILLISECONDS);
     }

     /**
@@ -1281,7 +1273,7 @@
      *          <i>interrupted status</i> of the current thread is
      *          cleared when this exception is thrown.
      */
-    public final synchronized void join(long millis, int nanos)
+    public final void join(long millis, int nanos)
     throws InterruptedException {

         if (millis < 0) {
@@ -1316,7 +1308,7 @@
      *          cleared when this exception is thrown.
      */
     public final void join() throws InterruptedException {
-        join(0);
+        impl.join();
     }

     /**
@@ -1427,18 +1419,54 @@
      *
      * @since 1.2
      */
-    @CallerSensitive
     public ClassLoader getContextClassLoader() {
         if (contextClassLoader == null)
             return null;
         SecurityManager sm = System.getSecurityManager();
         if (sm != null) {
-            ClassLoader.checkClassLoaderPermission(contextClassLoader,
-                                                   Reflection.getCallerClass());
+            checkClassLoaderPermission(contextClassLoader, ReflectionUtils.getClassContext()[3]);
         }
         return contextClassLoader;
     }

+    private static void checkClassLoaderPermission(ClassLoader cl, Class<?> caller) {
+        SecurityManager sm = System.getSecurityManager();
+        if (sm != null) {
+            ClassLoader ccl = getClassLoader(caller);
+            if (needsClassLoaderPermissionCheck(ccl, cl)) {
+                sm.checkPermission(SecurityConstants.GET_CLASSLOADER_PERMISSION);
+            }
+        }
+    }
+
+    private static ClassLoader getClassLoader(Class<?> caller) {
+        if (caller == null) {
+            return null;
+        }
+        return caller.getClassLoader();
+    }
+
+    private static boolean needsClassLoaderPermissionCheck(ClassLoader from, ClassLoader to) {
+        if (from == to) {
+            return false;
+        }
+        if (from == null) {
+            return false;
+        }
+        return !isAncestor(from, to);
+    }
+
+    private static boolean isAncestor(ClassLoader from, ClassLoader to) {
+        ClassLoader acl = to;
+        do {
+            acl = acl.getParent();
+            if (from == acl) {
+                return true;
+            }
+        } while (acl != null);
+        return false;
+    }
+
     /**
      * Sets the context ClassLoader for this Thread. The context
      * ClassLoader can be set when a thread is created, and allows
@@ -1485,7 +1513,9 @@
      *         the specified object.
      * @since 1.4
      */
-    public static native boolean holdsLock(Object obj);
+    public static boolean holdsLock(Object obj) {
+        return java.lang.Thread.holdsLock(obj);
+    }

     private static final StackTraceElement[] EMPTY_STACK_TRACE
         = new StackTraceElement[0];
@@ -1682,8 +1712,13 @@
         return result.booleanValue();
     }

-    private native static StackTraceElement[][] dumpThreads(Thread[] threads);
-    private native static Thread[] getThreads();
+    private static StackTraceElement[][] dumpThreads(Thread[] threads) {
+        return new StackTraceElement[threads.length][];
+    }
+
+    private static Thread[] getThreads() {
+        return new Thread[] { Thread.currentThread() };
+    }

     /**
      * Returns the identifier of this Thread.  The thread ID is a positive
@@ -1807,7 +1842,20 @@
      */
     public State getState() {
         // get current thread state
-        return sun.misc.VM.toThreadState(threadStatus);
+        switch (impl.getState()) {
+            case ThreadImpl.NEW:
+                return State.NEW;
+            case ThreadImpl.RUNNABLE:
+                return State.RUNNABLE;
+            case ThreadImpl.WAITING:
+                return State.WAITING;
+            case ThreadImpl.TIMED_WAITING:
+                return State.TIMED_WAITING;
+            case ThreadImpl.TERMINATED:
+                return State.TERMINATED;
+            default:
+                throw new AssertionError();
+        }
     }

     // Added in JSR-166
@@ -2016,7 +2064,7 @@


     // The following three initially uninitialized fields are exclusively
-    // managed by class java.util.concurrent.ThreadLocalRandom. These
+    // managed by class org.jvnet.zephyr.jcl.java.util.concurrent.ThreadLocalRandom. These
     // fields are used to build the high-performance PRNGs in the
     // concurrent code, and we can not risk accidental false sharing.
     // Hence, the fields are isolated with @Contended.
@@ -2034,10 +2082,50 @@
     int threadLocalRandomSecondarySeed;

     /* Some private helper methods */
-    private native void setPriority0(int newPriority);
-    private native void stop0(Object o);
-    private native void suspend0();
-    private native void resume0();
-    private native void interrupt0();
-    private native void setNativeName(String name);
+    private void stop0(Object o) {
+        throw new UnsupportedOperationException();
+    }
+
+    private void suspend0() {
+        throw new UnsupportedOperationException();
+    }
+
+    private void resume0() {
+        throw new UnsupportedOperationException();
+    }
+
+    private void interrupt0() {
+        impl.interrupt();
+    }
+
+    private static final class ThreadAccessImpl implements ThreadAccess<Thread, Interruptible> {
+
+        ThreadAccessImpl() {
+        }
+
+        @Override
+        public Thread currentThread() {
+            return Thread.currentThread();
+        }
+
+        @Override
+        public void setCurrentThread(Thread thread) {
+            currentThread.set(thread);
+        }
+
+        @Override
+        public ThreadImpl<Thread> getImpl(Thread thread) {
+            return thread.impl;
+        }
+
+        @Override
+        public void dispatchUncaughtException(Thread thread, Throwable e) {
+            thread.dispatchUncaughtException(e);
+        }
+
+        @Override
+        public void blockedOn(Thread thread, Interruptible interruptible) {
+            thread.blockedOn(interruptible);
+        }
+    }
 }
diff -r 57336c319de8 src/share/classes/java/lang/ThreadGroup.java
--- a/src/share/classes/java/lang/ThreadGroup.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/lang/ThreadGroup.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,11 +23,12 @@
  * questions.
  */

-package java.lang;
+package org.jvnet.zephyr.jcl.java.lang;
+
+import sun.misc.VM;

 import java.io.PrintStream;
 import java.util.Arrays;
-import sun.misc.VM;

 /**
  * A thread group represents a set of threads. In addition, a thread
@@ -55,6 +56,9 @@
  */
 public
 class ThreadGroup implements Thread.UncaughtExceptionHandler {
+
+    static ThreadGroup ROOT = new ThreadGroup();
+
     private final ThreadGroup parent;
     String name;
     int maxPriority;
@@ -89,7 +93,7 @@
      * @param   name   the name of the new thread group.
      * @exception  SecurityException  if the current thread cannot create a
      *               thread in the specified thread group.
-     * @see     java.lang.ThreadGroup#checkAccess()
+     * @see     ThreadGroup#checkAccess()
      * @since   JDK1.0
      */
     public ThreadGroup(String name) {
@@ -110,7 +114,7 @@
      * @exception  SecurityException  if the current thread cannot create a
      *               thread in the specified thread group.
      * @see     java.lang.SecurityException
-     * @see     java.lang.ThreadGroup#checkAccess()
+     * @see     ThreadGroup#checkAccess()
      * @since   JDK1.0
      */
     public ThreadGroup(ThreadGroup parent, String name) {
@@ -157,7 +161,7 @@
      *          is the only thread group whose parent is <code>null</code>.
      * @exception  SecurityException  if the current thread cannot modify
      *               this thread group.
-     * @see        java.lang.ThreadGroup#checkAccess()
+     * @see        ThreadGroup#checkAccess()
      * @see        java.lang.SecurityException
      * @see        java.lang.RuntimePermission
      * @since   JDK1.0
@@ -220,7 +224,7 @@
      * @exception  SecurityException  if the current thread cannot modify
      *               this thread group.
      * @see        java.lang.SecurityException
-     * @see        java.lang.ThreadGroup#checkAccess()
+     * @see        ThreadGroup#checkAccess()
      * @since      JDK1.0
      */
     public final void setDaemon(boolean daemon) {
@@ -253,7 +257,7 @@
      *               this thread group.
      * @see        #getMaxPriority
      * @see        java.lang.SecurityException
-     * @see        java.lang.ThreadGroup#checkAccess()
+     * @see        ThreadGroup#checkAccess()
      * @since      JDK1.0
      */
     public final void setMaxPriority(int pri) {
@@ -306,7 +310,7 @@
      *
      * @exception  SecurityException  if the current thread is not allowed to
      *               access this thread group.
-     * @see        java.lang.SecurityManager#checkAccess(java.lang.ThreadGroup)
+     * @see        SecurityManager#checkAccess(ThreadGroup)
      * @since      JDK1.0
      */
     public final void checkAccess() {
@@ -601,8 +605,8 @@
      *               to access this thread group or any of the threads in
      *               the thread group.
      * @see        java.lang.SecurityException
-     * @see        java.lang.Thread#stop()
-     * @see        java.lang.ThreadGroup#checkAccess()
+     * @see        Thread#stop()
+     * @see        ThreadGroup#checkAccess()
      * @since      JDK1.0
      * @deprecated    This method is inherently unsafe.  See
      *     {@link Thread#stop} for details.
@@ -625,9 +629,9 @@
      * @exception  SecurityException  if the current thread is not allowed
      *               to access this thread group or any of the threads in
      *               the thread group.
-     * @see        java.lang.Thread#interrupt()
+     * @see        Thread#interrupt()
      * @see        java.lang.SecurityException
-     * @see        java.lang.ThreadGroup#checkAccess()
+     * @see        ThreadGroup#checkAccess()
      * @since      1.2
      */
     public final void interrupt() {
@@ -662,9 +666,9 @@
      * @exception  SecurityException  if the current thread is not allowed
      *               to access this thread group or any of the threads in
      *               the thread group.
-     * @see        java.lang.Thread#suspend()
+     * @see        Thread#suspend()
      * @see        java.lang.SecurityException
-     * @see        java.lang.ThreadGroup#checkAccess()
+     * @see        ThreadGroup#checkAccess()
      * @since      JDK1.0
      * @deprecated    This method is inherently deadlock-prone.  See
      *     {@link Thread#suspend} for details.
@@ -724,8 +728,8 @@
      *               access this thread group or any of the threads in the
      *               thread group.
      * @see        java.lang.SecurityException
-     * @see        java.lang.Thread#resume()
-     * @see        java.lang.ThreadGroup#checkAccess()
+     * @see        Thread#resume()
+     * @see        ThreadGroup#checkAccess()
      * @since      JDK1.0
      * @deprecated    This method is used solely in conjunction with
      *      <tt>Thread.suspend</tt> and <tt>ThreadGroup.suspend</tt>,
@@ -766,7 +770,7 @@
      *               empty or if the thread group has already been destroyed.
      * @exception  SecurityException  if the current thread cannot modify this
      *               thread group.
-     * @see        java.lang.ThreadGroup#checkAccess()
+     * @see        ThreadGroup#checkAccess()
      * @since      JDK1.0
      */
     public final void destroy() {
diff -r 57336c319de8 src/share/classes/java/lang/ThreadLocal.java
--- a/src/share/classes/java/lang/ThreadLocal.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/lang/ThreadLocal.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,10 +23,12 @@
  * questions.
  */

-package java.lang;
-import java.lang.ref.*;
-import java.util.Objects;
-import java.util.concurrent.atomic.AtomicInteger;
+package org.jvnet.zephyr.jcl.java.lang;
+
+import org.jvnet.zephyr.jcl.java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.concurrent.atomic.AtomicInteger;
+
+import java.lang.ref.WeakReference;
 import java.util.function.Supplier;

 /**
@@ -143,7 +145,7 @@

     /**
      * Creates a thread local variable.
-     * @see #withInitial(java.util.function.Supplier)
+     * @see #withInitial(Supplier)
      */
     public ThreadLocal() {
     }
diff -r 57336c319de8 src/share/classes/java/nio/channels/DatagramChannel.java
--- a/src/share/classes/java/nio/channels/DatagramChannel.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/nio/channels/DatagramChannel.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,16 +23,30 @@
  * questions.
  */

-package java.nio.channels;
+package org.jvnet.zephyr.jcl.java.nio.channels;
+
+import org.jvnet.zephyr.jcl.java.lang.SecurityManager;
+import org.jvnet.zephyr.jcl.java.nio.channels.spi.AbstractSelectableChannel;
+import org.jvnet.zephyr.jcl.java.nio.channels.spi.SelectorProvider;

 import java.io.IOException;
+import java.net.DatagramSocket;
 import java.net.ProtocolFamily;
-import java.net.DatagramSocket;
+import java.net.SocketAddress;
 import java.net.SocketOption;
-import java.net.SocketAddress;
 import java.nio.ByteBuffer;
-import java.nio.channels.spi.AbstractSelectableChannel;
-import java.nio.channels.spi.SelectorProvider;
+import java.nio.channels.AlreadyBoundException;
+import java.nio.channels.AsynchronousCloseException;
+import java.nio.channels.ByteChannel;
+import java.nio.channels.ClosedByInterruptException;
+import java.nio.channels.ClosedChannelException;
+import java.nio.channels.GatheringByteChannel;
+import java.nio.channels.MulticastChannel;
+import java.nio.channels.NotYetConnectedException;
+import java.nio.channels.ReadableByteChannel;
+import java.nio.channels.ScatteringByteChannel;
+import java.nio.channels.UnsupportedAddressTypeException;
+import java.nio.channels.WritableByteChannel;

 /**
  * A selectable channel for datagram-oriented sockets.
@@ -129,9 +143,9 @@
      * Opens a datagram channel.
      *
      * <p> The new channel is created by invoking the {@link
-     * java.nio.channels.spi.SelectorProvider#openDatagramChannel()
+     * SelectorProvider#openDatagramChannel()
      * openDatagramChannel} method of the system-wide default {@link
-     * java.nio.channels.spi.SelectorProvider} object.  The channel will not be
+     * SelectorProvider} object.  The channel will not be
      * connected.
      *
      * <p> The {@link ProtocolFamily ProtocolFamily} of the channel's socket
@@ -158,9 +172,9 @@
      * that this channel will join.
      *
      * <p> The new channel is created by invoking the {@link
-     * java.nio.channels.spi.SelectorProvider#openDatagramChannel(ProtocolFamily)
+     * SelectorProvider#openDatagramChannel(ProtocolFamily)
      * openDatagramChannel} method of the system-wide default {@link
-     * java.nio.channels.spi.SelectorProvider} object.  The channel will not be
+     * SelectorProvider} object.  The channel will not be
      * connected.
      *
      * @param   family
@@ -257,8 +271,8 @@
      * java.net.DatagramSocket#connect connect} method of the {@link
      * java.net.DatagramSocket} class.  That is, if a security manager has been
      * installed then this method verifies that its {@link
-     * java.lang.SecurityManager#checkAccept checkAccept} and {@link
-     * java.lang.SecurityManager#checkConnect checkConnect} methods permit
+     * SecurityManager#checkAccept checkAccept} and {@link
+     * SecurityManager#checkConnect checkConnect} methods permit
      * datagrams to be received from and sent to, respectively, the given
      * remote address.
      *
@@ -355,7 +369,7 @@
      * to a specific remote address and a security manager has been installed
      * then for each datagram received this method verifies that the source's
      * address and port number are permitted by the security manager's {@link
-     * java.lang.SecurityManager#checkAccept checkAccept} method.  The overhead
+     * SecurityManager#checkAccept checkAccept} method.  The overhead
      * of this security check can be avoided by first connecting the socket via
      * the {@link #connect connect} method.
      *
@@ -415,7 +429,7 @@
      * to a specific remote address and a security manager has been installed
      * then for each datagram sent this method verifies that the target address
      * and port number are permitted by the security manager's {@link
-     * java.lang.SecurityManager#checkConnect checkConnect} method.  The
+     * SecurityManager#checkConnect checkConnect} method.  The
      * overhead of this security check can be avoided by first connecting the
      * socket via the {@link #connect connect} method.
      *
diff -r 57336c319de8 src/share/classes/java/nio/channels/Pipe.java
--- a/src/share/classes/java/nio/channels/Pipe.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/nio/channels/Pipe.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,10 +23,16 @@
  * questions.
  */

-package java.nio.channels;
+package org.jvnet.zephyr.jcl.java.nio.channels;
+
+import org.jvnet.zephyr.jcl.java.nio.channels.spi.AbstractSelectableChannel;
+import org.jvnet.zephyr.jcl.java.nio.channels.spi.SelectorProvider;

 import java.io.IOException;
-import java.nio.channels.spi.*;
+import java.nio.channels.GatheringByteChannel;
+import java.nio.channels.ReadableByteChannel;
+import java.nio.channels.ScatteringByteChannel;
+import java.nio.channels.WritableByteChannel;


 /**
@@ -142,8 +148,8 @@
      * Opens a pipe.
      *
      * <p> The new pipe is created by invoking the {@link
-     * java.nio.channels.spi.SelectorProvider#openPipe openPipe} method of the
-     * system-wide default {@link java.nio.channels.spi.SelectorProvider}
+     * SelectorProvider#openPipe openPipe} method of the
+     * system-wide default {@link SelectorProvider}
      * object.  </p>
      *
      * @return  A new pipe
diff -r 57336c319de8 src/share/classes/java/nio/channels/SelectableChannel.java
--- a/src/share/classes/java/nio/channels/SelectableChannel.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/nio/channels/SelectableChannel.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,11 +23,18 @@
  * questions.
  */

-package java.nio.channels;
+package org.jvnet.zephyr.jcl.java.nio.channels;
+
+import org.jvnet.zephyr.jcl.java.nio.channels.spi.AbstractInterruptibleChannel;
+import org.jvnet.zephyr.jcl.java.nio.channels.spi.SelectorProvider;

 import java.io.IOException;
-import java.nio.channels.spi.AbstractInterruptibleChannel;
-import java.nio.channels.spi.SelectorProvider;
+import java.nio.channels.CancelledKeyException;
+import java.nio.channels.Channel;
+import java.nio.channels.ClosedChannelException;
+import java.nio.channels.ClosedSelectorException;
+import java.nio.channels.IllegalBlockingModeException;
+import java.nio.channels.IllegalSelectorException;


 /**
@@ -240,7 +247,7 @@
      * behaves in exactly the same way as the invocation
      *
      * <blockquote><tt>sc.{@link
-     * #register(java.nio.channels.Selector,int,java.lang.Object)
+     * #register(Selector,int,java.lang.Object)
      * register}(sel, ops, null)</tt></blockquote>
      *
      * @param  sel
diff -r 57336c319de8 src/share/classes/java/nio/channels/SelectionKey.java
--- a/src/share/classes/java/nio/channels/SelectionKey.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/nio/channels/SelectionKey.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,10 +23,11 @@
  * questions.
  */

-package java.nio.channels;
+package org.jvnet.zephyr.jcl.java.nio.channels;

-import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
-import java.io.IOException;
+import org.jvnet.zephyr.jcl.java.util.concurrent.atomic.AtomicReferenceFieldUpdater;
+
+import java.nio.channels.CancelledKeyException;


 /**
diff -r 57336c319de8 src/share/classes/java/nio/channels/Selector.java
--- a/src/share/classes/java/nio/channels/Selector.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/nio/channels/Selector.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,12 +23,16 @@
  * questions.
  */

-package java.nio.channels;
+package org.jvnet.zephyr.jcl.java.nio.channels;
+
+import org.jvnet.zephyr.jcl.java.lang.Thread;
+import org.jvnet.zephyr.jcl.java.nio.channels.spi.SelectorProvider;
+import org.jvnet.zephyr.jcl.java.util.Iterator;
+import org.jvnet.zephyr.jcl.java.util.Set;

 import java.io.Closeable;
 import java.io.IOException;
-import java.nio.channels.spi.SelectorProvider;
-import java.util.Set;
+import java.nio.channels.ClosedSelectorException;


 /**
@@ -36,9 +40,9 @@
  *
  * <p> A selector may be created by invoking the {@link #open open} method of
  * this class, which will use the system's default {@link
- * java.nio.channels.spi.SelectorProvider selector provider} to
+ * SelectorProvider selector provider} to
  * create a new selector.  A selector may also be created by invoking the
- * {@link java.nio.channels.spi.SelectorProvider#openSelector openSelector}
+ * {@link SelectorProvider#openSelector openSelector}
  * method of a custom selector provider.  A selector remains open until it is
  * closed via its {@link #close close} method.
  *
@@ -82,9 +86,9 @@
  *
  * <a name="sks"></a><p> Keys are added to the selected-key set by selection
  * operations.  A key may be removed directly from the selected-key set by
- * invoking the set's {@link java.util.Set#remove(java.lang.Object) remove}
- * method or by invoking the {@link java.util.Iterator#remove() remove} method
- * of an {@link java.util.Iterator iterator} obtained from the
+ * invoking the set's {@link Set#remove(java.lang.Object) remove}
+ * method or by invoking the {@link Iterator#remove() remove} method
+ * of an {@link Iterator iterator} obtained from the
  * set.  Keys are never removed from the selected-key set in any other way;
  * they are not, in particular, removed as a side effect of selection
  * operations.  Keys may not be added directly to the selected-key set. </p>
@@ -174,7 +178,7 @@
  *   </p></li>
  *
  *   <li><p> By invoking the blocked thread's {@link
- *   java.lang.Thread#interrupt() interrupt} method, in which case its
+ *   Thread#interrupt() interrupt} method, in which case its
  *   interrupt status will be set and the selector's {@link #wakeup wakeup}
  *   method will be invoked. </p></li>
  *
@@ -189,9 +193,9 @@
  * by multiple concurrent threads.  If such a thread might modify one of these
  * sets directly then access should be controlled by synchronizing on the set
  * itself.  The iterators returned by these sets' {@link
- * java.util.Set#iterator() iterator} methods are <i>fail-fast:</i> If the set
+ * Set#iterator() iterator} methods are <i>fail-fast:</i> If the set
  * is modified after the iterator is created, in any way except by invoking the
- * iterator's own {@link java.util.Iterator#remove() remove} method, then a
+ * iterator's own {@link Iterator#remove() remove} method, then a
  * {@link java.util.ConcurrentModificationException} will be thrown. </p>
  *
  *
@@ -214,9 +218,9 @@
      * Opens a selector.
      *
      * <p> The new selector is created by invoking the {@link
-     * java.nio.channels.spi.SelectorProvider#openSelector openSelector} method
+     * SelectorProvider#openSelector openSelector} method
      * of the system-wide default {@link
-     * java.nio.channels.spi.SelectorProvider} object.  </p>
+     * SelectorProvider} object.  </p>
      *
      * @return  A new selector
      *
diff -r 57336c319de8 src/share/classes/java/nio/channels/ServerSocketChannel.java
--- a/src/share/classes/java/nio/channels/ServerSocketChannel.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/nio/channels/ServerSocketChannel.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,14 +23,23 @@
  * questions.
  */

-package java.nio.channels;
+package org.jvnet.zephyr.jcl.java.nio.channels;
+
+import org.jvnet.zephyr.jcl.java.lang.SecurityManager;
+import org.jvnet.zephyr.jcl.java.nio.channels.spi.AbstractSelectableChannel;
+import org.jvnet.zephyr.jcl.java.nio.channels.spi.SelectorProvider;

 import java.io.IOException;
 import java.net.ServerSocket;
+import java.net.SocketAddress;
 import java.net.SocketOption;
-import java.net.SocketAddress;
-import java.nio.channels.spi.AbstractSelectableChannel;
-import java.nio.channels.spi.SelectorProvider;
+import java.nio.channels.AlreadyBoundException;
+import java.nio.channels.AsynchronousCloseException;
+import java.nio.channels.ClosedByInterruptException;
+import java.nio.channels.ClosedChannelException;
+import java.nio.channels.NetworkChannel;
+import java.nio.channels.NotYetBoundException;
+import java.nio.channels.UnsupportedAddressTypeException;

 /**
  * A selectable channel for stream-oriented listening sockets.
@@ -90,9 +99,9 @@
      * Opens a server-socket channel.
      *
      * <p> The new channel is created by invoking the {@link
-     * java.nio.channels.spi.SelectorProvider#openServerSocketChannel
+     * SelectorProvider#openServerSocketChannel
      * openServerSocketChannel} method of the system-wide default {@link
-     * java.nio.channels.spi.SelectorProvider} object.
+     * SelectorProvider} object.
      *
      * <p> The new channel's socket is initially unbound; it must be bound to a
      * specific address via one of its socket's {@link
@@ -236,7 +245,7 @@
      * installed then for each new connection this method verifies that the
      * address and port number of the connection's remote endpoint are
      * permitted by the security manager's {@link
-     * java.lang.SecurityManager#checkAccept checkAccept} method.  </p>
+     * SecurityManager#checkAccept checkAccept} method.  </p>
      *
      * @return  The socket channel for the new connection,
      *          or <tt>null</tt> if this channel is in non-blocking mode
diff -r 57336c319de8 src/share/classes/java/nio/channels/SocketChannel.java
--- a/src/share/classes/java/nio/channels/SocketChannel.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/nio/channels/SocketChannel.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,15 +23,32 @@
  * questions.
  */

-package java.nio.channels;
+package org.jvnet.zephyr.jcl.java.nio.channels;
+
+import org.jvnet.zephyr.jcl.java.lang.SecurityManager;
+import org.jvnet.zephyr.jcl.java.nio.channels.spi.AbstractSelectableChannel;
+import org.jvnet.zephyr.jcl.java.nio.channels.spi.SelectorProvider;

 import java.io.IOException;
 import java.net.Socket;
+import java.net.SocketAddress;
 import java.net.SocketOption;
-import java.net.SocketAddress;
 import java.nio.ByteBuffer;
-import java.nio.channels.spi.AbstractSelectableChannel;
-import java.nio.channels.spi.SelectorProvider;
+import java.nio.channels.AlreadyBoundException;
+import java.nio.channels.AlreadyConnectedException;
+import java.nio.channels.AsynchronousCloseException;
+import java.nio.channels.ByteChannel;
+import java.nio.channels.Channel;
+import java.nio.channels.ClosedByInterruptException;
+import java.nio.channels.ClosedChannelException;
+import java.nio.channels.ConnectionPendingException;
+import java.nio.channels.GatheringByteChannel;
+import java.nio.channels.NetworkChannel;
+import java.nio.channels.NoConnectionPendingException;
+import java.nio.channels.NotYetConnectedException;
+import java.nio.channels.ScatteringByteChannel;
+import java.nio.channels.UnresolvedAddressException;
+import java.nio.channels.UnsupportedAddressTypeException;

 /**
  * A selectable channel for stream-oriented connecting sockets.
@@ -132,9 +149,9 @@
      * Opens a socket channel.
      *
      * <p> The new channel is created by invoking the {@link
-     * java.nio.channels.spi.SelectorProvider#openSocketChannel
+     * SelectorProvider#openSocketChannel
      * openSocketChannel} method of the system-wide default {@link
-     * java.nio.channels.spi.SelectorProvider} object.  </p>
+     * SelectorProvider} object.  </p>
      *
      * @return  A new socket channel
      *
@@ -336,7 +353,7 @@
      * <p> This method performs exactly the same security checks as the {@link
      * java.net.Socket} class.  That is, if a security manager has been
      * installed then this method verifies that its {@link
-     * java.lang.SecurityManager#checkConnect checkConnect} method permits
+     * SecurityManager#checkConnect checkConnect} method permits
      * connecting to the address and port number of the given remote endpoint.
      *
      * <p> This method may be invoked at any time.  If a read or write
diff -r 57336c319de8 src/share/classes/java/nio/channels/spi/AbstractInterruptibleChannel.java
--- a/src/share/classes/java/nio/channels/spi/AbstractInterruptibleChannel.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/nio/channels/spi/AbstractInterruptibleChannel.java	Fri Jul 31 15:50:29 2015 +0300
@@ -26,15 +26,17 @@
 /*
  */

-package java.nio.channels.spi;
+package org.jvnet.zephyr.jcl.java.nio.channels.spi;
+
+import org.jvnet.zephyr.jcl.impl.misc.SharedSecrets;
+import org.jvnet.zephyr.jcl.impl.nio.ch.Interruptible;
+import org.jvnet.zephyr.jcl.java.lang.Thread;

 import java.io.IOException;
-import java.lang.reflect.Method;
-import java.lang.reflect.InvocationTargetException;
-import java.nio.channels.*;
-import java.security.AccessController;
-import java.security.PrivilegedAction;
-import sun.nio.ch.Interruptible;
+import java.nio.channels.AsynchronousCloseException;
+import java.nio.channels.Channel;
+import java.nio.channels.ClosedByInterruptException;
+import java.nio.channels.InterruptibleChannel;


 /**
@@ -208,7 +210,7 @@

     // -- sun.misc.SharedSecrets --
     static void blockedOn(Interruptible intr) {         // package-private
-        sun.misc.SharedSecrets.getJavaLangAccess().blockedOn(Thread.currentThread(),
+        SharedSecrets.getThreadAccess().blockedOn(Thread.currentThread(),
                                                              intr);
     }
 }
diff -r 57336c319de8 src/share/classes/java/nio/channels/spi/AbstractSelectableChannel.java
--- a/src/share/classes/java/nio/channels/spi/AbstractSelectableChannel.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/nio/channels/spi/AbstractSelectableChannel.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,10 +23,19 @@
  * questions.
  */

-package java.nio.channels.spi;
+package org.jvnet.zephyr.jcl.java.nio.channels.spi;
+
+import org.jvnet.zephyr.jcl.java.lang.Thread;
+import org.jvnet.zephyr.jcl.java.nio.channels.SelectableChannel;
+import org.jvnet.zephyr.jcl.java.nio.channels.SelectionKey;
+import org.jvnet.zephyr.jcl.java.nio.channels.Selector;

 import java.io.IOException;
-import java.nio.channels.*;
+import java.nio.channels.CancelledKeyException;
+import java.nio.channels.ClosedChannelException;
+import java.nio.channels.ClosedSelectorException;
+import java.nio.channels.IllegalBlockingModeException;
+import java.nio.channels.IllegalSelectorException;


 /**
@@ -36,7 +45,7 @@
  * registration, deregistration, and closing.  It maintains the current
  * blocking mode of this channel as well as its current set of selection keys.
  * It performs all of the synchronization required to implement the {@link
- * java.nio.channels.SelectableChannel} specification.  Implementations of the
+ * SelectableChannel} specification.  Implementations of the
  * abstract protected methods defined in this class need not synchronize
  * against other threads that might be engaged in the same operations.  </p>
  *
diff -r 57336c319de8 src/share/classes/java/nio/channels/spi/AbstractSelectionKey.java
--- a/src/share/classes/java/nio/channels/spi/AbstractSelectionKey.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/nio/channels/spi/AbstractSelectionKey.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,9 +23,9 @@
  * questions.
  */

-package java.nio.channels.spi;
+package org.jvnet.zephyr.jcl.java.nio.channels.spi;

-import java.nio.channels.*;
+import org.jvnet.zephyr.jcl.java.nio.channels.SelectionKey;


 /**
diff -r 57336c319de8 src/share/classes/java/nio/channels/spi/AbstractSelector.java
--- a/src/share/classes/java/nio/channels/spi/AbstractSelector.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/nio/channels/spi/AbstractSelector.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,14 +23,16 @@
  * questions.
  */

-package java.nio.channels.spi;
+package org.jvnet.zephyr.jcl.java.nio.channels.spi;
+
+import org.jvnet.zephyr.jcl.impl.nio.ch.Interruptible;
+import org.jvnet.zephyr.jcl.java.lang.Thread;
+import org.jvnet.zephyr.jcl.java.nio.channels.SelectionKey;
+import org.jvnet.zephyr.jcl.java.nio.channels.Selector;
+import org.jvnet.zephyr.jcl.java.util.HashSet;
+import org.jvnet.zephyr.jcl.java.util.Set;

 import java.io.IOException;
-import java.nio.channels.SelectionKey;
-import java.nio.channels.Selector;
-import java.util.HashSet;
-import java.util.Set;
-import sun.nio.ch.Interruptible;
 import java.util.concurrent.atomic.AtomicBoolean;


@@ -122,7 +124,7 @@
      * <p> An implementation of this method must arrange for any other thread
      * that is blocked in a selection operation upon this selector to return
      * immediately as if by invoking the {@link
-     * java.nio.channels.Selector#wakeup wakeup} method. </p>
+     * Selector#wakeup wakeup} method. </p>
      *
      * @throws  IOException
      *          If an I/O error occurs while closing the selector
diff -r 57336c319de8 src/share/classes/java/nio/channels/spi/SelectorProvider.java
--- a/src/share/classes/java/nio/channels/spi/SelectorProvider.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/nio/channels/spi/SelectorProvider.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,17 +23,25 @@
  * questions.
  */

-package java.nio.channels.spi;
+package org.jvnet.zephyr.jcl.java.nio.channels.spi;
+
+import org.jvnet.zephyr.jcl.impl.nio.ch.DefaultSelectorProvider;
+import org.jvnet.zephyr.jcl.java.lang.SecurityManager;
+import org.jvnet.zephyr.jcl.java.lang.System;
+import org.jvnet.zephyr.jcl.java.nio.channels.DatagramChannel;
+import org.jvnet.zephyr.jcl.java.nio.channels.Pipe;
+import org.jvnet.zephyr.jcl.java.nio.channels.Selector;
+import org.jvnet.zephyr.jcl.java.nio.channels.ServerSocketChannel;
+import org.jvnet.zephyr.jcl.java.nio.channels.SocketChannel;
+import org.jvnet.zephyr.jcl.java.util.Iterator;
+import org.jvnet.zephyr.jcl.java.util.ServiceLoader;

 import java.io.IOException;
 import java.net.ProtocolFamily;
-import java.nio.channels.*;
+import java.nio.channels.Channel;
 import java.security.AccessController;
 import java.security.PrivilegedAction;
-import java.util.Iterator;
-import java.util.ServiceLoader;
 import java.util.ServiceConfigurationError;
-import sun.security.action.GetPropertyAction;


 /**
@@ -47,12 +55,12 @@
  * the default provider as specified below.
  *
  * <p> The system-wide default provider is used by the static <tt>open</tt>
- * methods of the {@link java.nio.channels.DatagramChannel#open
- * DatagramChannel}, {@link java.nio.channels.Pipe#open Pipe}, {@link
- * java.nio.channels.Selector#open Selector}, {@link
- * java.nio.channels.ServerSocketChannel#open ServerSocketChannel}, and {@link
- * java.nio.channels.SocketChannel#open SocketChannel} classes.  It is also
- * used by the {@link java.lang.System#inheritedChannel System.inheritedChannel()}
+ * methods of the {@link DatagramChannel#open
+ * DatagramChannel}, {@link Pipe#open Pipe}, {@link
+ * Selector#open Selector}, {@link
+ * ServerSocketChannel#open ServerSocketChannel}, and {@link
+ * SocketChannel#open SocketChannel} classes.  It is also
+ * used by the {@link System#inheritedChannel System.inheritedChannel()}
  * method. A program may make use of a provider other than the default provider
  * by instantiating that provider and then directly invoking the <tt>open</tt>
  * methods defined in this class.
@@ -85,7 +93,7 @@
     }

     private static boolean loadProviderFromProperty() {
-        String cn = System.getProperty("java.nio.channels.spi.SelectorProvider");
+        String cn = System.getProperty("org.jvnet.zephyr.jcl.java.nio.channels.spi.SelectorProvider");
         if (cn == null)
             return false;
         try {
@@ -136,7 +144,7 @@
      * <ol>
      *
      *   <li><p> If the system property
-     *   <tt>java.nio.channels.spi.SelectorProvider</tt> is defined then it is
+     *   <tt>org.jvnet.zephyr.jcl.java.nio.channels.spi.SelectorProvider</tt> is defined then it is
      *   taken to be the fully-qualified name of a concrete provider class.
      *   The class is loaded and instantiated; if this process fails then an
      *   unspecified error is thrown.  </p></li>
@@ -144,7 +152,7 @@
      *   <li><p> If a provider class has been installed in a jar file that is
      *   visible to the system class loader, and that jar file contains a
      *   provider-configuration file named
-     *   <tt>java.nio.channels.spi.SelectorProvider</tt> in the resource
+     *   <tt>org.jvnet.zephyr.jcl.java.nio.channels.spi.SelectorProvider</tt> in the resource
      *   directory <tt>META-INF/services</tt>, then the first class name
      *   specified in that file is taken.  The class is loaded and
      *   instantiated; if this process fails then an unspecified error is
@@ -172,7 +180,7 @@
                                 return provider;
                             if (loadProviderAsService())
                                 return provider;
-                            provider = sun.nio.ch.DefaultSelectorProvider.create();
+                            provider = new DefaultSelectorProvider();
                             return provider;
                         }
                     });
@@ -273,19 +281,19 @@
      * <ul>
      *
      *  <li><p> If the inherited channel represents a stream-oriented connected
-     *  socket then a {@link java.nio.channels.SocketChannel SocketChannel} is
+     *  socket then a {@link SocketChannel SocketChannel} is
      *  returned. The socket channel is, at least initially, in blocking
      *  mode, bound to a socket address, and connected to a peer.
      *  </p></li>
      *
      *  <li><p> If the inherited channel represents a stream-oriented listening
-     *  socket then a {@link java.nio.channels.ServerSocketChannel
+     *  socket then a {@link ServerSocketChannel
      *  ServerSocketChannel} is returned. The server-socket channel is, at
      *  least initially, in blocking mode, and bound to a socket address.
      *  </p></li>
      *
      *  <li><p> If the inherited channel is a datagram-oriented socket
-     *  then a {@link java.nio.channels.DatagramChannel DatagramChannel} is
+     *  then a {@link DatagramChannel DatagramChannel} is
      *  returned. The datagram channel is, at least initially, in blocking
      *  mode, and bound to a socket address.
      *  </p></li>
diff -r 57336c319de8 src/share/classes/java/util/AbstractCollection.java
--- a/src/share/classes/java/util/AbstractCollection.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/AbstractCollection.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,7 +23,7 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;

 /**
  * This class provides a skeletal implementation of the <tt>Collection</tt>
@@ -314,9 +314,11 @@
      * @see #contains(Object)
      */
     public boolean containsAll(Collection<?> c) {
-        for (Object e : c)
+        for (Iterator<?> iterator = c.iterator(); iterator.hasNext(); ) {
+            Object e = iterator.next();
             if (!contains(e))
                 return false;
+        }
         return true;
     }

@@ -340,9 +342,11 @@
      */
     public boolean addAll(Collection<? extends E> c) {
         boolean modified = false;
-        for (E e : c)
+        for (Iterator<? extends E> iterator = c.iterator(); iterator.hasNext(); ) {
+            E e = iterator.next();
             if (add(e))
                 modified = true;
+        }
         return modified;
     }

diff -r 57336c319de8 src/share/classes/java/util/AbstractList.java
--- a/src/share/classes/java/util/AbstractList.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/AbstractList.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,7 +23,11 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;
+
+import java.util.ConcurrentModificationException;
+import java.util.NoSuchElementException;
+import java.util.RandomAccess;

 /**
  * This class provides a skeletal implementation of the {@link List}
@@ -256,7 +260,8 @@
     public boolean addAll(int index, Collection<? extends E> c) {
         rangeCheckForAdd(index);
         boolean modified = false;
-        for (E e : c) {
+        for (Iterator<? extends E> iterator = c.iterator(); iterator.hasNext(); ) {
+            E e = iterator.next();
             add(index++, e);
             modified = true;
         }
@@ -537,8 +542,10 @@
      */
     public int hashCode() {
         int hashCode = 1;
-        for (E e : this)
+        for (Iterator<E> iterator = this.iterator(); iterator.hasNext(); ) {
+            E e = iterator.next();
             hashCode = 31*hashCode + (e==null ? 0 : e.hashCode());
+        }
         return hashCode;
     }

diff -r 57336c319de8 src/share/classes/java/util/AbstractMap.java
--- a/src/share/classes/java/util/AbstractMap.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/AbstractMap.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,8 +23,7 @@
  * questions.
  */

-package java.util;
-import java.util.Map.Entry;
+package org.jvnet.zephyr.jcl.java.util;

 /**
  * This class provides a skeletal implementation of the <tt>Map</tt>
@@ -277,8 +276,11 @@
      * @throws IllegalArgumentException      {@inheritDoc}
      */
     public void putAll(Map<? extends K, ? extends V> m) {
-        for (Map.Entry<? extends K, ? extends V> e : m.entrySet())
+        for (Iterator<? extends Entry<? extends K, ? extends V>> iterator = m.entrySet().iterator();
+                iterator.hasNext(); ) {
+            Entry<? extends K, ? extends V> e = iterator.next();
             put(e.getKey(), e.getValue());
+        }
     }

     /**
diff -r 57336c319de8 src/share/classes/java/util/AbstractQueue.java
--- a/src/share/classes/java/util/AbstractQueue.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/AbstractQueue.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,7 +33,9 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;
+
+import java.util.NoSuchElementException;

 /**
  * This class provides skeletal implementations of some {@link Queue}
@@ -183,9 +185,11 @@
         if (c == this)
             throw new IllegalArgumentException();
         boolean modified = false;
-        for (E e : c)
+        for (Iterator<? extends E> iterator = c.iterator(); iterator.hasNext(); ) {
+            E e = iterator.next();
             if (add(e))
                 modified = true;
+        }
         return modified;
     }

diff -r 57336c319de8 src/share/classes/java/util/AbstractSequentialList.java
--- a/src/share/classes/java/util/AbstractSequentialList.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/AbstractSequentialList.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,7 +23,9 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;
+
+import java.util.NoSuchElementException;

 /**
  * This class provides a skeletal implementation of the <tt>List</tt>
diff -r 57336c319de8 src/share/classes/java/util/AbstractSet.java
--- a/src/share/classes/java/util/AbstractSet.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/AbstractSet.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,7 +23,7 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;

 /**
  * This class provides a skeletal implementation of the <tt>Set</tt>
diff -r 57336c319de8 src/share/classes/java/util/ArrayDeque.java
--- a/src/share/classes/java/util/ArrayDeque.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/ArrayDeque.java	Fri Jul 31 15:50:29 2015 +0300
@@ -32,10 +32,13 @@
  * as explained at http://creativecommons.org/publicdomain/zero/1.0/.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;
+
+import org.jvnet.zephyr.jcl.java.util.function.Consumer;

 import java.io.Serializable;
-import java.util.function.Consumer;
+import java.util.ConcurrentModificationException;
+import java.util.NoSuchElementException;

 /**
  * Resizable-array implementation of the {@link Deque} interface.  Array
diff -r 57336c319de8 src/share/classes/java/util/ArrayList.java
--- a/src/share/classes/java/util/ArrayList.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/ArrayList.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,11 +23,16 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;

-import java.util.function.Consumer;
-import java.util.function.Predicate;
-import java.util.function.UnaryOperator;
+import org.jvnet.zephyr.jcl.java.util.function.Consumer;
+import org.jvnet.zephyr.jcl.java.util.function.Predicate;
+import org.jvnet.zephyr.jcl.java.util.function.UnaryOperator;
+
+import java.util.BitSet;
+import java.util.ConcurrentModificationException;
+import java.util.NoSuchElementException;
+import java.util.RandomAccess;

 /**
  * Resizable-array implementation of the <tt>List</tt> interface.  Implements
diff -r 57336c319de8 src/share/classes/java/util/ArrayPrefixHelpers.java
--- a/src/share/classes/java/util/ArrayPrefixHelpers.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/ArrayPrefixHelpers.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,7 +22,7 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util;
+package org.jvnet.zephyr.jcl.java.util;

 /*
  * Written by Doug Lea with assistance from members of JCP JSR-166
@@ -30,12 +30,13 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

+import org.jvnet.zephyr.jcl.java.util.function.BinaryOperator;
+
+import java.util.concurrent.CountedCompleter;
 import java.util.concurrent.ForkJoinPool;
-import java.util.concurrent.CountedCompleter;
-import java.util.function.BinaryOperator;
+import java.util.function.DoubleBinaryOperator;
 import java.util.function.IntBinaryOperator;
 import java.util.function.LongBinaryOperator;
-import java.util.function.DoubleBinaryOperator;

 /**
  * ForkJoin tasks to perform Arrays.parallelPrefix operations.
diff -r 57336c319de8 src/share/classes/java/util/Arrays.java
--- a/src/share/classes/java/util/Arrays.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/Arrays.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,25 +23,27 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;
+
+import org.jvnet.zephyr.jcl.java.util.function.BinaryOperator;
+import org.jvnet.zephyr.jcl.java.util.function.Consumer;
+import org.jvnet.zephyr.jcl.java.util.function.IntUnaryOperator;
+import org.jvnet.zephyr.jcl.java.util.function.UnaryOperator;
+import org.jvnet.zephyr.jcl.java.util.stream.DoubleStream;
+import org.jvnet.zephyr.jcl.java.util.stream.IntStream;
+import org.jvnet.zephyr.jcl.java.util.stream.LongStream;
+import org.jvnet.zephyr.jcl.java.util.stream.Stream;
+import org.jvnet.zephyr.jcl.java.util.stream.StreamSupport;

 import java.lang.reflect.Array;
+import java.util.RandomAccess;
 import java.util.concurrent.ForkJoinPool;
-import java.util.function.BinaryOperator;
-import java.util.function.Consumer;
 import java.util.function.DoubleBinaryOperator;
 import java.util.function.IntBinaryOperator;
 import java.util.function.IntFunction;
 import java.util.function.IntToDoubleFunction;
 import java.util.function.IntToLongFunction;
-import java.util.function.IntUnaryOperator;
 import java.util.function.LongBinaryOperator;
-import java.util.function.UnaryOperator;
-import java.util.stream.DoubleStream;
-import java.util.stream.IntStream;
-import java.util.stream.LongStream;
-import java.util.stream.Stream;
-import java.util.stream.StreamSupport;

 /**
  * This class contains various methods for manipulating arrays (such as
@@ -1099,7 +1101,7 @@
      * @throws ClassCastException if the array contains elements that are
      *         not <i>mutually comparable</i> using the specified comparator
      * @throws IllegalArgumentException (optional) if the comparator is
-     *         found to violate the {@link java.util.Comparator} contract
+     *         found to violate the {@link Comparator} contract
      *
      * @since 1.8
      */
diff -r 57336c319de8 src/share/classes/java/util/ArraysParallelSortHelpers.java
--- a/src/share/classes/java/util/ArraysParallelSortHelpers.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/ArraysParallelSortHelpers.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,9 +22,8 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util;
+package org.jvnet.zephyr.jcl.java.util;

-import java.util.concurrent.RecursiveAction;
 import java.util.concurrent.CountedCompleter;

 /**
diff -r 57336c319de8 src/share/classes/java/util/Collection.java
--- a/src/share/classes/java/util/Collection.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/Collection.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,11 +23,12 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;

-import java.util.function.Predicate;
-import java.util.stream.Stream;
-import java.util.stream.StreamSupport;
+import org.jvnet.zephyr.jcl.java.lang.Iterable;
+import org.jvnet.zephyr.jcl.java.util.function.Predicate;
+import org.jvnet.zephyr.jcl.java.util.stream.Stream;
+import org.jvnet.zephyr.jcl.java.util.stream.StreamSupport;

 /**
  * The root interface in the <i>collection hierarchy</i>.  A collection
diff -r 57336c319de8 src/share/classes/java/util/Collections.java
--- a/src/share/classes/java/util/Collections.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/Collections.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,20 +23,25 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;
+
+import org.jvnet.zephyr.jcl.java.util.function.BiConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.BiFunction;
+import org.jvnet.zephyr.jcl.java.util.function.Consumer;
+import org.jvnet.zephyr.jcl.java.util.function.Function;
+import org.jvnet.zephyr.jcl.java.util.function.Predicate;
+import org.jvnet.zephyr.jcl.java.util.function.UnaryOperator;
+import org.jvnet.zephyr.jcl.java.util.stream.IntStream;
+import org.jvnet.zephyr.jcl.java.util.stream.Stream;
+import org.jvnet.zephyr.jcl.java.util.stream.StreamSupport;
+
+import java.io.IOException;
+import java.io.ObjectOutputStream;
 import java.io.Serializable;
-import java.io.ObjectOutputStream;
-import java.io.IOException;
 import java.lang.reflect.Array;
-import java.util.function.BiConsumer;
-import java.util.function.BiFunction;
-import java.util.function.Consumer;
-import java.util.function.Function;
-import java.util.function.Predicate;
-import java.util.function.UnaryOperator;
-import java.util.stream.IntStream;
-import java.util.stream.Stream;
-import java.util.stream.StreamSupport;
+import java.util.Enumeration;
+import java.util.NoSuchElementException;
+import java.util.RandomAccess;

 /**
  * This class consists exclusively of static methods that operate on or return
@@ -1712,7 +1717,8 @@
              * when o is a Map.Entry, and calls o.setValue.
              */
             public boolean containsAll(Collection<?> coll) {
-                for (Object e : coll) {
+                for (Iterator<?> iterator = coll.iterator(); iterator.hasNext(); ) {
+                    Object e = iterator.next();
                     if (!contains(e)) // Invokes safe contains() above
                         return false;
                 }
@@ -3638,8 +3644,10 @@
                 checked.add(
                         new AbstractMap.SimpleImmutableEntry<>((K)k, (V)v));
             }
-            for (Map.Entry<K,V> e : checked)
+            for (Iterator<Entry<K, V>> iterator = checked.iterator(); iterator.hasNext(); ) {
+                Entry<K, V> e = iterator.next();
                 m.put(e.getKey(), e.getValue());
+            }
         }

         private transient Set<Map.Entry<K,V>> entrySet;
@@ -3819,9 +3827,11 @@
              * method senses when o is a Map.Entry, and calls o.setValue.
              */
             public boolean containsAll(Collection<?> c) {
-                for (Object o : c)
+                for (Iterator<?> iterator = c.iterator(); iterator.hasNext(); ) {
+                    Object o = iterator.next();
                     if (!contains(o)) // Invokes safe contains() above
                         return false;
+                }
                 return true;
             }

@@ -5266,13 +5276,17 @@
     public static int frequency(Collection<?> c, Object o) {
         int result = 0;
         if (o == null) {
-            for (Object e : c)
+            for (Iterator<?> iterator = c.iterator(); iterator.hasNext(); ) {
+                Object e = iterator.next();
                 if (e == null)
                     result++;
+            }
         } else {
-            for (Object e : c)
+            for (Iterator<?> iterator = c.iterator(); iterator.hasNext(); ) {
+                Object e = iterator.next();
                 if (o.equals(e))
                     result++;
+            }
         }
         return result;
     }
@@ -5356,7 +5370,8 @@
             }
         }

-        for (Object e : iterate) {
+        for (Iterator<?> iterator = iterate.iterator(); iterator.hasNext(); ) {
+            Object e = iterator.next();
             if (contains.contains(e)) {
                // Found a common element. Collections are not disjoint.
                 return false;
diff -r 57336c319de8 src/share/classes/java/util/ComparableTimSort.java
--- a/src/share/classes/java/util/ComparableTimSort.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/ComparableTimSort.java	Fri Jul 31 15:50:29 2015 +0300
@@ -24,7 +24,7 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;

 /**
  * This is a near duplicate of {@link TimSort}, modified for use with
diff -r 57336c319de8 src/share/classes/java/util/Comparator.java
--- a/src/share/classes/java/util/Comparator.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/Comparator.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,14 +23,14 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;
+
+import org.jvnet.zephyr.jcl.java.util.function.Function;

 import java.io.Serializable;
-import java.util.function.Function;
+import java.util.function.ToDoubleFunction;
 import java.util.function.ToIntFunction;
 import java.util.function.ToLongFunction;
-import java.util.function.ToDoubleFunction;
-import java.util.Comparators;

 /**
  * A comparison function, which imposes a <i>total ordering</i> on some
diff -r 57336c319de8 src/share/classes/java/util/Comparators.java
--- a/src/share/classes/java/util/Comparators.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/Comparators.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,14 +22,9 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util;
+package org.jvnet.zephyr.jcl.java.util;

 import java.io.Serializable;
-import java.util.function.BinaryOperator;
-import java.util.function.Function;
-import java.util.function.ToDoubleFunction;
-import java.util.function.ToIntFunction;
-import java.util.function.ToLongFunction;

 /**
  * Package private supporting class for {@link Comparator}.
diff -r 57336c319de8 src/share/classes/java/util/Deque.java
--- a/src/share/classes/java/util/Deque.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/Deque.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,7 +33,9 @@
  * at http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;
+
+import java.util.NoSuchElementException;

 /**
  * A linear collection that supports element insertion and removal at
@@ -106,27 +108,27 @@
  *    <td ALIGN=CENTER> <b>Equivalent {@code Deque} Method</b></td>
  *  </tr>
  *  <tr>
- *    <td>{@link java.util.Queue#add add(e)}</td>
+ *    <td>{@link Queue#add add(e)}</td>
  *    <td>{@link #addLast addLast(e)}</td>
  *  </tr>
  *  <tr>
- *    <td>{@link java.util.Queue#offer offer(e)}</td>
+ *    <td>{@link Queue#offer offer(e)}</td>
  *    <td>{@link #offerLast offerLast(e)}</td>
  *  </tr>
  *  <tr>
- *    <td>{@link java.util.Queue#remove remove()}</td>
+ *    <td>{@link Queue#remove remove()}</td>
  *    <td>{@link #removeFirst removeFirst()}</td>
  *  </tr>
  *  <tr>
- *    <td>{@link java.util.Queue#poll poll()}</td>
+ *    <td>{@link Queue#poll poll()}</td>
  *    <td>{@link #pollFirst pollFirst()}</td>
  *  </tr>
  *  <tr>
- *    <td>{@link java.util.Queue#element element()}</td>
+ *    <td>{@link Queue#element element()}</td>
  *    <td>{@link #getFirst getFirst()}</td>
  *  </tr>
  *  <tr>
- *    <td>{@link java.util.Queue#peek peek()}</td>
+ *    <td>{@link Queue#peek peek()}</td>
  *    <td>{@link #peek peekFirst()}</td>
  *  </tr>
  * </table>
diff -r 57336c319de8 src/share/classes/java/util/DoubleSummaryStatistics.java
--- a/src/share/classes/java/util/DoubleSummaryStatistics.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/DoubleSummaryStatistics.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,17 +22,19 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util;
+package org.jvnet.zephyr.jcl.java.util;

-import java.util.function.DoubleConsumer;
-import java.util.stream.Collector;
+import org.jvnet.zephyr.jcl.java.util.function.DoubleConsumer;
+import org.jvnet.zephyr.jcl.java.util.stream.Collector;
+import org.jvnet.zephyr.jcl.java.util.stream.Collectors;
+import org.jvnet.zephyr.jcl.java.util.stream.Stream;

 /**
  * A state object for collecting statistics such as count, min, max, sum, and
  * average.
  *
  * <p>This class is designed to work with (though does not require)
- * {@linkplain java.util.stream streams}. For example, you can compute
+ * {@linkplain org.jvnet.zephyr.jcl.java.util.stream streams}. For example, you can compute
  * summary statistics on a stream of doubles with:
  * <pre> {@code
  * DoubleSummaryStatistics stats = doubleStream.collect(DoubleSummaryStatistics::new,
@@ -41,8 +43,8 @@
  * }</pre>
  *
  * <p>{@code DoubleSummaryStatistics} can be used as a
- * {@linkplain java.util.stream.Stream#collect(Collector) reduction}
- * target for a {@linkplain java.util.stream.Stream stream}. For example:
+ * {@linkplain Stream#collect(Collector) reduction}
+ * target for a {@linkplain Stream stream}. For example:
  *
  * <pre> {@code
  * DoubleSummaryStatistics stats = people.stream()
@@ -53,9 +55,9 @@
  * maximum, sum, and average of their weights.
  *
  * @implNote This implementation is not thread safe. However, it is safe to use
- * {@link java.util.stream.Collectors#summarizingDouble(java.util.function.ToDoubleFunction)
+ * {@link Collectors#summarizingDouble(java.util.function.ToDoubleFunction)
  * Collectors.toDoubleStatistics()} on a parallel stream, because the parallel
- * implementation of {@link java.util.stream.Stream#collect Stream.collect()}
+ * implementation of {@link Stream#collect Stream.collect()}
  * provides the necessary partitioning, isolation, and merging of results for
  * safe and efficient parallel execution.
  * @since 1.8
diff -r 57336c319de8 src/share/classes/java/util/DualPivotQuicksort.java
--- a/src/share/classes/java/util/DualPivotQuicksort.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/DualPivotQuicksort.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,7 +23,7 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;

 /**
  * This class implements the Dual-Pivot Quicksort algorithm by
diff -r 57336c319de8 src/share/classes/java/util/EnumMap.java
--- a/src/share/classes/java/util/EnumMap.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/EnumMap.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,11 +23,13 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;

-import java.util.Map.Entry;
 import sun.misc.SharedSecrets;

+import java.util.ConcurrentModificationException;
+import java.util.NoSuchElementException;
+
 /**
  * A specialized {@link Map} implementation for use with enum type keys.  All
  * of the keys in an enum map must come from a single enum type that is
diff -r 57336c319de8 src/share/classes/java/util/EnumSet.java
--- a/src/share/classes/java/util/EnumSet.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/EnumSet.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,10 +23,12 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;

 import sun.misc.SharedSecrets;

+import java.util.ConcurrentModificationException;
+
 /**
  * A specialized {@link Set} implementation for use with enum types.  All of
  * the elements in an enum set must come from a single enum type that is
diff -r 57336c319de8 src/share/classes/java/util/HashMap.java
--- a/src/share/classes/java/util/HashMap.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/HashMap.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,17 +23,20 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;
+
+import org.jvnet.zephyr.jcl.java.util.function.BiConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.BiFunction;
+import org.jvnet.zephyr.jcl.java.util.function.Consumer;
+import org.jvnet.zephyr.jcl.java.util.function.Function;

 import java.io.IOException;
 import java.io.InvalidObjectException;
 import java.io.Serializable;
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
-import java.util.function.BiConsumer;
-import java.util.function.BiFunction;
-import java.util.function.Consumer;
-import java.util.function.Function;
+import java.util.ConcurrentModificationException;
+import java.util.NoSuchElementException;

 /**
  * Hash table based implementation of the <tt>Map</tt> interface.  This
@@ -145,7 +148,7 @@
      * This map usually acts as a binned (bucketed) hash table, but
      * when bins get too large, they are transformed into bins of
      * TreeNodes, each structured similarly to those in
-     * java.util.TreeMap. Most methods try to use normal bins, but
+     * org.jvnet.zephyr.jcl.java.util.TreeMap. Most methods try to use normal bins, but
      * relay to TreeNode methods when applicable (simply by checking
      * instanceof a node).  Bins of TreeNodes may be traversed and
      * used like any others, but additionally support faster lookup
@@ -508,7 +511,9 @@
             }
             else if (s > threshold)
                 resize();
-            for (Map.Entry<? extends K, ? extends V> e : m.entrySet()) {
+            for (Iterator<? extends Entry<? extends K, ? extends V>> iterator = m.entrySet().iterator();
+                    iterator.hasNext(); ) {
+                Entry<? extends K, ? extends V> e = iterator.next();
                 K key = e.getKey();
                 V value = e.getValue();
                 putVal(hash(key), key, value, false, evict);
diff -r 57336c319de8 src/share/classes/java/util/HashSet.java
--- a/src/share/classes/java/util/HashSet.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/HashSet.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,9 +23,10 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;

 import java.io.InvalidObjectException;
+import java.util.ConcurrentModificationException;

 /**
  * This class implements the <tt>Set</tt> interface, backed by a hash table
@@ -283,8 +284,10 @@
         s.writeInt(map.size());

         // Write out all elements in the proper order.
-        for (E e : map.keySet())
+        for (Iterator<E> iterator = map.keySet().iterator(); iterator.hasNext(); ) {
+            E e = iterator.next();
             s.writeObject(e);
+        }
     }

     /**
diff -r 57336c319de8 src/share/classes/java/util/Hashtable.java
--- a/src/share/classes/java/util/Hashtable.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/Hashtable.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,13 +23,19 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;

-import java.io.*;
-import java.util.concurrent.ThreadLocalRandom;
-import java.util.function.BiConsumer;
-import java.util.function.Function;
-import java.util.function.BiFunction;
+import org.jvnet.zephyr.jcl.java.util.concurrent.ConcurrentHashMap;
+import org.jvnet.zephyr.jcl.java.util.function.BiConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.BiFunction;
+import org.jvnet.zephyr.jcl.java.util.function.Function;
+
+import java.io.IOException;
+import java.io.StreamCorruptedException;
+import java.util.ConcurrentModificationException;
+import java.util.Dictionary;
+import java.util.Enumeration;
+import java.util.NoSuchElementException;

 /**
  * This class implements a hash table, which maps keys to values. Any
@@ -112,7 +118,7 @@
  * thread-safe implementation is not needed, it is recommended to use
  * {@link HashMap} in place of {@code Hashtable}.  If a thread-safe
  * highly-concurrent implementation is desired, then it is recommended
- * to use {@link java.util.concurrent.ConcurrentHashMap} in place of
+ * to use {@link ConcurrentHashMap} in place of
  * {@code Hashtable}.
  *
  * @author  Arthur van Hoff
@@ -519,8 +525,11 @@
      * @since 1.2
      */
     public synchronized void putAll(Map<? extends K, ? extends V> t) {
-        for (Map.Entry<? extends K, ? extends V> e : t.entrySet())
+        for (Iterator<? extends Map.Entry<? extends K, ? extends V>> iterator = t.entrySet().iterator();
+                iterator.hasNext(); ) {
+            Map.Entry<? extends K, ? extends V> e = iterator.next();
             put(e.getKey(), e.getValue());
+        }
     }

     /**
diff -r 57336c319de8 src/share/classes/java/util/IdentityHashMap.java
--- a/src/share/classes/java/util/IdentityHashMap.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/IdentityHashMap.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,12 +23,15 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;
+
+import org.jvnet.zephyr.jcl.java.util.function.BiConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.BiFunction;
+import org.jvnet.zephyr.jcl.java.util.function.Consumer;

 import java.lang.reflect.Array;
-import java.util.function.BiConsumer;
-import java.util.function.BiFunction;
-import java.util.function.Consumer;
+import java.util.ConcurrentModificationException;
+import java.util.NoSuchElementException;

 /**
  * This class implements the <tt>Map</tt> interface with a hash table, using
@@ -502,8 +505,11 @@
         if (n > size)
             resize(capacity(n)); // conservatively pre-expand

-        for (Entry<? extends K, ? extends V> e : m.entrySet())
+        for (Iterator<? extends Entry<? extends K, ? extends V>> iterator = m.entrySet().iterator();
+                iterator.hasNext(); ) {
+            Entry<? extends K, ? extends V> e = iterator.next();
             put(e.getKey(), e.getValue());
+        }
     }

     /**
@@ -1006,8 +1012,10 @@
         }
         public int hashCode() {
             int result = 0;
-            for (K key : this)
+            for (Iterator<K> iterator = this.iterator(); iterator.hasNext(); ) {
+                K key = iterator.next();
                 result += System.identityHashCode(key);
+            }
             return result;
         }
         public Object[] toArray() {
diff -r 57336c319de8 src/share/classes/java/util/IntSummaryStatistics.java
--- a/src/share/classes/java/util/IntSummaryStatistics.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/IntSummaryStatistics.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,17 +22,19 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util;
+package org.jvnet.zephyr.jcl.java.util;

-import java.util.function.IntConsumer;
-import java.util.stream.Collector;
+import org.jvnet.zephyr.jcl.java.util.function.IntConsumer;
+import org.jvnet.zephyr.jcl.java.util.stream.Collector;
+import org.jvnet.zephyr.jcl.java.util.stream.Collectors;
+import org.jvnet.zephyr.jcl.java.util.stream.Stream;

 /**
  * A state object for collecting statistics such as count, min, max, sum, and
  * average.
  *
  * <p>This class is designed to work with (though does not require)
- * {@linkplain java.util.stream streams}. For example, you can compute
+ * {@linkplain org.jvnet.zephyr.jcl.java.util.stream streams}. For example, you can compute
  * summary statistics on a stream of ints with:
  * <pre> {@code
  * IntSummaryStatistics stats = intStream.collect(IntSummaryStatistics::new,
@@ -41,8 +43,8 @@
  * }</pre>
  *
  * <p>{@code IntSummaryStatistics} can be used as a
- * {@linkplain java.util.stream.Stream#collect(Collector) reduction}
- * target for a {@linkplain java.util.stream.Stream stream}. For example:
+ * {@linkplain Stream#collect(Collector) reduction}
+ * target for a {@linkplain Stream stream}. For example:
  *
  * <pre> {@code
  * IntSummaryStatistics stats = people.stream()
@@ -53,9 +55,9 @@
  * maximum, sum, and average of their number of dependents.
  *
  * @implNote This implementation is not thread safe. However, it is safe to use
- * {@link java.util.stream.Collectors#summarizingInt(java.util.function.ToIntFunction)
+ * {@link Collectors#summarizingInt(java.util.function.ToIntFunction)
  * Collectors.toIntStatistics()} on a parallel stream, because the parallel
- * implementation of {@link java.util.stream.Stream#collect Stream.collect()}
+ * implementation of {@link Stream#collect Stream.collect()}
  * provides the necessary partitioning, isolation, and merging of results for
  * safe and efficient parallel execution.
  *
diff -r 57336c319de8 src/share/classes/java/util/Iterator.java
--- a/src/share/classes/java/util/Iterator.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/Iterator.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,9 +23,13 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;

-import java.util.function.Consumer;
+import org.jvnet.zephyr.jcl.java.lang.Iterable;
+import org.jvnet.zephyr.jcl.java.util.function.Consumer;
+
+import java.util.Enumeration;
+import java.util.NoSuchElementException;

 /**
  * An iterator over a collection.  {@code Iterator} takes the place of
diff -r 57336c319de8 src/share/classes/java/util/JumboEnumSet.java
--- a/src/share/classes/java/util/JumboEnumSet.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/JumboEnumSet.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,7 +23,10 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;
+
+import java.util.ConcurrentModificationException;
+import java.util.NoSuchElementException;

 /**
  * Private implementation class for EnumSet, for "jumbo" enum types
diff -r 57336c319de8 src/share/classes/java/util/LinkedHashMap.java
--- a/src/share/classes/java/util/LinkedHashMap.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/LinkedHashMap.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,12 +23,15 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;

-import java.util.function.Consumer;
-import java.util.function.BiConsumer;
-import java.util.function.BiFunction;
+import org.jvnet.zephyr.jcl.java.util.function.BiConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.BiFunction;
+import org.jvnet.zephyr.jcl.java.util.function.Consumer;
+
 import java.io.IOException;
+import java.util.ConcurrentModificationException;
+import java.util.NoSuchElementException;

 /**
  * <p>Hash table and linked list implementation of the <tt>Map</tt> interface,
diff -r 57336c319de8 src/share/classes/java/util/LinkedHashSet.java
--- a/src/share/classes/java/util/LinkedHashSet.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/LinkedHashSet.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,7 +23,9 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;
+
+import java.util.ConcurrentModificationException;

 /**
  * <p>Hash table and linked list implementation of the <tt>Set</tt> interface,
diff -r 57336c319de8 src/share/classes/java/util/LinkedList.java
--- a/src/share/classes/java/util/LinkedList.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/LinkedList.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,9 +23,12 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;

-import java.util.function.Consumer;
+import org.jvnet.zephyr.jcl.java.util.function.Consumer;
+
+import java.util.ConcurrentModificationException;
+import java.util.NoSuchElementException;

 /**
  * Doubly-linked list implementation of the {@code List} and {@code Deque}
diff -r 57336c319de8 src/share/classes/java/util/List.java
--- a/src/share/classes/java/util/List.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/List.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,9 +23,9 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;

-import java.util.function.UnaryOperator;
+import org.jvnet.zephyr.jcl.java.util.function.UnaryOperator;

 /**
  * An ordered collection (also known as a <i>sequence</i>).  The user of this
diff -r 57336c319de8 src/share/classes/java/util/ListIterator.java
--- a/src/share/classes/java/util/ListIterator.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/ListIterator.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,7 +23,10 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;
+
+import java.util.Enumeration;
+import java.util.NoSuchElementException;

 /**
  * An iterator for lists that allows the programmer
diff -r 57336c319de8 src/share/classes/java/util/LongSummaryStatistics.java
--- a/src/share/classes/java/util/LongSummaryStatistics.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/LongSummaryStatistics.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,18 +22,20 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util;
+package org.jvnet.zephyr.jcl.java.util;

-import java.util.function.IntConsumer;
-import java.util.function.LongConsumer;
-import java.util.stream.Collector;
+import org.jvnet.zephyr.jcl.java.util.function.IntConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.LongConsumer;
+import org.jvnet.zephyr.jcl.java.util.stream.Collector;
+import org.jvnet.zephyr.jcl.java.util.stream.Collectors;
+import org.jvnet.zephyr.jcl.java.util.stream.Stream;

 /**
  * A state object for collecting statistics such as count, min, max, sum, and
  * average.
  *
  * <p>This class is designed to work with (though does not require)
- * {@linkplain java.util.stream streams}. For example, you can compute
+ * {@linkplain org.jvnet.zephyr.jcl.java.util.stream streams}. For example, you can compute
  * summary statistics on a stream of longs with:
  * <pre> {@code
  * LongSummaryStatistics stats = longStream.collect(LongSummaryStatistics::new,
@@ -42,8 +44,8 @@
  * }</pre>
  *
  * <p>{@code LongSummaryStatistics} can be used as a
- * {@linkplain java.util.stream.Stream#collect(Collector)} reduction}
- * target for a {@linkplain java.util.stream.Stream stream}. For example:
+ * {@linkplain Stream#collect(Collector)} reduction}
+ * target for a {@linkplain Stream stream}. For example:
  *
  * <pre> {@code
  * LongSummaryStatistics stats = people.stream()
@@ -54,9 +56,9 @@
  * maximum, sum, and average of their ages.
  *
  * @implNote This implementation is not thread safe. However, it is safe to use
- * {@link java.util.stream.Collectors#summarizingLong(java.util.function.ToLongFunction)
+ * {@link Collectors#summarizingLong(java.util.function.ToLongFunction)
  * Collectors.toLongStatistics()} on a parallel stream, because the parallel
- * implementation of {@link java.util.stream.Stream#collect Stream.collect()}
+ * implementation of {@link Stream#collect Stream.collect()}
  * provides the necessary partitioning, isolation, and merging of results for
  * safe and efficient parallel execution.
  *
diff -r 57336c319de8 src/share/classes/java/util/Map.java
--- a/src/share/classes/java/util/Map.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/Map.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,12 +23,15 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;

-import java.util.function.BiConsumer;
-import java.util.function.BiFunction;
-import java.util.function.Function;
+import org.jvnet.zephyr.jcl.java.util.concurrent.ConcurrentMap;
+import org.jvnet.zephyr.jcl.java.util.function.BiConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.BiFunction;
+import org.jvnet.zephyr.jcl.java.util.function.Function;
+
 import java.io.Serializable;
+import java.util.ConcurrentModificationException;

 /**
  * An object that maps keys to values.  A map cannot contain duplicate keys;
@@ -617,7 +620,8 @@
      */
     default void forEach(BiConsumer<? super K, ? super V> action) {
         Objects.requireNonNull(action);
-        for (Map.Entry<K, V> entry : entrySet()) {
+        for (Iterator<Entry<K, V>> iterator = entrySet().iterator(); iterator.hasNext(); ) {
+            Entry<K, V> entry = iterator.next();
             K k;
             V v;
             try {
@@ -672,7 +676,8 @@
      */
     default void replaceAll(BiFunction<? super K, ? super V, ? extends V> function) {
         Objects.requireNonNull(function);
-        for (Map.Entry<K, V> entry : entrySet()) {
+        for (Iterator<Entry<K, V>> iterator = entrySet().iterator(); iterator.hasNext(); ) {
+            Entry<K, V> entry = iterator.next();
             K k;
             V v;
             try {
@@ -929,7 +934,7 @@
      * or atomicity properties of this method. Any implementation providing
      * atomicity guarantees must override this method and document its
      * concurrency properties. In particular, all implementations of
-     * subinterface {@link java.util.concurrent.ConcurrentMap} must document
+     * subinterface {@link ConcurrentMap} must document
      * whether the function is applied once atomically only if the value is not
      * present.
      *
@@ -991,7 +996,7 @@
      * or atomicity properties of this method. Any implementation providing
      * atomicity guarantees must override this method and document its
      * concurrency properties. In particular, all implementations of
-     * subinterface {@link java.util.concurrent.ConcurrentMap} must document
+     * subinterface {@link ConcurrentMap} must document
      * whether the function is applied once atomically only if the value is not
      * present.
      *
@@ -1067,7 +1072,7 @@
      * or atomicity properties of this method. Any implementation providing
      * atomicity guarantees must override this method and document its
      * concurrency properties. In particular, all implementations of
-     * subinterface {@link java.util.concurrent.ConcurrentMap} must document
+     * subinterface {@link ConcurrentMap} must document
      * whether the function is applied once atomically only if the value is not
      * present.
      *
@@ -1144,7 +1149,7 @@
      * or atomicity properties of this method. Any implementation providing
      * atomicity guarantees must override this method and document its
      * concurrency properties. In particular, all implementations of
-     * subinterface {@link java.util.concurrent.ConcurrentMap} must document
+     * subinterface {@link ConcurrentMap} must document
      * whether the function is applied once atomically only if the value is not
      * present.
      *
diff -r 57336c319de8 src/share/classes/java/util/NavigableMap.java
--- a/src/share/classes/java/util/NavigableMap.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/NavigableMap.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,7 +33,7 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;

 /**
  * A {@link SortedMap} extended with navigation methods returning the
diff -r 57336c319de8 src/share/classes/java/util/NavigableSet.java
--- a/src/share/classes/java/util/NavigableSet.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/NavigableSet.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,7 +33,7 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;

 /**
  * A {@link SortedSet} extended with navigation methods reporting
diff -r 57336c319de8 src/share/classes/java/util/Objects.java
--- a/src/share/classes/java/util/Objects.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/Objects.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,7 +23,9 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;
+
+import org.jvnet.zephyr.jcl.java.util.function.Predicate;

 import java.util.function.Supplier;

@@ -234,13 +236,13 @@
      * returns {@code false}.
      *
      * @apiNote This method exists to be used as a
-     * {@link java.util.function.Predicate}, {@code filter(Objects::isNull)}
+     * {@link Predicate}, {@code filter(Objects::isNull)}
      *
      * @param obj a reference to be checked against {@code null}
      * @return {@code true} if the provided reference is {@code null} otherwise
      * {@code false}
      *
-     * @see java.util.function.Predicate
+     * @see Predicate
      * @since 1.8
      */
     public static boolean isNull(Object obj) {
@@ -252,13 +254,13 @@
      * otherwise returns {@code false}.
      *
      * @apiNote This method exists to be used as a
-     * {@link java.util.function.Predicate}, {@code filter(Objects::nonNull)}
+     * {@link Predicate}, {@code filter(Objects::nonNull)}
      *
      * @param obj a reference to be checked against {@code null}
      * @return {@code true} if the provided reference is non-{@code null}
      * otherwise {@code false}
      *
-     * @see java.util.function.Predicate
+     * @see Predicate
      * @since 1.8
      */
     public static boolean nonNull(Object obj) {
diff -r 57336c319de8 src/share/classes/java/util/Optional.java
--- a/src/share/classes/java/util/Optional.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/Optional.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,11 +22,13 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util;
+package org.jvnet.zephyr.jcl.java.util;

-import java.util.function.Consumer;
-import java.util.function.Function;
-import java.util.function.Predicate;
+import org.jvnet.zephyr.jcl.java.util.function.Consumer;
+import org.jvnet.zephyr.jcl.java.util.function.Function;
+import org.jvnet.zephyr.jcl.java.util.function.Predicate;
+
+import java.util.NoSuchElementException;
 import java.util.function.Supplier;

 /**
@@ -37,7 +39,7 @@
  * <p>Additional methods that depend on the presence or absence of a contained
  * value are provided, such as {@link #orElse(java.lang.Object) orElse()}
  * (return a default value if value not present) and
- * {@link #ifPresent(java.util.function.Consumer) ifPresent()} (execute a block
+ * {@link #ifPresent(Consumer) ifPresent()} (execute a block
  * of code if the value is present).
  *
  * <p>This is a <a href="../lang/doc-files/ValueBased.html">value-based</a>
diff -r 57336c319de8 src/share/classes/java/util/OptionalDouble.java
--- a/src/share/classes/java/util/OptionalDouble.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/OptionalDouble.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,9 +22,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util;
+package org.jvnet.zephyr.jcl.java.util;

-import java.util.function.DoubleConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.DoubleConsumer;
+
+import java.util.NoSuchElementException;
 import java.util.function.DoubleSupplier;
 import java.util.function.Supplier;

@@ -36,7 +38,7 @@
  * <p>Additional methods that depend on the presence or absence of a contained
  * value are provided, such as {@link #orElse(double) orElse()}
  * (return a default value if value not present) and
- * {@link #ifPresent(java.util.function.DoubleConsumer) ifPresent()} (execute a block
+ * {@link #ifPresent(DoubleConsumer) ifPresent()} (execute a block
  * of code if the value is present).
  *
  * <p>This is a <a href="../lang/doc-files/ValueBased.html">value-based</a>
diff -r 57336c319de8 src/share/classes/java/util/OptionalInt.java
--- a/src/share/classes/java/util/OptionalInt.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/OptionalInt.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,9 +22,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util;
+package org.jvnet.zephyr.jcl.java.util;

-import java.util.function.IntConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.IntConsumer;
+
+import java.util.NoSuchElementException;
 import java.util.function.IntSupplier;
 import java.util.function.Supplier;

@@ -36,7 +38,7 @@
  * <p>Additional methods that depend on the presence or absence of a contained
  * value are provided, such as {@link #orElse(int) orElse()}
  * (return a default value if value not present) and
- * {@link #ifPresent(java.util.function.IntConsumer) ifPresent()} (execute a block
+ * {@link #ifPresent(IntConsumer) ifPresent()} (execute a block
  * of code if the value is present).
  *
  * <p>This is a <a href="../lang/doc-files/ValueBased.html">value-based</a>
diff -r 57336c319de8 src/share/classes/java/util/OptionalLong.java
--- a/src/share/classes/java/util/OptionalLong.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/OptionalLong.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,9 +22,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util;
+package org.jvnet.zephyr.jcl.java.util;

-import java.util.function.LongConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.LongConsumer;
+
+import java.util.NoSuchElementException;
 import java.util.function.LongSupplier;
 import java.util.function.Supplier;

@@ -36,7 +38,7 @@
  * <p>Additional methods that depend on the presence or absence of a contained
  * value are provided, such as {@link #orElse(long) orElse()}
  * (return a default value if value not present) and
- * {@link #ifPresent(java.util.function.LongConsumer) ifPresent()} (execute a block
+ * {@link #ifPresent(LongConsumer) ifPresent()} (execute a block
  * of code if the value is present).
  *
  * <p>This is a <a href="../lang/doc-files/ValueBased.html">value-based</a>
diff -r 57336c319de8 src/share/classes/java/util/PrimitiveIterator.java
--- a/src/share/classes/java/util/PrimitiveIterator.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/PrimitiveIterator.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,12 +22,14 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util;
+package org.jvnet.zephyr.jcl.java.util;

-import java.util.function.Consumer;
-import java.util.function.DoubleConsumer;
-import java.util.function.IntConsumer;
-import java.util.function.LongConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.Consumer;
+import org.jvnet.zephyr.jcl.java.util.function.DoubleConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.IntConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.LongConsumer;
+
+import java.util.NoSuchElementException;

 /**
  * A base type for primitive specializations of {@code Iterator}.  Specialized
@@ -35,18 +37,18 @@
  * {@link OfDouble double} values.
  *
  * <p>The specialized subtype default implementations of {@link Iterator#next}
- * and {@link Iterator#forEachRemaining(java.util.function.Consumer)} box
+ * and {@link Iterator#forEachRemaining(Consumer)} box
  * primitive values to instances of their corresponding wrapper class.  Such
  * boxing may offset any advantages gained when using the primitive
  * specializations.  To avoid boxing, the corresponding primitive-based methods
  * should be used.  For example, {@link PrimitiveIterator.OfInt#nextInt()} and
- * {@link PrimitiveIterator.OfInt#forEachRemaining(java.util.function.IntConsumer)}
+ * {@link PrimitiveIterator.OfInt#forEachRemaining(IntConsumer)}
  * should be used in preference to {@link PrimitiveIterator.OfInt#next()} and
- * {@link PrimitiveIterator.OfInt#forEachRemaining(java.util.function.Consumer)}.
+ * {@link PrimitiveIterator.OfInt#forEachRemaining(Consumer)}.
  *
  * <p>Iteration of primitive values using boxing-based methods
  * {@link Iterator#next next()} and
- * {@link Iterator#forEachRemaining(java.util.function.Consumer) forEachRemaining()},
+ * {@link Iterator#forEachRemaining(Consumer) forEachRemaining()},
  * does not affect the order in which the values, transformed to boxed values,
  * are encountered.
  *
@@ -59,8 +61,8 @@
  *        type must be a wrapper type for a primitive type, such as
  *        {@code Integer} for the primitive {@code int} type.
  * @param <T_CONS> the type of primitive consumer.  The type must be a
- *        primitive specialization of {@link java.util.function.Consumer} for
- *        {@code T}, such as {@link java.util.function.IntConsumer} for
+ *        primitive specialization of {@link Consumer} for
+ *        {@code T}, such as {@link IntConsumer} for
  *        {@code Integer}.
  *
  * @since 1.8
diff -r 57336c319de8 src/share/classes/java/util/PriorityQueue.java
--- a/src/share/classes/java/util/PriorityQueue.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/PriorityQueue.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,9 +23,13 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;

-import java.util.function.Consumer;
+import org.jvnet.zephyr.jcl.java.util.concurrent.PriorityBlockingQueue;
+import org.jvnet.zephyr.jcl.java.util.function.Consumer;
+
+import java.util.ConcurrentModificationException;
+import java.util.NoSuchElementException;

 /**
  * An unbounded priority {@linkplain Queue queue} based on a priority heap.
@@ -62,7 +66,7 @@
  * Multiple threads should not access a {@code PriorityQueue}
  * instance concurrently if any of the threads modifies the queue.
  * Instead, use the thread-safe {@link
- * java.util.concurrent.PriorityBlockingQueue} class.
+ * PriorityBlockingQueue} class.
  *
  * <p>Implementation note: this implementation provides
  * O(log(n)) time for the enqueuing and dequeuing methods
diff -r 57336c319de8 src/share/classes/java/util/Properties.java
--- a/src/share/classes/java/util/Properties.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/Properties.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,21 +23,26 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;

+import org.jvnet.zephyr.jcl.jdk.internal.util.xml.BasicXmlPropertiesProvider;
+import org.jvnet.zephyr.jcl.sun.util.spi.XmlPropertiesProvider;
+
+import java.io.BufferedWriter;
 import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.io.OutputStreamWriter;
 import java.io.PrintStream;
 import java.io.PrintWriter;
-import java.io.InputStream;
-import java.io.OutputStream;
 import java.io.Reader;
 import java.io.Writer;
-import java.io.OutputStreamWriter;
-import java.io.BufferedWriter;
 import java.security.AccessController;
 import java.security.PrivilegedAction;
-
-import sun.util.spi.XmlPropertiesProvider;
+import java.util.Date;
+import java.util.Enumeration;
+import java.util.InvalidPropertiesFormatException;
+import java.util.ServiceConfigurationError;

 /**
  * The {@code Properties} class represents a persistent set of
@@ -1189,7 +1194,7 @@
                         provider = loadProviderAsService(cl);
                         if (provider != null)
                             return provider;
-                        return new jdk.internal.util.xml.BasicXmlPropertiesProvider();
+                        return new BasicXmlPropertiesProvider();
                 }});
         }

diff -r 57336c319de8 src/share/classes/java/util/Queue.java
--- a/src/share/classes/java/util/Queue.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/Queue.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,11 +33,18 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;
+
+import org.jvnet.zephyr.jcl.java.util.concurrent.ArrayBlockingQueue;
+import org.jvnet.zephyr.jcl.java.util.concurrent.BlockingQueue;
+import org.jvnet.zephyr.jcl.java.util.concurrent.LinkedBlockingQueue;
+import org.jvnet.zephyr.jcl.java.util.concurrent.PriorityBlockingQueue;
+
+import java.util.NoSuchElementException;

 /**
  * A collection designed for holding elements prior to processing.
- * Besides basic {@link java.util.Collection Collection} operations,
+ * Besides basic {@link Collection Collection} operations,
  * queues provide additional insertion, extraction, and inspection
  * operations.  Each of these methods exists in two forms: one throws
  * an exception if the operation fails, the other returns a special
@@ -85,7 +92,7 @@
  *
  * <p>The {@link #offer offer} method inserts an element if possible,
  * otherwise returning {@code false}.  This differs from the {@link
- * java.util.Collection#add Collection.add} method, which can fail to
+ * Collection#add Collection.add} method, which can fail to
  * add an element only by throwing an unchecked exception.  The
  * {@code offer} method is designed for use when failure is a normal,
  * rather than exceptional occurrence, for example, in fixed-capacity
@@ -106,7 +113,7 @@
  * <p>The {@code Queue} interface does not define the <i>blocking queue
  * methods</i>, which are common in concurrent programming.  These methods,
  * which wait for elements to appear or for space to become available, are
- * defined in the {@link java.util.concurrent.BlockingQueue} interface, which
+ * defined in the {@link BlockingQueue} interface, which
  * extends this interface.
  *
  * <p>{@code Queue} implementations generally do not allow insertion
@@ -129,14 +136,14 @@
  * <a href="{@docRoot}/../technotes/guides/collections/index.html">
  * Java Collections Framework</a>.
  *
- * @see java.util.Collection
+ * @see Collection
  * @see LinkedList
  * @see PriorityQueue
- * @see java.util.concurrent.LinkedBlockingQueue
- * @see java.util.concurrent.BlockingQueue
- * @see java.util.concurrent.ArrayBlockingQueue
- * @see java.util.concurrent.LinkedBlockingQueue
- * @see java.util.concurrent.PriorityBlockingQueue
+ * @see LinkedBlockingQueue
+ * @see BlockingQueue
+ * @see ArrayBlockingQueue
+ * @see LinkedBlockingQueue
+ * @see PriorityBlockingQueue
  * @since 1.5
  * @author Doug Lea
  * @param <E> the type of elements held in this collection
diff -r 57336c319de8 src/share/classes/java/util/Random.java
--- a/src/share/classes/java/util/Random.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/Random.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,19 +23,27 @@
  * questions.
  */

-package java.util;
-import java.io.*;
-import java.util.concurrent.atomic.AtomicLong;
-import java.util.function.DoubleConsumer;
-import java.util.function.IntConsumer;
-import java.util.function.LongConsumer;
-import java.util.stream.DoubleStream;
-import java.util.stream.IntStream;
-import java.util.stream.LongStream;
-import java.util.stream.StreamSupport;
+package org.jvnet.zephyr.jcl.java.util;

+import org.jvnet.zephyr.jcl.impl.misc.UnsafeHolder;
+import org.jvnet.zephyr.jcl.java.util.concurrent.ThreadLocalRandom;
+import org.jvnet.zephyr.jcl.java.util.concurrent.atomic.AtomicLong;
+import org.jvnet.zephyr.jcl.java.util.concurrent.locks.Lock;
+import org.jvnet.zephyr.jcl.java.util.concurrent.locks.ReentrantLock;
+import org.jvnet.zephyr.jcl.java.util.function.DoubleConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.IntConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.LongConsumer;
+import org.jvnet.zephyr.jcl.java.util.stream.DoubleStream;
+import org.jvnet.zephyr.jcl.java.util.stream.IntStream;
+import org.jvnet.zephyr.jcl.java.util.stream.LongStream;
+import org.jvnet.zephyr.jcl.java.util.stream.StreamSupport;
 import sun.misc.Unsafe;

+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.io.ObjectStreamField;
+
 /**
  * An instance of this class is used to generate a stream of
  * pseudorandom numbers. The class uses a 48-bit seed, which is
@@ -58,14 +66,14 @@
  * <p>
  * Many applications will find the method {@link Math#random} simpler to use.
  *
- * <p>Instances of {@code java.util.Random} are threadsafe.
- * However, the concurrent use of the same {@code java.util.Random}
+ * <p>Instances of {@code Random} are threadsafe.
+ * However, the concurrent use of the same {@code Random}
  * instance across threads may encounter contention and consequent
  * poor performance. Consider instead using
- * {@link java.util.concurrent.ThreadLocalRandom} in multithreaded
+ * {@link ThreadLocalRandom} in multithreaded
  * designs.
  *
- * <p>Instances of {@code java.util.Random} are not cryptographically
+ * <p>Instances of {@code Random} are not cryptographically
  * secure.  Consider instead using {@link java.security.SecureRandom} to
  * get a cryptographically secure pseudo-random number generator for use
  * by security-sensitive applications.
@@ -96,6 +104,8 @@
     static final String BadRange = "bound must be greater than origin";
     static final String BadSize  = "size must be non-negative";

+    private final Lock lock = new ReentrantLock();
+
     /**
      * Creates a new random number generator. This constructor sets
      * the seed of the random number generator to a value very likely
@@ -165,9 +175,14 @@
      *
      * @param seed the initial seed
      */
-    synchronized public void setSeed(long seed) {
-        this.seed.set(initialScramble(seed));
-        haveNextNextGaussian = false;
+    public void setSeed(long seed) {
+        lock.lock();
+        try {
+            this.seed.set(initialScramble(seed));
+            haveNextNextGaussian = false;
+        } finally {
+            lock.unlock();
+        }
     }

     /**
@@ -580,22 +595,27 @@
      *         standard deviation {@code 1.0} from this random number
      *         generator's sequence
      */
-    synchronized public double nextGaussian() {
-        // See Knuth, ACP, Section 3.4.1 Algorithm C.
-        if (haveNextNextGaussian) {
-            haveNextNextGaussian = false;
-            return nextNextGaussian;
-        } else {
-            double v1, v2, s;
-            do {
-                v1 = 2 * nextDouble() - 1; // between -1 and 1
-                v2 = 2 * nextDouble() - 1; // between -1 and 1
-                s = v1 * v1 + v2 * v2;
-            } while (s >= 1 || s == 0);
-            double multiplier = StrictMath.sqrt(-2 * StrictMath.log(s)/s);
-            nextNextGaussian = v2 * multiplier;
-            haveNextNextGaussian = true;
-            return v1 * multiplier;
+    public double nextGaussian() {
+        lock.lock();
+        try {
+            // See Knuth, ACP, Section 3.4.1 Algorithm C.
+            if (haveNextNextGaussian) {
+                haveNextNextGaussian = false;
+                return nextNextGaussian;
+            } else {
+                double v1, v2, s;
+                do {
+                    v1 = 2 * nextDouble() - 1; // between -1 and 1
+                    v2 = 2 * nextDouble() - 1; // between -1 and 1
+                    s = v1 * v1 + v2 * v2;
+                } while (s >= 1 || s == 0);
+                double multiplier = StrictMath.sqrt(-2 * StrictMath.log(s)/s);
+                nextNextGaussian = v2 * multiplier;
+                haveNextNextGaussian = true;
+                return v1 * multiplier;
+            }
+        } finally {
+            lock.unlock();
         }
     }

@@ -1197,23 +1217,27 @@
     /**
      * Save the {@code Random} instance to a stream.
      */
-    synchronized private void writeObject(ObjectOutputStream s)
+    private void writeObject(ObjectOutputStream s)
         throws IOException {
+        lock.lock();
+        try {
+            // set the values of the Serializable fields
+            ObjectOutputStream.PutField fields = s.putFields();

-        // set the values of the Serializable fields
-        ObjectOutputStream.PutField fields = s.putFields();
+            // The seed is serialized as a long for historical reasons.
+            fields.put("seed", seed.get());
+            fields.put("nextNextGaussian", nextNextGaussian);
+            fields.put("haveNextNextGaussian", haveNextNextGaussian);

-        // The seed is serialized as a long for historical reasons.
-        fields.put("seed", seed.get());
-        fields.put("nextNextGaussian", nextNextGaussian);
-        fields.put("haveNextNextGaussian", haveNextNextGaussian);
-
-        // save them
-        s.writeFields();
+            // save them
+            s.writeFields();
+        } finally {
+            lock.unlock();
+        }
     }

     // Support for resetting seed while deserializing
-    private static final Unsafe unsafe = Unsafe.getUnsafe();
+    private static final Unsafe unsafe = UnsafeHolder.getUnsafe();
     private static final long seedOffset;
     static {
         try {
diff -r 57336c319de8 src/share/classes/java/util/RegularEnumSet.java
--- a/src/share/classes/java/util/RegularEnumSet.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/RegularEnumSet.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,7 +23,10 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;
+
+import java.util.ConcurrentModificationException;
+import java.util.NoSuchElementException;

 /**
  * Private implementation class for EnumSet, for "regular sized" enum types
diff -r 57336c319de8 src/share/classes/java/util/ServiceLoader.java
--- a/src/share/classes/java/util/ServiceLoader.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/ServiceLoader.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,21 +23,22 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;
+
+import org.jvnet.zephyr.jcl.java.lang.Iterable;
+import org.jvnet.zephyr.jcl.java.lang.Thread;

 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.net.URL;
+import java.security.AccessControlContext;
 import java.security.AccessController;
-import java.security.AccessControlContext;
 import java.security.PrivilegedAction;
-import java.util.ArrayList;
 import java.util.Enumeration;
-import java.util.Iterator;
-import java.util.List;
 import java.util.NoSuchElementException;
+import java.util.ServiceConfigurationError;


 /**
@@ -426,8 +427,8 @@
      *
      * <p> To achieve laziness the actual work of parsing the available
      * provider-configuration files and instantiating providers must be done by
-     * the iterator itself.  Its {@link java.util.Iterator#hasNext hasNext} and
-     * {@link java.util.Iterator#next next} methods can therefore throw a
+     * the iterator itself.  Its {@link Iterator#hasNext hasNext} and
+     * {@link Iterator#next next} methods can therefore throw a
      * {@link ServiceConfigurationError} if a provider-configuration file
      * violates the specified format, or if it names a provider class that
      * cannot be found and instantiated, or if the result of instantiating the
@@ -450,7 +451,7 @@
      * fail silently.</blockquote>
      *
      * <p> The iterator returned by this method does not support removal.
-     * Invoking its {@link java.util.Iterator#remove() remove} method will
+     * Invoking its {@link Iterator#remove() remove} method will
      * cause an {@link UnsupportedOperationException} to be thrown.
      *
      * @implNote When adding providers to the cache, the {@link #iterator
@@ -512,7 +513,7 @@

     /**
      * Creates a new service loader for the given service type, using the
-     * current thread's {@linkplain java.lang.Thread#getContextClassLoader
+     * current thread's {@linkplain Thread#getContextClassLoader
      * context class loader}.
      *
      * <p> An invocation of this convenience method of the form
@@ -580,7 +581,7 @@
      * @return  A descriptive string
      */
     public String toString() {
-        return "java.util.ServiceLoader[" + service.getName() + "]";
+        return "org.jvnet.zephyr.jcl.java.util.ServiceLoader[" + service.getName() + "]";
     }

 }
diff -r 57336c319de8 src/share/classes/java/util/Set.java
--- a/src/share/classes/java/util/Set.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/Set.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,7 +23,7 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;

 /**
  * A collection that contains no duplicate elements.  More formally, sets
diff -r 57336c319de8 src/share/classes/java/util/SortedMap.java
--- a/src/share/classes/java/util/SortedMap.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/SortedMap.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,7 +23,9 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;
+
+import java.util.NoSuchElementException;

 /**
  * A {@link Map} that further provides a <em>total ordering</em> on its keys.
diff -r 57336c319de8 src/share/classes/java/util/SortedSet.java
--- a/src/share/classes/java/util/SortedSet.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/SortedSet.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,7 +23,9 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;
+
+import java.util.NoSuchElementException;

 /**
  * A {@link Set} that further provides a <i>total ordering</i> on its elements.
@@ -229,7 +231,7 @@
      * characteristic values.
      *
      * <p>The spliterator's comparator (see
-     * {@link java.util.Spliterator#getComparator()}) must be {@code null} if
+     * {@link Spliterator#getComparator()}) must be {@code null} if
      * the sorted set's comparator (see {@link #comparator()}) is {@code null}.
      * Otherwise, the spliterator's comparator must be the same as or impose the
      * same total ordering as the sorted set's comparator.
diff -r 57336c319de8 src/share/classes/java/util/Spliterator.java
--- a/src/share/classes/java/util/Spliterator.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/Spliterator.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,12 +22,16 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util;
+package org.jvnet.zephyr.jcl.java.util;

-import java.util.function.Consumer;
-import java.util.function.DoubleConsumer;
-import java.util.function.IntConsumer;
-import java.util.function.LongConsumer;
+import org.jvnet.zephyr.jcl.java.util.concurrent.ConcurrentHashMap;
+import org.jvnet.zephyr.jcl.java.util.concurrent.CopyOnWriteArrayList;
+import org.jvnet.zephyr.jcl.java.util.function.Consumer;
+import org.jvnet.zephyr.jcl.java.util.function.DoubleConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.IntConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.LongConsumer;
+
+import java.util.ConcurrentModificationException;

 /**
  * An object for traversing and partitioning elements of a source.  The source
@@ -107,20 +111,20 @@
  * <p>Primitive subtype specializations of {@code Spliterator} are provided for
  * {@link OfInt int}, {@link OfLong long}, and {@link OfDouble double} values.
  * The subtype default implementations of
- * {@link Spliterator#tryAdvance(java.util.function.Consumer)}
- * and {@link Spliterator#forEachRemaining(java.util.function.Consumer)} box
+ * {@link Spliterator#tryAdvance(Consumer)}
+ * and {@link Spliterator#forEachRemaining(Consumer)} box
  * primitive values to instances of their corresponding wrapper class.  Such
  * boxing may undermine any performance advantages gained by using the primitive
  * specializations.  To avoid boxing, the corresponding primitive-based methods
  * should be used.  For example,
- * {@link Spliterator.OfInt#tryAdvance(java.util.function.IntConsumer)}
- * and {@link Spliterator.OfInt#forEachRemaining(java.util.function.IntConsumer)}
+ * {@link Spliterator.OfInt#tryAdvance(IntConsumer)}
+ * and {@link Spliterator.OfInt#forEachRemaining(IntConsumer)}
  * should be used in preference to
- * {@link Spliterator.OfInt#tryAdvance(java.util.function.Consumer)} and
- * {@link Spliterator.OfInt#forEachRemaining(java.util.function.Consumer)}.
+ * {@link Spliterator.OfInt#tryAdvance(Consumer)} and
+ * {@link Spliterator.OfInt#forEachRemaining(Consumer)}.
  * Traversal of primitive values using boxing-based methods
  * {@link #tryAdvance tryAdvance()} and
- * {@link #forEachRemaining(java.util.function.Consumer) forEachRemaining()}
+ * {@link #forEachRemaining(Consumer) forEachRemaining()}
  * does not affect the order in which the values, transformed to boxed values,
  * are encountered.
  *
@@ -138,18 +142,18 @@
  * the source is structurally interfered with (elements added, replaced, or
  * removed) between the time that the Spliterator binds to its data source and
  * the end of traversal.  For example, such interference will produce arbitrary,
- * non-deterministic results when using the {@code java.util.stream} framework.
+ * non-deterministic results when using the {@code org.jvnet.zephyr.jcl.java.util.stream} framework.
  *
  * <p>Structural interference of a source can be managed in the following ways
  * (in approximate order of decreasing desirability):
  * <ul>
  * <li>The source cannot be structurally interfered with.
  * <br>For example, an instance of
- * {@link java.util.concurrent.CopyOnWriteArrayList} is an immutable source.
+ * {@link CopyOnWriteArrayList} is an immutable source.
  * A Spliterator created from the source reports a characteristic of
  * {@code IMMUTABLE}.</li>
  * <li>The source manages concurrent modifications.
- * <br>For example, a key set of a {@link java.util.concurrent.ConcurrentHashMap}
+ * <br>For example, a key set of a {@link ConcurrentHashMap}
  * is a concurrent source.  A Spliterator created from the source reports a
  * characteristic of {@code CONCURRENT}.</li>
  * <li>The mutable source provides a late-binding and fail-fast Spliterator.
@@ -242,7 +246,7 @@
  * }}</pre>
  *
  * <p>As an example how a parallel computation framework, such as the
- * {@code java.util.stream} package, would use Spliterator in a parallel
+ * {@code org.jvnet.zephyr.jcl.java.util.stream} package, would use Spliterator in a parallel
  * computation, here is one way to implement an associated parallel forEach,
  * that illustrates the primary usage idiom of splitting off subtasks until
  * the estimated amount of work is small enough to perform
@@ -584,8 +588,8 @@
      * type must be a wrapper type for a primitive type, such as {@code Integer}
      * for the primitive {@code int} type.
      * @param <T_CONS> the type of primitive consumer.  The type must be a
-     * primitive specialization of {@link java.util.function.Consumer} for
-     * {@code T}, such as {@link java.util.function.IntConsumer} for
+     * primitive specialization of {@link Consumer} for
+     * {@code T}, such as {@link IntConsumer} for
      * {@code Integer}.
      * @param <T_SPLITR> the type of primitive Spliterator.  The type must be
      * a primitive specialization of Spliterator for {@code T}, such as
@@ -659,10 +663,10 @@
          * @implSpec
          * If the action is an instance of {@code IntConsumer} then it is cast
          * to {@code IntConsumer} and passed to
-         * {@link #tryAdvance(java.util.function.IntConsumer)}; otherwise
+         * {@link #tryAdvance(IntConsumer)}; otherwise
          * the action is adapted to an instance of {@code IntConsumer}, by
          * boxing the argument of {@code IntConsumer}, and then passed to
-         * {@link #tryAdvance(java.util.function.IntConsumer)}.
+         * {@link #tryAdvance(IntConsumer)}.
          */
         @Override
         default boolean tryAdvance(Consumer<? super Integer> action) {
@@ -682,10 +686,10 @@
          * @implSpec
          * If the action is an instance of {@code IntConsumer} then it is cast
          * to {@code IntConsumer} and passed to
-         * {@link #forEachRemaining(java.util.function.IntConsumer)}; otherwise
+         * {@link #forEachRemaining(IntConsumer)}; otherwise
          * the action is adapted to an instance of {@code IntConsumer}, by
          * boxing the argument of {@code IntConsumer}, and then passed to
-         * {@link #forEachRemaining(java.util.function.IntConsumer)}.
+         * {@link #forEachRemaining(IntConsumer)}.
          */
         @Override
         default void forEachRemaining(Consumer<? super Integer> action) {
@@ -723,10 +727,10 @@
          * @implSpec
          * If the action is an instance of {@code LongConsumer} then it is cast
          * to {@code LongConsumer} and passed to
-         * {@link #tryAdvance(java.util.function.LongConsumer)}; otherwise
+         * {@link #tryAdvance(LongConsumer)}; otherwise
          * the action is adapted to an instance of {@code LongConsumer}, by
          * boxing the argument of {@code LongConsumer}, and then passed to
-         * {@link #tryAdvance(java.util.function.LongConsumer)}.
+         * {@link #tryAdvance(LongConsumer)}.
          */
         @Override
         default boolean tryAdvance(Consumer<? super Long> action) {
@@ -746,10 +750,10 @@
          * @implSpec
          * If the action is an instance of {@code LongConsumer} then it is cast
          * to {@code LongConsumer} and passed to
-         * {@link #forEachRemaining(java.util.function.LongConsumer)}; otherwise
+         * {@link #forEachRemaining(LongConsumer)}; otherwise
          * the action is adapted to an instance of {@code LongConsumer}, by
          * boxing the argument of {@code LongConsumer}, and then passed to
-         * {@link #forEachRemaining(java.util.function.LongConsumer)}.
+         * {@link #forEachRemaining(LongConsumer)}.
          */
         @Override
         default void forEachRemaining(Consumer<? super Long> action) {
@@ -787,10 +791,10 @@
          * @implSpec
          * If the action is an instance of {@code DoubleConsumer} then it is
          * cast to {@code DoubleConsumer} and passed to
-         * {@link #tryAdvance(java.util.function.DoubleConsumer)}; otherwise
+         * {@link #tryAdvance(DoubleConsumer)}; otherwise
          * the action is adapted to an instance of {@code DoubleConsumer}, by
          * boxing the argument of {@code DoubleConsumer}, and then passed to
-         * {@link #tryAdvance(java.util.function.DoubleConsumer)}.
+         * {@link #tryAdvance(DoubleConsumer)}.
          */
         @Override
         default boolean tryAdvance(Consumer<? super Double> action) {
@@ -810,11 +814,11 @@
          * @implSpec
          * If the action is an instance of {@code DoubleConsumer} then it is
          * cast to {@code DoubleConsumer} and passed to
-         * {@link #forEachRemaining(java.util.function.DoubleConsumer)};
+         * {@link #forEachRemaining(DoubleConsumer)};
          * otherwise the action is adapted to an instance of
          * {@code DoubleConsumer}, by boxing the argument of
          * {@code DoubleConsumer}, and then passed to
-         * {@link #forEachRemaining(java.util.function.DoubleConsumer)}.
+         * {@link #forEachRemaining(DoubleConsumer)}.
          */
         @Override
         default void forEachRemaining(Consumer<? super Double> action) {
diff -r 57336c319de8 src/share/classes/java/util/Spliterators.java
--- a/src/share/classes/java/util/Spliterators.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/Spliterators.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,12 +22,14 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util;
+package org.jvnet.zephyr.jcl.java.util;

-import java.util.function.Consumer;
-import java.util.function.DoubleConsumer;
-import java.util.function.IntConsumer;
-import java.util.function.LongConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.Consumer;
+import org.jvnet.zephyr.jcl.java.util.function.DoubleConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.IntConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.LongConsumer;
+
+import java.util.NoSuchElementException;

 /**
  * Static classes and methods for operating on or creating instances of
@@ -50,7 +52,7 @@
      *
      * <p>The empty spliterator reports {@link Spliterator#SIZED} and
      * {@link Spliterator#SUBSIZED}.  Calls to
-     * {@link java.util.Spliterator#trySplit()} always return {@code null}.
+     * {@link Spliterator#trySplit()} always return {@code null}.
      *
      * @param <T> Type of elements
      * @return An empty spliterator
@@ -68,7 +70,7 @@
      *
      * <p>The empty spliterator reports {@link Spliterator#SIZED} and
      * {@link Spliterator#SUBSIZED}.  Calls to
-     * {@link java.util.Spliterator#trySplit()} always return {@code null}.
+     * {@link Spliterator#trySplit()} always return {@code null}.
      *
      * @return An empty spliterator
      */
@@ -84,7 +86,7 @@
      *
      * <p>The empty spliterator reports {@link Spliterator#SIZED} and
      * {@link Spliterator#SUBSIZED}.  Calls to
-     * {@link java.util.Spliterator#trySplit()} always return {@code null}.
+     * {@link Spliterator#trySplit()} always return {@code null}.
      *
      * @return An empty spliterator
      */
@@ -100,7 +102,7 @@
      *
      * <p>The empty spliterator reports {@link Spliterator#SIZED} and
      * {@link Spliterator#SUBSIZED}.  Calls to
-     * {@link java.util.Spliterator#trySplit()} always return {@code null}.
+     * {@link Spliterator#trySplit()} always return {@code null}.
      *
      * @return An empty spliterator
      */
@@ -399,8 +401,8 @@

     /**
      * Creates a {@code Spliterator} using the given collection's
-     * {@link java.util.Collection#iterator()} as the source of elements, and
-     * reporting its {@link java.util.Collection#size()} as its initial size.
+     * {@link Collection#iterator()} as the source of elements, and
+     * reporting its {@link Collection#size()} as its initial size.
      *
      * <p>The spliterator is
      * <em><a href="Spliterator.html#binding">late-binding</a></em>, inherits
@@ -1233,9 +1235,9 @@
      * permit limited parallelism.
      *
      * <p>An extending class need only
-     * implement {@link #tryAdvance(java.util.function.Consumer) tryAdvance}.
+     * implement {@link #tryAdvance(Consumer) tryAdvance}.
      * The extending class should override
-     * {@link #forEachRemaining(java.util.function.Consumer) forEach} if it can
+     * {@link #forEachRemaining(Consumer) forEach} if it can
      * provide a more performant implementation.
      *
      * @apiNote
@@ -1356,9 +1358,9 @@
      * permit limited parallelism.
      *
      * <p>To implement a spliterator an extending class need only
-     * implement {@link #tryAdvance(java.util.function.IntConsumer)}
+     * implement {@link #tryAdvance(IntConsumer)}
      * tryAdvance}.  The extending class should override
-     * {@link #forEachRemaining(java.util.function.IntConsumer)} forEach} if it
+     * {@link #forEachRemaining(IntConsumer)} forEach} if it
      * can provide a more performant implementation.
      *
      * @apiNote
@@ -1368,12 +1370,12 @@
      *
      * <p>An alternative to using this class, that also permits limited
      * parallelism, is to create a spliterator from an iterator
-     * (see {@link #spliterator(java.util.PrimitiveIterator.OfInt, long, int)}.
+     * (see {@link #spliterator(PrimitiveIterator.OfInt, long, int)}.
      * Depending on the circumstances using an iterator may be easier or more
      * convenient than extending this class. For example, if there is already an
      * iterator available to use then there is no need to extend this class.
      *
-     * @see #spliterator(java.util.PrimitiveIterator.OfInt, long, int)
+     * @see #spliterator(PrimitiveIterator.OfInt, long, int)
      * @since 1.8
      */
     public static abstract class AbstractIntSpliterator implements Spliterator.OfInt {
@@ -1466,9 +1468,9 @@
      * to permit limited parallelism.
      *
      * <p>To implement a spliterator an extending class need only
-     * implement {@link #tryAdvance(java.util.function.LongConsumer)}
+     * implement {@link #tryAdvance(LongConsumer)}
      * tryAdvance}.  The extending class should override
-     * {@link #forEachRemaining(java.util.function.LongConsumer)} forEach} if it
+     * {@link #forEachRemaining(LongConsumer)} forEach} if it
      * can provide a more performant implementation.
      *
      * @apiNote
@@ -1478,12 +1480,12 @@
      *
      * <p>An alternative to using this class, that also permits limited
      * parallelism, is to create a spliterator from an iterator
-     * (see {@link #spliterator(java.util.PrimitiveIterator.OfLong, long, int)}.
+     * (see {@link #spliterator(PrimitiveIterator.OfLong, long, int)}.
      * Depending on the circumstances using an iterator may be easier or more
      * convenient than extending this class. For example, if there is already an
      * iterator available to use then there is no need to extend this class.
      *
-     * @see #spliterator(java.util.PrimitiveIterator.OfLong, long, int)
+     * @see #spliterator(PrimitiveIterator.OfLong, long, int)
      * @since 1.8
      */
     public static abstract class AbstractLongSpliterator implements Spliterator.OfLong {
@@ -1576,9 +1578,9 @@
      * {@code trySplit} to permit limited parallelism.
      *
      * <p>To implement a spliterator an extending class need only
-     * implement {@link #tryAdvance(java.util.function.DoubleConsumer)}
+     * implement {@link #tryAdvance(DoubleConsumer)}
      * tryAdvance}.  The extending class should override
-     * {@link #forEachRemaining(java.util.function.DoubleConsumer)} forEach} if
+     * {@link #forEachRemaining(DoubleConsumer)} forEach} if
      * it can provide a more performant implementation.
      *
      * @apiNote
@@ -1588,12 +1590,12 @@
      *
      * <p>An alternative to using this class, that also permits limited
      * parallelism, is to create a spliterator from an iterator
-     * (see {@link #spliterator(java.util.PrimitiveIterator.OfDouble, long, int)}.
+     * (see {@link #spliterator(PrimitiveIterator.OfDouble, long, int)}.
      * Depending on the circumstances using an iterator may be easier or more
      * convenient than extending this class. For example, if there is already an
      * iterator available to use then there is no need to extend this class.
      *
-     * @see #spliterator(java.util.PrimitiveIterator.OfDouble, long, int)
+     * @see #spliterator(PrimitiveIterator.OfDouble, long, int)
      * @since 1.8
      */
     public static abstract class AbstractDoubleSpliterator implements Spliterator.OfDouble {
@@ -1699,8 +1701,8 @@

         /**
          * Creates a spliterator using the given given
-         * collection's {@link java.util.Collection#iterator()) for traversal,
-         * and reporting its {@link java.util.Collection#size()) as its initial
+         * collection's {@link Collection#iterator()) for traversal,
+         * and reporting its {@link Collection#size()) as its initial
          * size.
          *
          * @param c the collection
diff -r 57336c319de8 src/share/classes/java/util/SplittableRandom.java
--- a/src/share/classes/java/util/SplittableRandom.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/SplittableRandom.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,16 +23,16 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;

-import java.util.concurrent.atomic.AtomicLong;
-import java.util.function.IntConsumer;
-import java.util.function.LongConsumer;
-import java.util.function.DoubleConsumer;
-import java.util.stream.StreamSupport;
-import java.util.stream.IntStream;
-import java.util.stream.LongStream;
-import java.util.stream.DoubleStream;
+import org.jvnet.zephyr.jcl.java.util.concurrent.atomic.AtomicLong;
+import org.jvnet.zephyr.jcl.java.util.function.DoubleConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.IntConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.LongConsumer;
+import org.jvnet.zephyr.jcl.java.util.stream.DoubleStream;
+import org.jvnet.zephyr.jcl.java.util.stream.IntStream;
+import org.jvnet.zephyr.jcl.java.util.stream.LongStream;
+import org.jvnet.zephyr.jcl.java.util.stream.StreamSupport;

 /**
  * A generator of uniform pseudorandom values applicable for use in
@@ -40,7 +40,7 @@
  * generate subtasks. Class {@code SplittableRandom} supports methods for
  * producing pseudorandom numbers of type {@code int}, {@code long},
  * and {@code double} with similar usages as for class
- * {@link java.util.Random} but differs in the following ways:
+ * {@link Random} but differs in the following ways:
  *
  * <ul>
  *
diff -r 57336c319de8 src/share/classes/java/util/Stack.java
--- a/src/share/classes/java/util/Stack.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/Stack.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,7 +23,9 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;
+
+import java.util.EmptyStackException;

 /**
  * The <code>Stack</code> class represents a last-in-first-out
@@ -61,7 +63,7 @@
      *
      * @param   item   the item to be pushed onto this stack.
      * @return  the <code>item</code> argument.
-     * @see     java.util.Vector#addElement
+     * @see     Vector#addElement
      */
     public E push(E item) {
         addElement(item);
diff -r 57336c319de8 src/share/classes/java/util/TimSort.java
--- a/src/share/classes/java/util/TimSort.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/TimSort.java	Fri Jul 31 15:50:29 2015 +0300
@@ -24,7 +24,7 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;

 /**
  * A stable, adaptive, iterative mergesort that requires far fewer than
diff -r 57336c319de8 src/share/classes/java/util/TreeMap.java
--- a/src/share/classes/java/util/TreeMap.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/TreeMap.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,12 +23,15 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;
+
+import org.jvnet.zephyr.jcl.java.util.function.BiConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.BiFunction;
+import org.jvnet.zephyr.jcl.java.util.function.Consumer;

 import java.io.Serializable;
-import java.util.function.BiConsumer;
-import java.util.function.BiFunction;
-import java.util.function.Consumer;
+import java.util.ConcurrentModificationException;
+import java.util.NoSuchElementException;

 /**
  * A Red-Black tree based {@link NavigableMap} implementation.
@@ -797,7 +800,7 @@
      * <em>fail-fast</em>, and additionally reports {@link Spliterator#SORTED}
      * and {@link Spliterator#ORDERED} with an encounter order that is ascending
      * key order.  The spliterator's comparator (see
-     * {@link java.util.Spliterator#getComparator()}) is {@code null} if
+     * {@link Spliterator#getComparator()}) is {@code null} if
      * the tree map's comparator (see {@link #comparator()}) is {@code null}.
      * Otherwise, the spliterator's comparator is the same as or imposes the
      * same total ordering as the tree map's comparator.
diff -r 57336c319de8 src/share/classes/java/util/TreeSet.java
--- a/src/share/classes/java/util/TreeSet.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/TreeSet.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,7 +23,10 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;
+
+import java.util.ConcurrentModificationException;
+import java.util.NoSuchElementException;

 /**
  * A {@link NavigableSet} implementation based on a {@link TreeMap}.
@@ -506,8 +509,10 @@
         s.writeInt(m.size());

         // Write out all elements in the proper order.
-        for (E e : m.keySet())
+        for (Iterator<E> iterator = m.keySet().iterator(); iterator.hasNext(); ) {
+            E e = iterator.next();
             s.writeObject(e);
+        }
     }

     /**
@@ -544,7 +549,7 @@
      * the reporting of additional characteristic values.
      *
      * <p>The spliterator's comparator (see
-     * {@link java.util.Spliterator#getComparator()}) is {@code null} if
+     * {@link Spliterator#getComparator()}) is {@code null} if
      * the tree set's comparator (see {@link #comparator()}) is {@code null}.
      * Otherwise, the spliterator's comparator is the same as or imposes the
      * same total ordering as the tree set's comparator.
diff -r 57336c319de8 src/share/classes/java/util/Tripwire.java
--- a/src/share/classes/java/util/Tripwire.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/Tripwire.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,7 +22,7 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util;
+package org.jvnet.zephyr.jcl.java.util;

 import sun.util.logging.PlatformLogger;

@@ -31,7 +31,7 @@

 /**
  * Utility class for detecting inadvertent uses of boxing in
- * {@code java.util} classes.  The detection is turned on or off based on
+ * {@code org.jvnet.zephyr.jcl.java.util} classes.  The detection is turned on or off based on
  * whether the system property {@code org.openjdk.java.util.stream.tripwire} is
  * considered {@code true} according to {@link Boolean#getBoolean(String)}.
  * This should normally be turned off for production use.
diff -r 57336c319de8 src/share/classes/java/util/Vector.java
--- a/src/share/classes/java/util/Vector.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/Vector.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,11 +23,17 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;

-import java.util.function.Consumer;
-import java.util.function.Predicate;
-import java.util.function.UnaryOperator;
+import org.jvnet.zephyr.jcl.java.util.function.Consumer;
+import org.jvnet.zephyr.jcl.java.util.function.Predicate;
+import org.jvnet.zephyr.jcl.java.util.function.UnaryOperator;
+
+import java.util.BitSet;
+import java.util.ConcurrentModificationException;
+import java.util.Enumeration;
+import java.util.NoSuchElementException;
+import java.util.RandomAccess;

 /**
  * The {@code Vector} class implements a growable array of
diff -r 57336c319de8 src/share/classes/java/util/WeakHashMap.java
--- a/src/share/classes/java/util/WeakHashMap.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/WeakHashMap.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,15 +23,16 @@
  * questions.
  */

-package java.util;
+package org.jvnet.zephyr.jcl.java.util;

+import org.jvnet.zephyr.jcl.java.util.function.BiConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.BiFunction;
+import org.jvnet.zephyr.jcl.java.util.function.Consumer;
+
+import java.lang.ref.ReferenceQueue;
 import java.lang.ref.WeakReference;
-import java.lang.ref.ReferenceQueue;
-import java.util.concurrent.ThreadLocalRandom;
-import java.util.function.BiConsumer;
-import java.util.function.BiFunction;
-import java.util.function.Consumer;
-
+import java.util.ConcurrentModificationException;
+import java.util.NoSuchElementException;

 /**
  * Hash table based implementation of the <tt>Map</tt> interface, with
@@ -130,7 +131,7 @@
  * @author      Josh Bloch
  * @author      Mark Reinhold
  * @since       1.2
- * @see         java.util.HashMap
+ * @see         HashMap
  * @see         java.lang.ref.WeakReference
  */
 public class WeakHashMap<K,V>
@@ -562,8 +563,11 @@
                 resize(newCapacity);
         }

-        for (Map.Entry<? extends K, ? extends V> e : m.entrySet())
+        for (Iterator<? extends Map.Entry<? extends K, ? extends V>> iterator = m.entrySet().iterator();
+                iterator.hasNext(); ) {
+            Map.Entry<? extends K, ? extends V> e = iterator.next();
             put(e.getKey(), e.getValue());
+        }
     }

     /**
@@ -985,8 +989,10 @@

         private List<Map.Entry<K,V>> deepCopy() {
             List<Map.Entry<K,V>> list = new ArrayList<>(size());
-            for (Map.Entry<K,V> e : this)
+            for (Iterator<Map.Entry<K, V>> iterator = this.iterator(); iterator.hasNext(); ) {
+                Map.Entry<K, V> e = iterator.next();
                 list.add(new AbstractMap.SimpleEntry<>(e));
+            }
             return list;
         }

diff -r 57336c319de8 src/share/classes/java/util/concurrent/ArrayBlockingQueue.java
--- a/src/share/classes/java/util/concurrent/ArrayBlockingQueue.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/ArrayBlockingQueue.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,16 +33,18 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent;
-import java.util.concurrent.locks.Condition;
-import java.util.concurrent.locks.ReentrantLock;
-import java.util.AbstractQueue;
-import java.util.Collection;
-import java.util.Iterator;
+package org.jvnet.zephyr.jcl.java.util.concurrent;
+
+import org.jvnet.zephyr.jcl.java.util.AbstractQueue;
+import org.jvnet.zephyr.jcl.java.util.Collection;
+import org.jvnet.zephyr.jcl.java.util.Iterator;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.Spliterators;
+import org.jvnet.zephyr.jcl.java.util.concurrent.locks.Condition;
+import org.jvnet.zephyr.jcl.java.util.concurrent.locks.ReentrantLock;
+
+import java.lang.ref.WeakReference;
 import java.util.NoSuchElementException;
-import java.lang.ref.WeakReference;
-import java.util.Spliterators;
-import java.util.Spliterator;

 /**
  * A bounded {@linkplain BlockingQueue blocking queue} backed by an
@@ -283,7 +285,8 @@
         try {
             int i = 0;
             try {
-                for (E e : c) {
+                for (Iterator<? extends E> iterator = c.iterator(); iterator.hasNext(); ) {
+                    E e = iterator.next();
                     checkNotNull(e);
                     items[i++] = e;
                 }
diff -r 57336c319de8 src/share/classes/java/util/concurrent/BlockingDeque.java
--- a/src/share/classes/java/util/concurrent/BlockingDeque.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/BlockingDeque.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,8 +33,12 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent;
-import java.util.*;
+package org.jvnet.zephyr.jcl.java.util.concurrent;
+
+import org.jvnet.zephyr.jcl.java.util.Deque;
+import org.jvnet.zephyr.jcl.java.util.Iterator;
+
+import java.util.NoSuchElementException;

 /**
  * A {@link Deque} that additionally supports blocking operations that wait
diff -r 57336c319de8 src/share/classes/java/util/concurrent/BlockingQueue.java
--- a/src/share/classes/java/util/concurrent/BlockingQueue.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/BlockingQueue.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,13 +33,13 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent;
+package org.jvnet.zephyr.jcl.java.util.concurrent;

-import java.util.Collection;
-import java.util.Queue;
+import org.jvnet.zephyr.jcl.java.util.Collection;
+import org.jvnet.zephyr.jcl.java.util.Queue;

 /**
- * A {@link java.util.Queue} that additionally supports operations
+ * A {@link Queue} that additionally supports operations
  * that wait for the queue to become non-empty when retrieving an
  * element, and wait for space to become available in the queue when
  * storing an element.
@@ -99,7 +99,7 @@
  *
  * <p>{@code BlockingQueue} implementations are designed to be used
  * primarily for producer-consumer queues, but additionally support
- * the {@link java.util.Collection} interface.  So, for example, it is
+ * the {@link Collection} interface.  So, for example, it is
  * possible to remove an arbitrary element from a queue using
  * {@code remove(x)}. However, such operations are in general
  * <em>not</em> performed very efficiently, and are intended for only
diff -r 57336c319de8 src/share/classes/java/util/concurrent/ConcurrentHashMap.java
--- a/src/share/classes/java/util/concurrent/ConcurrentHashMap.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/ConcurrentHashMap.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,35 +33,37 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent;
+package org.jvnet.zephyr.jcl.java.util.concurrent;
+
+import org.jvnet.zephyr.jcl.impl.misc.UnsafeHolder;
+import org.jvnet.zephyr.jcl.java.lang.Thread;
+import org.jvnet.zephyr.jcl.java.util.AbstractMap;
+import org.jvnet.zephyr.jcl.java.util.Arrays;
+import org.jvnet.zephyr.jcl.java.util.Collection;
+import org.jvnet.zephyr.jcl.java.util.HashMap;
+import org.jvnet.zephyr.jcl.java.util.Hashtable;
+import org.jvnet.zephyr.jcl.java.util.Iterator;
+import org.jvnet.zephyr.jcl.java.util.Map;
+import org.jvnet.zephyr.jcl.java.util.Set;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.concurrent.atomic.AtomicReference;
+import org.jvnet.zephyr.jcl.java.util.concurrent.locks.LockSupport;
+import org.jvnet.zephyr.jcl.java.util.concurrent.locks.ReentrantLock;
+import org.jvnet.zephyr.jcl.java.util.function.BiConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.BiFunction;
+import org.jvnet.zephyr.jcl.java.util.function.Consumer;
+import org.jvnet.zephyr.jcl.java.util.function.Function;
+import org.jvnet.zephyr.jcl.java.util.stream.Stream;

 import java.io.ObjectStreamField;
 import java.io.Serializable;
 import java.lang.reflect.ParameterizedType;
 import java.lang.reflect.Type;
-import java.util.AbstractMap;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Comparator;
 import java.util.Enumeration;
-import java.util.HashMap;
-import java.util.Hashtable;
-import java.util.Iterator;
-import java.util.Map;
 import java.util.NoSuchElementException;
-import java.util.Set;
-import java.util.Spliterator;
-import java.util.concurrent.ConcurrentMap;
+import java.util.concurrent.CountedCompleter;
 import java.util.concurrent.ForkJoinPool;
-import java.util.concurrent.atomic.AtomicReference;
-import java.util.concurrent.locks.LockSupport;
-import java.util.concurrent.locks.ReentrantLock;
-import java.util.function.BiConsumer;
-import java.util.function.BiFunction;
-import java.util.function.BinaryOperator;
-import java.util.function.Consumer;
 import java.util.function.DoubleBinaryOperator;
-import java.util.function.Function;
 import java.util.function.IntBinaryOperator;
 import java.util.function.LongBinaryOperator;
 import java.util.function.ToDoubleBiFunction;
@@ -70,12 +72,11 @@
 import java.util.function.ToIntFunction;
 import java.util.function.ToLongBiFunction;
 import java.util.function.ToLongFunction;
-import java.util.stream.Stream;

 /**
  * A hash table supporting full concurrency of retrievals and
  * high expected concurrency for updates. This class obeys the
- * same functional specification as {@link java.util.Hashtable}, and
+ * same functional specification as {@link Hashtable}, and
  * includes versions of methods corresponding to each method of
  * {@code Hashtable}. However, even though all operations are
  * thread-safe, retrieval operations do <em>not</em> entail locking,
@@ -160,7 +161,7 @@
  * of supplied functions should not depend on any ordering, or on any
  * other objects or values that may transiently change while
  * computation is in progress; and except for forEach actions, should
- * ideally be side-effect-free. Bulk operations on {@link java.util.Map.Entry}
+ * ideally be side-effect-free. Bulk operations on {@link Map.Entry}
  * objects do not support method {@code setValue}.
  *
  * <ul>
@@ -275,7 +276,7 @@
      * concurrent readability (typically method get(), but also
      * iterators and related methods) while minimizing update
      * contention. Secondary goals are to keep space consumption about
-     * the same or better than java.util.HashMap, and to support high
+     * the same or better than org.jvnet.zephyr.jcl.java.util.HashMap, and to support high
      * initial insertion rates on an empty table by many threads.
      *
      * This map usually acts as a binned (bucketed) hash table.  Each
@@ -1080,8 +1081,11 @@
      */
     public void putAll(Map<? extends K, ? extends V> m) {
         tryPresize(m.size());
-        for (Map.Entry<? extends K, ? extends V> e : m.entrySet())
+        for (Iterator<? extends Map.Entry<? extends K, ? extends V>> iterator = m.entrySet().iterator();
+                iterator.hasNext(); ) {
+            Map.Entry<? extends K, ? extends V> e = iterator.next();
             putVal(e.getKey(), e.getValue(), false);
+        }
     }

     /**
@@ -1351,7 +1355,8 @@
                 if (v == null || (v != val && !v.equals(val)))
                     return false;
             }
-            for (Map.Entry<?,?> e : m.entrySet()) {
+            for (Iterator<? extends Map.Entry<?, ?>> iterator = m.entrySet().iterator(); iterator.hasNext(); ) {
+                Map.Entry<?, ?> e = iterator.next();
                 Object mk, mv, v;
                 if ((mk = e.getKey()) == null ||
                     (mv = e.getValue()) == null ||
@@ -2052,7 +2057,7 @@
      * Legacy method testing if some key maps into the specified value
      * in this table.  This method is identical in functionality to
      * {@link #containsValue(Object)}, and exists solely to ensure
-     * full compatibility with class {@link java.util.Hashtable},
+     * full compatibility with class {@link Hashtable},
      * which supported this method prior to introduction of the
      * Java Collections framework.
      *
@@ -3244,7 +3249,7 @@
         private static final long LOCKSTATE;
         static {
             try {
-                U = sun.misc.Unsafe.getUnsafe();
+                U = UnsafeHolder.getUnsafe();
                 Class<?> k = TreeBin.class;
                 LOCKSTATE = U.objectFieldOffset
                     (k.getDeclaredField("lockState"));
@@ -4414,7 +4419,8 @@
             int n = (int)sz;
             Object[] r = new Object[n];
             int i = 0;
-            for (E e : this) {
+            for (Iterator<? extends E> iterator = iterator(); iterator.hasNext(); ) {
+                E e = iterator.next();
                 if (i == n) {
                     if (n >= MAX_ARRAY_SIZE)
                         throw new OutOfMemoryError(oomeMsg);
@@ -4440,7 +4446,8 @@
                 .newInstance(a.getClass().getComponentType(), m);
             int n = r.length;
             int i = 0;
-            for (E e : this) {
+            for (Iterator<? extends E> iterator = iterator(); iterator.hasNext(); ) {
+                E e = iterator.next();
                 if (i == n) {
                     if (n >= MAX_ARRAY_SIZE)
                         throw new OutOfMemoryError(oomeMsg);
@@ -4488,7 +4495,8 @@

         public final boolean containsAll(Collection<?> c) {
             if (c != this) {
-                for (Object e : c) {
+                for (Iterator<?> iterator = c.iterator(); iterator.hasNext(); ) {
+                    Object e = iterator.next();
                     if (e == null || !contains(e))
                         return false;
                 }
@@ -4611,7 +4619,8 @@
             V v;
             if ((v = value) == null)
                 throw new UnsupportedOperationException();
-            for (K e : c) {
+            for (Iterator<? extends K> iterator = c.iterator(); iterator.hasNext(); ) {
+                K e = iterator.next();
                 if (map.putVal(e, v, true) == null)
                     added = true;
             }
@@ -4620,8 +4629,10 @@

         public int hashCode() {
             int h = 0;
-            for (K e : this)
+            for (Iterator<? extends K> iterator = iterator(); iterator.hasNext(); ) {
+                K e = iterator.next();
                 h += e.hashCode();
+            }
             return h;
         }

@@ -4752,7 +4763,8 @@

         public boolean addAll(Collection<? extends Entry<K,V>> c) {
             boolean added = false;
-            for (Entry<K,V> e : c) {
+            for (Iterator<? extends Entry<K, V>> iterator = c.iterator(); iterator.hasNext(); ) {
+                Entry<K, V> e = iterator.next();
                 if (add(e))
                     added = true;
             }
@@ -6286,7 +6298,7 @@

     static {
         try {
-            U = sun.misc.Unsafe.getUnsafe();
+            U = UnsafeHolder.getUnsafe();
             Class<?> k = ConcurrentHashMap.class;
             SIZECTL = U.objectFieldOffset
                 (k.getDeclaredField("sizeCtl"));
diff -r 57336c319de8 src/share/classes/java/util/concurrent/ConcurrentLinkedDeque.java
--- a/src/share/classes/java/util/concurrent/ConcurrentLinkedDeque.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/ConcurrentLinkedDeque.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,18 +33,20 @@
  * at http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent;
+package org.jvnet.zephyr.jcl.java.util.concurrent;

-import java.util.AbstractCollection;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Deque;
-import java.util.Iterator;
+import org.jvnet.zephyr.jcl.impl.misc.UnsafeHolder;
+import org.jvnet.zephyr.jcl.java.util.AbstractCollection;
+import org.jvnet.zephyr.jcl.java.util.ArrayList;
+import org.jvnet.zephyr.jcl.java.util.Collection;
+import org.jvnet.zephyr.jcl.java.util.Deque;
+import org.jvnet.zephyr.jcl.java.util.Iterator;
+import org.jvnet.zephyr.jcl.java.util.Queue;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.Spliterators;
+import org.jvnet.zephyr.jcl.java.util.function.Consumer;
+
 import java.util.NoSuchElementException;
-import java.util.Queue;
-import java.util.Spliterator;
-import java.util.Spliterators;
-import java.util.function.Consumer;

 /**
  * An unbounded concurrent {@linkplain Deque deque} based on linked nodes.
@@ -332,7 +334,7 @@

         static {
             try {
-                UNSAFE = sun.misc.Unsafe.getUnsafe();
+                UNSAFE = UnsafeHolder.getUnsafe();
                 Class<?> k = Node.class;
                 prevOffset = UNSAFE.objectFieldOffset
                     (k.getDeclaredField("prev"));
@@ -846,7 +848,8 @@
     public ConcurrentLinkedDeque(Collection<? extends E> c) {
         // Copy c into a private chain of Nodes
         Node<E> h = null, t = null;
-        for (E e : c) {
+        for (Iterator<? extends E> iterator = c.iterator(); iterator.hasNext(); ) {
+            E e = iterator.next();
             checkNotNull(e);
             Node<E> newNode = new Node<E>(e);
             if (h == null)
@@ -1171,7 +1174,8 @@

         // Copy c into a private chain of Nodes
         Node<E> beginningOfTheEnd = null, last = null;
-        for (E e : c) {
+        for (Iterator<? extends E> iterator = c.iterator(); iterator.hasNext(); ) {
+            E e = iterator.next();
             checkNotNull(e);
             Node<E> newNode = new Node<E>(e);
             if (beginningOfTheEnd == null)
@@ -1573,7 +1577,7 @@
         NEXT_TERMINATOR = new Node<Object>();
         NEXT_TERMINATOR.prev = NEXT_TERMINATOR;
         try {
-            UNSAFE = sun.misc.Unsafe.getUnsafe();
+            UNSAFE = UnsafeHolder.getUnsafe();
             Class<?> k = ConcurrentLinkedDeque.class;
             headOffset = UNSAFE.objectFieldOffset
                 (k.getDeclaredField("head"));
diff -r 57336c319de8 src/share/classes/java/util/concurrent/ConcurrentLinkedQueue.java
--- a/src/share/classes/java/util/concurrent/ConcurrentLinkedQueue.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/ConcurrentLinkedQueue.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,17 +33,19 @@
  * at http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent;
+package org.jvnet.zephyr.jcl.java.util.concurrent;

-import java.util.AbstractQueue;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Iterator;
+import org.jvnet.zephyr.jcl.impl.misc.UnsafeHolder;
+import org.jvnet.zephyr.jcl.java.util.AbstractQueue;
+import org.jvnet.zephyr.jcl.java.util.ArrayList;
+import org.jvnet.zephyr.jcl.java.util.Collection;
+import org.jvnet.zephyr.jcl.java.util.Iterator;
+import org.jvnet.zephyr.jcl.java.util.Queue;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.Spliterators;
+import org.jvnet.zephyr.jcl.java.util.function.Consumer;
+
 import java.util.NoSuchElementException;
-import java.util.Queue;
-import java.util.Spliterator;
-import java.util.Spliterators;
-import java.util.function.Consumer;

 /**
  * An unbounded thread-safe {@linkplain Queue queue} based on linked nodes.
@@ -209,7 +211,7 @@

         static {
             try {
-                UNSAFE = sun.misc.Unsafe.getUnsafe();
+                UNSAFE = UnsafeHolder.getUnsafe();
                 Class<?> k = Node.class;
                 itemOffset = UNSAFE.objectFieldOffset
                     (k.getDeclaredField("item"));
@@ -267,7 +269,8 @@
      */
     public ConcurrentLinkedQueue(Collection<? extends E> c) {
         Node<E> h = null, t = null;
-        for (E e : c) {
+        for (Iterator<? extends E> iterator = c.iterator(); iterator.hasNext(); ) {
+            E e = iterator.next();
             checkNotNull(e);
             Node<E> newNode = new Node<E>(e);
             if (h == null)
@@ -521,7 +524,8 @@

         // Copy c into a private chain of Nodes
         Node<E> beginningOfTheEnd = null, last = null;
-        for (E e : c) {
+        for (Iterator<? extends E> iterator = c.iterator(); iterator.hasNext(); ) {
+            E e = iterator.next();
             checkNotNull(e);
             Node<E> newNode = new Node<E>(e);
             if (beginningOfTheEnd == null)
@@ -929,7 +933,7 @@
     private static final long tailOffset;
     static {
         try {
-            UNSAFE = sun.misc.Unsafe.getUnsafe();
+            UNSAFE = UnsafeHolder.getUnsafe();
             Class<?> k = ConcurrentLinkedQueue.class;
             headOffset = UNSAFE.objectFieldOffset
                 (k.getDeclaredField("head"));
diff -r 57336c319de8 src/share/classes/java/util/concurrent/ConcurrentMap.java
--- a/src/share/classes/java/util/concurrent/ConcurrentMap.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/ConcurrentMap.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,15 +33,17 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent;
-import java.util.Map;
-import java.util.Objects;
-import java.util.function.BiConsumer;
-import java.util.function.BiFunction;
-import java.util.function.Function;
+package org.jvnet.zephyr.jcl.java.util.concurrent;
+
+import org.jvnet.zephyr.jcl.java.util.Iterator;
+import org.jvnet.zephyr.jcl.java.util.Map;
+import org.jvnet.zephyr.jcl.java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.function.BiConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.BiFunction;
+import org.jvnet.zephyr.jcl.java.util.function.Function;

 /**
- * A {@link java.util.Map} providing thread safety and atomicity
+ * A {@link Map} providing thread safety and atomicity
  * guarantees.
  *
  * <p>Memory consistency effects: As with other concurrent
@@ -101,7 +103,8 @@
     @Override
     default void forEach(BiConsumer<? super K, ? super V> action) {
         Objects.requireNonNull(action);
-        for (Map.Entry<K, V> entry : entrySet()) {
+        for (Iterator<Entry<K, V>> iterator = entrySet().iterator(); iterator.hasNext(); ) {
+            Entry<K, V> entry = iterator.next();
             K k;
             V v;
             try {
diff -r 57336c319de8 src/share/classes/java/util/concurrent/ConcurrentNavigableMap.java
--- a/src/share/classes/java/util/concurrent/ConcurrentNavigableMap.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/ConcurrentNavigableMap.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,8 +33,12 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent;
-import java.util.*;
+package org.jvnet.zephyr.jcl.java.util.concurrent;
+
+import org.jvnet.zephyr.jcl.java.util.Collections;
+import org.jvnet.zephyr.jcl.java.util.Comparator;
+import org.jvnet.zephyr.jcl.java.util.NavigableMap;
+import org.jvnet.zephyr.jcl.java.util.NavigableSet;

 /**
  * A {@link ConcurrentMap} supporting {@link NavigableMap} operations,
diff -r 57336c319de8 src/share/classes/java/util/concurrent/ConcurrentSkipListMap.java
--- a/src/share/classes/java/util/concurrent/ConcurrentSkipListMap.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/ConcurrentSkipListMap.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,31 +33,31 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent;
+package org.jvnet.zephyr.jcl.java.util.concurrent;
+
+import org.jvnet.zephyr.jcl.impl.misc.UnsafeHolder;
+import org.jvnet.zephyr.jcl.java.lang.Thread;
+import org.jvnet.zephyr.jcl.java.util.AbstractCollection;
+import org.jvnet.zephyr.jcl.java.util.AbstractMap;
+import org.jvnet.zephyr.jcl.java.util.AbstractSet;
+import org.jvnet.zephyr.jcl.java.util.ArrayList;
+import org.jvnet.zephyr.jcl.java.util.Collection;
+import org.jvnet.zephyr.jcl.java.util.Collections;
+import org.jvnet.zephyr.jcl.java.util.Comparator;
+import org.jvnet.zephyr.jcl.java.util.Iterator;
+import org.jvnet.zephyr.jcl.java.util.List;
+import org.jvnet.zephyr.jcl.java.util.Map;
+import org.jvnet.zephyr.jcl.java.util.NavigableSet;
+import org.jvnet.zephyr.jcl.java.util.Set;
+import org.jvnet.zephyr.jcl.java.util.SortedMap;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.function.BiConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.BiFunction;
+import org.jvnet.zephyr.jcl.java.util.function.Consumer;
+import org.jvnet.zephyr.jcl.java.util.function.Function;
+
 import java.io.Serializable;
-import java.util.AbstractCollection;
-import java.util.AbstractMap;
-import java.util.AbstractSet;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.NavigableMap;
-import java.util.NavigableSet;
 import java.util.NoSuchElementException;
-import java.util.Set;
-import java.util.SortedMap;
-import java.util.SortedSet;
-import java.util.Spliterator;
-import java.util.concurrent.ConcurrentMap;
-import java.util.concurrent.ConcurrentNavigableMap;
-import java.util.function.BiFunction;
-import java.util.function.Consumer;
-import java.util.function.BiConsumer;
-import java.util.function.Function;

 /**
  * A scalable concurrent {@link ConcurrentNavigableMap} implementation.
@@ -283,7 +283,7 @@
      * do, half have one level, a quarter have two, and so on (see
      * Pugh's Skip List Cookbook, sec 3.4).  The expected total space
      * requirement for a map is slightly less than for the current
-     * implementation of java.util.TreeMap.
+     * implementation of org.jvnet.zephyr.jcl.java.util.TreeMap.
      *
      * Changing the level of the index (i.e, the height of the
      * tree-like structure) also uses CAS. The head index has initial
@@ -541,7 +541,7 @@

         static {
             try {
-                UNSAFE = sun.misc.Unsafe.getUnsafe();
+                UNSAFE = UnsafeHolder.getUnsafe();
                 Class<?> k = Node.class;
                 valueOffset = UNSAFE.objectFieldOffset
                     (k.getDeclaredField("value"));
@@ -621,7 +621,7 @@
         private static final long rightOffset;
         static {
             try {
-                UNSAFE = sun.misc.Unsafe.getUnsafe();
+                UNSAFE = UnsafeHolder.getUnsafe();
                 Class<?> k = Index.class;
                 rightOffset = UNSAFE.objectFieldOffset
                     (k.getDeclaredField("right"));
@@ -1811,7 +1811,7 @@
      * {@link Spliterator#NONNULL}, {@link Spliterator#SORTED} and
      * {@link Spliterator#ORDERED}, with an encounter order that is ascending
      * key order.  The spliterator's comparator (see
-     * {@link java.util.Spliterator#getComparator()}) is {@code null} if
+     * {@link Spliterator#getComparator()}) is {@code null} if
      * the map's comparator (see {@link #comparator()}) is {@code null}.
      * Otherwise, the spliterator's comparator is the same as or imposes the
      * same total ordering as the map's comparator.
@@ -1928,10 +1928,13 @@
             return false;
         Map<?,?> m = (Map<?,?>) o;
         try {
-            for (Map.Entry<K,V> e : this.entrySet())
+            for (Iterator<Map.Entry<K, V>> iterator = this.entrySet().iterator(); iterator.hasNext(); ) {
+                Map.Entry<K, V> e = iterator.next();
                 if (! e.getValue().equals(m.get(e.getKey())))
                     return false;
-            for (Map.Entry<?,?> e : m.entrySet()) {
+            }
+            for (Iterator<? extends Map.Entry<?, ?>> iterator = m.entrySet().iterator(); iterator.hasNext(); ) {
+                Map.Entry<?, ?> e = iterator.next();
                 Object k = e.getKey();
                 Object v = e.getValue();
                 if (k == null || v == null || !v.equals(get(k)))
@@ -2370,8 +2373,10 @@
     static final <E> List<E> toList(Collection<E> c) {
         // Using size() here would be a pessimization.
         ArrayList<E> list = new ArrayList<E>();
-        for (E e : c)
+        for (Iterator<E> iterator = c.iterator(); iterator.hasNext(); ) {
+            E e = iterator.next();
             list.add(e);
+        }
         return list;
     }

@@ -3583,7 +3588,7 @@
     private static final long SECONDARY;
     static {
         try {
-            UNSAFE = sun.misc.Unsafe.getUnsafe();
+            UNSAFE = UnsafeHolder.getUnsafe();
             Class<?> k = ConcurrentSkipListMap.class;
             headOffset = UNSAFE.objectFieldOffset
                 (k.getDeclaredField("head"));
diff -r 57336c319de8 src/share/classes/java/util/concurrent/ConcurrentSkipListSet.java
--- a/src/share/classes/java/util/concurrent/ConcurrentSkipListSet.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/ConcurrentSkipListSet.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,18 +33,19 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent;
-import java.util.AbstractSet;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.Iterator;
-import java.util.Map;
-import java.util.NavigableMap;
-import java.util.NavigableSet;
-import java.util.Set;
-import java.util.SortedSet;
-import java.util.Spliterator;
+package org.jvnet.zephyr.jcl.java.util.concurrent;
+
+import org.jvnet.zephyr.jcl.impl.misc.UnsafeHolder;
+import org.jvnet.zephyr.jcl.java.util.AbstractSet;
+import org.jvnet.zephyr.jcl.java.util.Collection;
+import org.jvnet.zephyr.jcl.java.util.Collections;
+import org.jvnet.zephyr.jcl.java.util.Comparator;
+import org.jvnet.zephyr.jcl.java.util.Iterator;
+import org.jvnet.zephyr.jcl.java.util.Map;
+import org.jvnet.zephyr.jcl.java.util.NavigableSet;
+import org.jvnet.zephyr.jcl.java.util.Set;
+import org.jvnet.zephyr.jcl.java.util.SortedSet;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;

 /**
  * A scalable concurrent {@link NavigableSet} implementation based on
@@ -331,9 +332,11 @@
     public boolean removeAll(Collection<?> c) {
         // Override AbstractSet version to avoid unnecessary call to size()
         boolean modified = false;
-        for (Object e : c)
+        for (Iterator<?> iterator = c.iterator(); iterator.hasNext(); ) {
+            Object e = iterator.next();
             if (remove(e))
                 modified = true;
+        }
         return modified;
     }

@@ -490,7 +493,7 @@
      * should document the reporting of additional characteristic values.
      *
      * <p>The spliterator's comparator (see
-     * {@link java.util.Spliterator#getComparator()}) is {@code null} if
+     * {@link Spliterator#getComparator()}) is {@code null} if
      * the set's comparator (see {@link #comparator()}) is {@code null}.
      * Otherwise, the spliterator's comparator is the same as or imposes the
      * same total ordering as the set's comparator.
@@ -515,7 +518,7 @@
     private static final long mapOffset;
     static {
         try {
-            UNSAFE = sun.misc.Unsafe.getUnsafe();
+            UNSAFE = UnsafeHolder.getUnsafe();
             Class<?> k = ConcurrentSkipListSet.class;
             mapOffset = UNSAFE.objectFieldOffset
                 (k.getDeclaredField("m"));
diff -r 57336c319de8 src/share/classes/java/util/concurrent/CopyOnWriteArrayList.java
--- a/src/share/classes/java/util/concurrent/CopyOnWriteArrayList.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/CopyOnWriteArrayList.java	Fri Jul 31 15:50:29 2015 +0300
@@ -32,27 +32,31 @@
  * All rights reserved.
  */

-package java.util.concurrent;
-import java.util.AbstractList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Comparator;
+package org.jvnet.zephyr.jcl.java.util.concurrent;
+
+import org.jvnet.zephyr.jcl.impl.misc.UnsafeHolder;
+import org.jvnet.zephyr.jcl.java.util.AbstractList;
+import org.jvnet.zephyr.jcl.java.util.ArrayList;
+import org.jvnet.zephyr.jcl.java.util.Arrays;
+import org.jvnet.zephyr.jcl.java.util.Collection;
+import org.jvnet.zephyr.jcl.java.util.Comparator;
+import org.jvnet.zephyr.jcl.java.util.Iterator;
+import org.jvnet.zephyr.jcl.java.util.List;
+import org.jvnet.zephyr.jcl.java.util.ListIterator;
+import org.jvnet.zephyr.jcl.java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.Spliterators;
+import org.jvnet.zephyr.jcl.java.util.concurrent.locks.ReentrantLock;
+import org.jvnet.zephyr.jcl.java.util.function.Consumer;
+import org.jvnet.zephyr.jcl.java.util.function.Predicate;
+import org.jvnet.zephyr.jcl.java.util.function.UnaryOperator;
+
 import java.util.ConcurrentModificationException;
-import java.util.Iterator;
-import java.util.List;
-import java.util.ListIterator;
 import java.util.NoSuchElementException;
-import java.util.Objects;
 import java.util.RandomAccess;
-import java.util.Spliterator;
-import java.util.Spliterators;
-import java.util.concurrent.locks.ReentrantLock;
-import java.util.function.Consumer;
-import java.util.function.Predicate;
-import java.util.function.UnaryOperator;

 /**
- * A thread-safe variant of {@link java.util.ArrayList} in which all mutative
+ * A thread-safe variant of {@link ArrayList} in which all mutative
  * operations ({@code add}, {@code set}, and so on) are implemented by
  * making a fresh copy of the underlying array.
  *
@@ -655,7 +659,8 @@
     public boolean containsAll(Collection<?> c) {
         Object[] elements = getArray();
         int len = elements.length;
-        for (Object e : c) {
+        for (Iterator<?> iterator = c.iterator(); iterator.hasNext(); ) {
+            Object e = iterator.next();
             if (indexOf(e, elements, 0, len) < 0)
                 return false;
         }
@@ -1675,7 +1680,7 @@
     private static final long lockOffset;
     static {
         try {
-            UNSAFE = sun.misc.Unsafe.getUnsafe();
+            UNSAFE = UnsafeHolder.getUnsafe();
             Class<?> k = CopyOnWriteArrayList.class;
             lockOffset = UNSAFE.objectFieldOffset
                 (k.getDeclaredField("lock"));
diff -r 57336c319de8 src/share/classes/java/util/concurrent/CopyOnWriteArraySet.java
--- a/src/share/classes/java/util/concurrent/CopyOnWriteArraySet.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/CopyOnWriteArraySet.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,18 +33,19 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent;
-import java.util.Collection;
-import java.util.Set;
-import java.util.AbstractSet;
-import java.util.Iterator;
-import java.util.Spliterator;
-import java.util.Spliterators;
-import java.util.function.Predicate;
-import java.util.function.Consumer;
+package org.jvnet.zephyr.jcl.java.util.concurrent;
+
+import org.jvnet.zephyr.jcl.java.util.AbstractSet;
+import org.jvnet.zephyr.jcl.java.util.Collection;
+import org.jvnet.zephyr.jcl.java.util.Iterator;
+import org.jvnet.zephyr.jcl.java.util.Set;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.Spliterators;
+import org.jvnet.zephyr.jcl.java.util.function.Consumer;
+import org.jvnet.zephyr.jcl.java.util.function.Predicate;

 /**
- * A {@link java.util.Set} that uses an internal {@link CopyOnWriteArrayList}
+ * A {@link Set} that uses an internal {@link CopyOnWriteArrayList}
  * for all of its operations.  Thus, it shares the same basic properties:
  * <ul>
  *  <li>It is best suited for applications in which set sizes generally
diff -r 57336c319de8 src/share/classes/java/util/concurrent/CountDownLatch.java
--- a/src/share/classes/java/util/concurrent/CountDownLatch.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/CountDownLatch.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,8 +33,10 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent;
-import java.util.concurrent.locks.AbstractQueuedSynchronizer;
+package org.jvnet.zephyr.jcl.java.util.concurrent;
+
+import org.jvnet.zephyr.jcl.java.lang.Thread;
+import org.jvnet.zephyr.jcl.java.util.concurrent.locks.AbstractQueuedSynchronizer;

 /**
  * A synchronization aid that allows one or more threads to wait until
diff -r 57336c319de8 src/share/classes/java/util/concurrent/CyclicBarrier.java
--- a/src/share/classes/java/util/concurrent/CyclicBarrier.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/CyclicBarrier.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,9 +33,14 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent;
-import java.util.concurrent.locks.Condition;
-import java.util.concurrent.locks.ReentrantLock;
+package org.jvnet.zephyr.jcl.java.util.concurrent;
+
+import org.jvnet.zephyr.jcl.java.lang.Thread;
+import org.jvnet.zephyr.jcl.java.util.concurrent.locks.Condition;
+import org.jvnet.zephyr.jcl.java.util.concurrent.locks.ReentrantLock;
+
+import java.util.concurrent.BrokenBarrierException;
+import java.util.concurrent.TimeoutException;

 /**
  * A synchronization aid that allows a set of threads to all wait for
diff -r 57336c319de8 src/share/classes/java/util/concurrent/DelayQueue.java
--- a/src/share/classes/java/util/concurrent/DelayQueue.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/DelayQueue.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,11 +33,19 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent;
-import static java.util.concurrent.TimeUnit.NANOSECONDS;
-import java.util.concurrent.locks.Condition;
-import java.util.concurrent.locks.ReentrantLock;
-import java.util.*;
+package org.jvnet.zephyr.jcl.java.util.concurrent;
+
+import org.jvnet.zephyr.jcl.java.lang.Thread;
+import org.jvnet.zephyr.jcl.java.util.AbstractQueue;
+import org.jvnet.zephyr.jcl.java.util.Collection;
+import org.jvnet.zephyr.jcl.java.util.Iterator;
+import org.jvnet.zephyr.jcl.java.util.PriorityQueue;
+import org.jvnet.zephyr.jcl.java.util.concurrent.locks.Condition;
+import org.jvnet.zephyr.jcl.java.util.concurrent.locks.ReentrantLock;
+
+import java.util.NoSuchElementException;
+
+import static org.jvnet.zephyr.jcl.java.util.concurrent.TimeUnit.NANOSECONDS;

 /**
  * An unbounded {@linkplain BlockingQueue blocking queue} of
diff -r 57336c319de8 src/share/classes/java/util/concurrent/Delayed.java
--- a/src/share/classes/java/util/concurrent/Delayed.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/Delayed.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,7 +33,7 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent;
+package org.jvnet.zephyr.jcl.java.util.concurrent;

 /**
  * A mix-in style interface for marking objects that should be
diff -r 57336c319de8 src/share/classes/java/util/concurrent/Exchanger.java
--- a/src/share/classes/java/util/concurrent/Exchanger.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/Exchanger.java	Fri Jul 31 15:50:29 2015 +0300
@@ -34,10 +34,13 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent;
-import java.util.concurrent.atomic.AtomicInteger;
-import java.util.concurrent.atomic.AtomicReference;
-import java.util.concurrent.locks.LockSupport;
+package org.jvnet.zephyr.jcl.java.util.concurrent;
+
+import org.jvnet.zephyr.jcl.impl.misc.UnsafeHolder;
+import org.jvnet.zephyr.jcl.java.lang.Thread;
+import org.jvnet.zephyr.jcl.java.lang.ThreadLocal;
+
+import java.util.concurrent.TimeoutException;

 /**
  * A synchronization point at which threads can pair and swap elements
@@ -388,7 +391,7 @@
                         else if (spins > 0) {
                             h ^= h << 1; h ^= h >>> 3; h ^= h << 10; // xorshift
                             if (h == 0)                // initialize hash
-                                h = SPINS | (int)t.getId();
+                                h = SPINS | (int)getThreadId(t);
                             else if (h < 0 &&          // approx 50% true
                                      (--spins & ((SPINS >>> 1) - 1)) == 0)
                                 Thread.yield();        // two yields per wait
@@ -491,7 +494,7 @@
             if (spins > 0) {
                 h ^= h << 1; h ^= h >>> 3; h ^= h << 10;
                 if (h == 0)
-                    h = SPINS | (int)t.getId();
+                    h = SPINS | (int)getThreadId(t);
                 else if (h < 0 && (--spins & ((SPINS >>> 1) - 1)) == 0)
                     Thread.yield();
             }
@@ -627,6 +630,10 @@
         return (v == NULL_ITEM) ? null : (V)v;
     }

+    private static long getThreadId(Thread thread) {
+        return U.getLongVolatile(thread, TID_OFFSET);
+    }
+
     // Unsafe mechanics
     private static final sun.misc.Unsafe U;
     private static final long BOUND;
@@ -634,10 +641,11 @@
     private static final long MATCH;
     private static final long BLOCKER;
     private static final int ABASE;
+    private static final long TID_OFFSET;
     static {
         int s;
         try {
-            U = sun.misc.Unsafe.getUnsafe();
+            U = UnsafeHolder.getUnsafe();
             Class<?> ek = Exchanger.class;
             Class<?> nk = Node.class;
             Class<?> ak = Node[].class;
@@ -653,6 +661,7 @@
             s = U.arrayIndexScale(ak);
             // ABASE absorbs padding in front of element 0
             ABASE = U.arrayBaseOffset(ak) + (1 << ASHIFT);
+            TID_OFFSET = U.objectFieldOffset(tk.getDeclaredField("tid"));

         } catch (Exception e) {
             throw new Error(e);
diff -r 57336c319de8 src/share/classes/java/util/concurrent/Future.java
--- a/src/share/classes/java/util/concurrent/Future.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/Future.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,7 +33,12 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent;
+package org.jvnet.zephyr.jcl.java.util.concurrent;
+
+import java.util.concurrent.CancellationException;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Executor;
+import java.util.concurrent.TimeoutException;

 /**
  * A {@code Future} represents the result of an asynchronous
diff -r 57336c319de8 src/share/classes/java/util/concurrent/FutureTask.java
--- a/src/share/classes/java/util/concurrent/FutureTask.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/FutureTask.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,8 +33,18 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent;
-import java.util.concurrent.locks.LockSupport;
+package org.jvnet.zephyr.jcl.java.util.concurrent;
+
+import org.jvnet.zephyr.jcl.impl.misc.UnsafeHolder;
+import org.jvnet.zephyr.jcl.java.lang.Thread;
+import org.jvnet.zephyr.jcl.java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.concurrent.locks.LockSupport;
+
+import java.util.concurrent.Callable;
+import java.util.concurrent.CancellationException;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Executor;
+import java.util.concurrent.TimeoutException;

 /**
  * A cancellable asynchronous computation.  This class provides a base
@@ -149,7 +159,8 @@
      * @throws NullPointerException if the runnable is null
      */
     public FutureTask(Runnable runnable, V result) {
-        this.callable = Executors.callable(runnable, result);
+        Objects.requireNonNull(runnable);
+        this.callable = new RunnableAdapter<V>(runnable, result);
         this.state = NEW;       // ensure visibility of callable
     }

@@ -470,7 +481,7 @@
     private static final long waitersOffset;
     static {
         try {
-            UNSAFE = sun.misc.Unsafe.getUnsafe();
+            UNSAFE = UnsafeHolder.getUnsafe();
             Class<?> k = FutureTask.class;
             stateOffset = UNSAFE.objectFieldOffset
                 (k.getDeclaredField("state"));
@@ -483,4 +494,20 @@
         }
     }

+    private static final class RunnableAdapter<T> implements Callable<T> {
+
+        private final Runnable task;
+        private final T result;
+
+        RunnableAdapter(Runnable task, T result) {
+            this.task = task;
+            this.result = result;
+        }
+
+        @Override
+        public T call() {
+            task.run();
+            return result;
+        }
+    }
 }
diff -r 57336c319de8 src/share/classes/java/util/concurrent/LinkedBlockingDeque.java
--- a/src/share/classes/java/util/concurrent/LinkedBlockingDeque.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/LinkedBlockingDeque.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,17 +33,18 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent;
+package org.jvnet.zephyr.jcl.java.util.concurrent;

-import java.util.AbstractQueue;
-import java.util.Collection;
-import java.util.Iterator;
+import org.jvnet.zephyr.jcl.java.util.AbstractQueue;
+import org.jvnet.zephyr.jcl.java.util.Collection;
+import org.jvnet.zephyr.jcl.java.util.Iterator;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.Spliterators;
+import org.jvnet.zephyr.jcl.java.util.concurrent.locks.Condition;
+import org.jvnet.zephyr.jcl.java.util.concurrent.locks.ReentrantLock;
+import org.jvnet.zephyr.jcl.java.util.function.Consumer;
+
 import java.util.NoSuchElementException;
-import java.util.concurrent.locks.Condition;
-import java.util.concurrent.locks.ReentrantLock;
-import java.util.Spliterator;
-import java.util.Spliterators;
-import java.util.function.Consumer;

 /**
  * An optionally-bounded {@linkplain BlockingDeque blocking deque} based on
@@ -197,7 +198,8 @@
         final ReentrantLock lock = this.lock;
         lock.lock(); // Never contended, but necessary for visibility
         try {
-            for (E e : c) {
+            for (Iterator<? extends E> iterator = c.iterator(); iterator.hasNext(); ) {
+                E e = iterator.next();
                 if (e == null)
                     throw new NullPointerException();
                 if (!linkLast(new Node<E>(e)))
diff -r 57336c319de8 src/share/classes/java/util/concurrent/LinkedBlockingQueue.java
--- a/src/share/classes/java/util/concurrent/LinkedBlockingQueue.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/LinkedBlockingQueue.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,18 +33,19 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent;
+package org.jvnet.zephyr.jcl.java.util.concurrent;

-import java.util.concurrent.atomic.AtomicInteger;
-import java.util.concurrent.locks.Condition;
-import java.util.concurrent.locks.ReentrantLock;
-import java.util.AbstractQueue;
-import java.util.Collection;
-import java.util.Iterator;
+import org.jvnet.zephyr.jcl.java.util.AbstractQueue;
+import org.jvnet.zephyr.jcl.java.util.Collection;
+import org.jvnet.zephyr.jcl.java.util.Iterator;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.Spliterators;
+import org.jvnet.zephyr.jcl.java.util.concurrent.atomic.AtomicInteger;
+import org.jvnet.zephyr.jcl.java.util.concurrent.locks.Condition;
+import org.jvnet.zephyr.jcl.java.util.concurrent.locks.ReentrantLock;
+import org.jvnet.zephyr.jcl.java.util.function.Consumer;
+
 import java.util.NoSuchElementException;
-import java.util.Spliterator;
-import java.util.Spliterators;
-import java.util.function.Consumer;

 /**
  * An optionally-bounded {@linkplain BlockingQueue blocking queue} based on
@@ -279,7 +280,8 @@
         putLock.lock(); // Never contended, but necessary for visibility
         try {
             int n = 0;
-            for (E e : c) {
+            for (Iterator<? extends E> iterator = c.iterator(); iterator.hasNext(); ) {
+                E e = iterator.next();
                 if (e == null)
                     throw new NullPointerException();
                 if (n == capacity)
diff -r 57336c319de8 src/share/classes/java/util/concurrent/LinkedTransferQueue.java
--- a/src/share/classes/java/util/concurrent/LinkedTransferQueue.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/LinkedTransferQueue.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,18 +33,20 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent;
+package org.jvnet.zephyr.jcl.java.util.concurrent;

-import java.util.AbstractQueue;
-import java.util.Collection;
-import java.util.Iterator;
+import org.jvnet.zephyr.jcl.impl.misc.UnsafeHolder;
+import org.jvnet.zephyr.jcl.java.lang.Thread;
+import org.jvnet.zephyr.jcl.java.util.AbstractQueue;
+import org.jvnet.zephyr.jcl.java.util.Collection;
+import org.jvnet.zephyr.jcl.java.util.Iterator;
+import org.jvnet.zephyr.jcl.java.util.Queue;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.Spliterators;
+import org.jvnet.zephyr.jcl.java.util.concurrent.locks.LockSupport;
+import org.jvnet.zephyr.jcl.java.util.function.Consumer;
+
 import java.util.NoSuchElementException;
-import java.util.Queue;
-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.locks.LockSupport;
-import java.util.Spliterator;
-import java.util.Spliterators;
-import java.util.function.Consumer;

 /**
  * An unbounded {@link TransferQueue} based on linked nodes.
@@ -544,7 +546,7 @@
         private static final long waiterOffset;
         static {
             try {
-                UNSAFE = sun.misc.Unsafe.getUnsafe();
+                UNSAFE = UnsafeHolder.getUnsafe();
                 Class<?> k = Node.class;
                 itemOffset = UNSAFE.objectFieldOffset
                     (k.getDeclaredField("item"));
@@ -1172,7 +1174,7 @@
      * return {@code false}.
      *
      * @return {@code true} (as specified by
-     *  {@link java.util.concurrent.BlockingQueue#offer(Object,long,TimeUnit)
+     *  {@link BlockingQueue#offer(Object,long,TimeUnit)
      *  BlockingQueue.offer})
      * @throws NullPointerException if the specified element is null
      */
@@ -1410,7 +1412,7 @@
      * {@code LinkedTransferQueue} is not capacity constrained.
      *
      * @return {@code Integer.MAX_VALUE} (as specified by
-     *         {@link java.util.concurrent.BlockingQueue#remainingCapacity()
+     *         {@link BlockingQueue#remainingCapacity()
      *         BlockingQueue.remainingCapacity})
      */
     public int remainingCapacity() {
@@ -1428,8 +1430,10 @@
     private void writeObject(java.io.ObjectOutputStream s)
         throws java.io.IOException {
         s.defaultWriteObject();
-        for (E e : this)
+        for (Iterator<E> iterator = this.iterator(); iterator.hasNext(); ) {
+            E e = iterator.next();
             s.writeObject(e);
+        }
         // Use trailing null as sentinel
         s.writeObject(null);
     }
@@ -1462,7 +1466,7 @@
     private static final long sweepVotesOffset;
     static {
         try {
-            UNSAFE = sun.misc.Unsafe.getUnsafe();
+            UNSAFE = UnsafeHolder.getUnsafe();
             Class<?> k = LinkedTransferQueue.class;
             headOffset = UNSAFE.objectFieldOffset
                 (k.getDeclaredField("head"));
diff -r 57336c319de8 src/share/classes/java/util/concurrent/PriorityBlockingQueue.java
--- a/src/share/classes/java/util/concurrent/PriorityBlockingQueue.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/PriorityBlockingQueue.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,21 +33,24 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent;
+package org.jvnet.zephyr.jcl.java.util.concurrent;

-import java.util.concurrent.locks.Condition;
-import java.util.concurrent.locks.ReentrantLock;
-import java.util.AbstractQueue;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Comparator;
-import java.util.Iterator;
+import org.jvnet.zephyr.jcl.impl.misc.UnsafeHolder;
+import org.jvnet.zephyr.jcl.java.lang.Thread;
+import org.jvnet.zephyr.jcl.java.util.AbstractQueue;
+import org.jvnet.zephyr.jcl.java.util.Arrays;
+import org.jvnet.zephyr.jcl.java.util.Collection;
+import org.jvnet.zephyr.jcl.java.util.Comparator;
+import org.jvnet.zephyr.jcl.java.util.Iterator;
+import org.jvnet.zephyr.jcl.java.util.PriorityQueue;
+import org.jvnet.zephyr.jcl.java.util.Queue;
+import org.jvnet.zephyr.jcl.java.util.SortedSet;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.concurrent.locks.Condition;
+import org.jvnet.zephyr.jcl.java.util.concurrent.locks.ReentrantLock;
+import org.jvnet.zephyr.jcl.java.util.function.Consumer;
+
 import java.util.NoSuchElementException;
-import java.util.PriorityQueue;
-import java.util.Queue;
-import java.util.SortedSet;
-import java.util.Spliterator;
-import java.util.function.Consumer;

 /**
  * An unbounded {@linkplain BlockingQueue blocking queue} that uses
@@ -119,7 +122,7 @@
      * postponement of waiting consumers and consequent element
      * build-up. The need to back away from lock during allocation
      * makes it impossible to simply wrap delegated
-     * java.util.PriorityQueue operations within a lock, as was done
+     * org.jvnet.zephyr.jcl.java.util.PriorityQueue operations within a lock, as was done
      * in a previous version of this class. To maintain
      * interoperability, a plain PriorityQueue is still used during
      * serialization, which maintains compatibility at the expense of
@@ -909,7 +912,7 @@
      * Saves this queue to a stream (that is, serializes it).
      *
      * For compatibility with previous version of this class, elements
-     * are first copied to a java.util.PriorityQueue, which is then
+     * are first copied to a org.jvnet.zephyr.jcl.java.util.PriorityQueue, which is then
      * serialized.
      *
      * @param s the stream
@@ -1032,7 +1035,7 @@
     private static final long allocationSpinLockOffset;
     static {
         try {
-            UNSAFE = sun.misc.Unsafe.getUnsafe();
+            UNSAFE = UnsafeHolder.getUnsafe();
             Class<?> k = PriorityBlockingQueue.class;
             allocationSpinLockOffset = UNSAFE.objectFieldOffset
                 (k.getDeclaredField("allocationSpinLock"));
diff -r 57336c319de8 src/share/classes/java/util/concurrent/RunnableFuture.java
--- a/src/share/classes/java/util/concurrent/RunnableFuture.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/RunnableFuture.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,7 +33,9 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent;
+package org.jvnet.zephyr.jcl.java.util.concurrent;
+
+import java.util.concurrent.Executor;

 /**
  * A {@link Future} that is {@link Runnable}. Successful execution of
diff -r 57336c319de8 src/share/classes/java/util/concurrent/Semaphore.java
--- a/src/share/classes/java/util/concurrent/Semaphore.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/Semaphore.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,9 +33,12 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent;
-import java.util.Collection;
-import java.util.concurrent.locks.AbstractQueuedSynchronizer;
+package org.jvnet.zephyr.jcl.java.util.concurrent;
+
+import org.jvnet.zephyr.jcl.java.lang.Thread;
+import org.jvnet.zephyr.jcl.java.util.Collection;
+import org.jvnet.zephyr.jcl.java.util.concurrent.locks.AbstractQueuedSynchronizer;
+import org.jvnet.zephyr.jcl.java.util.concurrent.locks.Lock;

 /**
  * A counting semaphore.  Conceptually, a semaphore maintains a set of
@@ -108,7 +111,7 @@
  * exclusion lock.  This is more commonly known as a <em>binary
  * semaphore</em>, because it only has two states: one permit
  * available, or zero permits available.  When used in this way, the
- * binary semaphore has the property (unlike many {@link java.util.concurrent.locks.Lock}
+ * binary semaphore has the property (unlike many {@link Lock}
  * implementations), that the &quot;lock&quot; can be released by a
  * thread other than the owner (as semaphores have no notion of
  * ownership).  This can be useful in some specialized contexts, such
diff -r 57336c319de8 src/share/classes/java/util/concurrent/SynchronousQueue.java
--- a/src/share/classes/java/util/concurrent/SynchronousQueue.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/SynchronousQueue.java	Fri Jul 31 15:50:29 2015 +0300
@@ -34,12 +34,18 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent;
-import java.util.concurrent.locks.LockSupport;
-import java.util.concurrent.locks.ReentrantLock;
-import java.util.*;
-import java.util.Spliterator;
-import java.util.Spliterators;
+package org.jvnet.zephyr.jcl.java.util.concurrent;
+
+import org.jvnet.zephyr.jcl.impl.misc.UnsafeHolder;
+import org.jvnet.zephyr.jcl.java.lang.Thread;
+import org.jvnet.zephyr.jcl.java.util.AbstractQueue;
+import org.jvnet.zephyr.jcl.java.util.Collection;
+import org.jvnet.zephyr.jcl.java.util.Collections;
+import org.jvnet.zephyr.jcl.java.util.Iterator;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.Spliterators;
+import org.jvnet.zephyr.jcl.java.util.concurrent.locks.LockSupport;
+import org.jvnet.zephyr.jcl.java.util.concurrent.locks.ReentrantLock;

 /**
  * A {@linkplain BlockingQueue blocking queue} in which each insert
@@ -287,7 +293,7 @@

             static {
                 try {
-                    UNSAFE = sun.misc.Unsafe.getUnsafe();
+                    UNSAFE = UnsafeHolder.getUnsafe();
                     Class<?> k = SNode.class;
                     matchOffset = UNSAFE.objectFieldOffset
                         (k.getDeclaredField("match"));
@@ -512,7 +518,7 @@
         private static final long headOffset;
         static {
             try {
-                UNSAFE = sun.misc.Unsafe.getUnsafe();
+                UNSAFE = UnsafeHolder.getUnsafe();
                 Class<?> k = TransferStack.class;
                 headOffset = UNSAFE.objectFieldOffset
                     (k.getDeclaredField("head"));
@@ -582,7 +588,7 @@

             static {
                 try {
-                    UNSAFE = sun.misc.Unsafe.getUnsafe();
+                    UNSAFE = UnsafeHolder.getUnsafe();
                     Class<?> k = QNode.class;
                     itemOffset = UNSAFE.objectFieldOffset
                         (k.getDeclaredField("item"));
@@ -825,7 +831,7 @@
         private static final long cleanMeOffset;
         static {
             try {
-                UNSAFE = sun.misc.Unsafe.getUnsafe();
+                UNSAFE = UnsafeHolder.getUnsafe();
                 Class<?> k = TransferQueue.class;
                 headOffset = UNSAFE.objectFieldOffset
                     (k.getDeclaredField("head"));
@@ -1070,7 +1076,7 @@

     /**
      * Returns an empty spliterator in which calls to
-     * {@link java.util.Spliterator#trySplit()} always return {@code null}.
+     * {@link Spliterator#trySplit()} always return {@code null}.
      *
      * @return an empty spliterator
      * @since 1.8
diff -r 57336c319de8 src/share/classes/java/util/concurrent/ThreadLocalRandom.java
--- a/src/share/classes/java/util/concurrent/ThreadLocalRandom.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/ThreadLocalRandom.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,24 +33,29 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent;
+package org.jvnet.zephyr.jcl.java.util.concurrent;
+
+import org.jvnet.zephyr.jcl.impl.misc.UnsafeHolder;
+import org.jvnet.zephyr.jcl.java.lang.Thread;
+import org.jvnet.zephyr.jcl.java.lang.ThreadLocal;
+import org.jvnet.zephyr.jcl.java.util.Random;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.concurrent.atomic.AtomicInteger;
+import org.jvnet.zephyr.jcl.java.util.concurrent.atomic.AtomicLong;
+import org.jvnet.zephyr.jcl.java.util.function.DoubleConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.IntConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.LongConsumer;
+import org.jvnet.zephyr.jcl.java.util.stream.DoubleStream;
+import org.jvnet.zephyr.jcl.java.util.stream.IntStream;
+import org.jvnet.zephyr.jcl.java.util.stream.LongStream;
+import org.jvnet.zephyr.jcl.java.util.stream.StreamSupport;

 import java.io.ObjectStreamField;
-import java.util.Random;
-import java.util.Spliterator;
-import java.util.concurrent.atomic.AtomicInteger;
-import java.util.concurrent.atomic.AtomicLong;
-import java.util.function.DoubleConsumer;
-import java.util.function.IntConsumer;
-import java.util.function.LongConsumer;
-import java.util.stream.DoubleStream;
-import java.util.stream.IntStream;
-import java.util.stream.LongStream;
-import java.util.stream.StreamSupport;
+import java.util.concurrent.ForkJoinTask;

 /**
  * A random number generator isolated to the current thread.  Like the
- * global {@link java.util.Random} generator used by the {@link
+ * global {@link Random} generator used by the {@link
  * java.lang.Math} class, a {@code ThreadLocalRandom} is initialized
  * with an internally generated seed that may not otherwise be
  * modified. When applicable, use of {@code ThreadLocalRandom} rather
@@ -81,7 +86,7 @@
  */
 public class ThreadLocalRandom extends Random {
     /*
-     * This class implements the java.util.Random API (and subclasses
+     * This class implements the org.jvnet.zephyr.jcl.java.util.Random API (and subclasses
      * Random) using a single static instance that accesses random
      * number state held in class Thread (primarily, field
      * threadLocalRandomSeed). In doing so, it also provides a home
@@ -97,8 +102,8 @@
      * application-level overhead and footprint of most concurrent
      * programs.
      *
-     * Even though this class subclasses java.util.Random, it uses the
-     * same basic algorithm as java.util.SplittableRandom.  (See its
+     * Even though this class subclasses org.jvnet.zephyr.jcl.java.util.Random, it uses the
+     * same basic algorithm as org.jvnet.zephyr.jcl.java.util.SplittableRandom.  (See its
      * internal documentation for explanations, which are not repeated
      * here.)  Because ThreadLocalRandoms are not splittable
      * though, we use only a single 64bit gamma.
@@ -1057,7 +1062,7 @@
     private static final long SECONDARY;
     static {
         try {
-            UNSAFE = sun.misc.Unsafe.getUnsafe();
+            UNSAFE = UnsafeHolder.getUnsafe();
             Class<?> tk = Thread.class;
             SEED = UNSAFE.objectFieldOffset
                 (tk.getDeclaredField("threadLocalRandomSeed"));
diff -r 57336c319de8 src/share/classes/java/util/concurrent/TimeUnit.java
--- a/src/share/classes/java/util/concurrent/TimeUnit.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/TimeUnit.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,7 +33,10 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent;
+package org.jvnet.zephyr.jcl.java.util.concurrent;
+
+import org.jvnet.zephyr.jcl.java.lang.Thread;
+import org.jvnet.zephyr.jcl.java.util.concurrent.locks.Lock;

 /**
  * A {@code TimeUnit} represents time durations at a given unit of
@@ -50,7 +53,7 @@
  * <p>A {@code TimeUnit} is mainly used to inform time-based methods
  * how a given timing parameter should be interpreted. For example,
  * the following code will timeout in 50 milliseconds if the {@link
- * java.util.concurrent.locks.Lock lock} is not available:
+ * Lock lock} is not available:
  *
  *  <pre> {@code
  * Lock lock = ...;
diff -r 57336c319de8 src/share/classes/java/util/concurrent/TransferQueue.java
--- a/src/share/classes/java/util/concurrent/TransferQueue.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/TransferQueue.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,7 +33,7 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent;
+package org.jvnet.zephyr.jcl.java.util.concurrent;

 /**
  * A {@link BlockingQueue} in which producers may wait for consumers
diff -r 57336c319de8 src/share/classes/java/util/concurrent/atomic/AtomicInteger.java
--- a/src/share/classes/java/util/concurrent/atomic/AtomicInteger.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/atomic/AtomicInteger.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,14 +33,17 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent.atomic;
-import java.util.function.IntUnaryOperator;
+package org.jvnet.zephyr.jcl.java.util.concurrent.atomic;
+
+import org.jvnet.zephyr.jcl.impl.misc.UnsafeHolder;
+import org.jvnet.zephyr.jcl.java.util.function.IntUnaryOperator;
+import sun.misc.Unsafe;
+
 import java.util.function.IntBinaryOperator;
-import sun.misc.Unsafe;

 /**
  * An {@code int} value that may be updated atomically.  See the
- * {@link java.util.concurrent.atomic} package specification for
+ * {@link org.jvnet.zephyr.jcl.java.util.concurrent.atomic} package specification for
  * description of the properties of atomic variables. An
  * {@code AtomicInteger} is used in applications such as atomically
  * incremented counters, and cannot be used as a replacement for an
@@ -55,7 +58,7 @@
     private static final long serialVersionUID = 6214790243416807050L;

     // setup to use Unsafe.compareAndSwapInt for updates
-    private static final Unsafe unsafe = Unsafe.getUnsafe();
+    private static final Unsafe unsafe = UnsafeHolder.getUnsafe();
     private static final long valueOffset;

     static {
diff -r 57336c319de8 src/share/classes/java/util/concurrent/atomic/AtomicIntegerArray.java
--- a/src/share/classes/java/util/concurrent/atomic/AtomicIntegerArray.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/atomic/AtomicIntegerArray.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,14 +33,17 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent.atomic;
-import java.util.function.IntUnaryOperator;
+package org.jvnet.zephyr.jcl.java.util.concurrent.atomic;
+
+import org.jvnet.zephyr.jcl.impl.misc.UnsafeHolder;
+import org.jvnet.zephyr.jcl.java.util.function.IntUnaryOperator;
+import sun.misc.Unsafe;
+
 import java.util.function.IntBinaryOperator;
-import sun.misc.Unsafe;

 /**
  * An {@code int} array in which elements may be updated atomically.
- * See the {@link java.util.concurrent.atomic} package
+ * See the {@link org.jvnet.zephyr.jcl.java.util.concurrent.atomic} package
  * specification for description of the properties of atomic
  * variables.
  * @since 1.5
@@ -49,7 +52,7 @@
 public class AtomicIntegerArray implements java.io.Serializable {
     private static final long serialVersionUID = 2862133569453604235L;

-    private static final Unsafe unsafe = Unsafe.getUnsafe();
+    private static final Unsafe unsafe = UnsafeHolder.getUnsafe();
     private static final int base = unsafe.arrayBaseOffset(int[].class);
     private static final int shift;
     private final int[] array;
diff -r 57336c319de8 src/share/classes/java/util/concurrent/atomic/AtomicIntegerFieldUpdater.java
--- a/src/share/classes/java/util/concurrent/atomic/AtomicIntegerFieldUpdater.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/atomic/AtomicIntegerFieldUpdater.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,17 +33,19 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent.atomic;
-import java.util.function.IntUnaryOperator;
-import java.util.function.IntBinaryOperator;
+package org.jvnet.zephyr.jcl.java.util.concurrent.atomic;
+
+import org.jvnet.zephyr.jcl.impl.misc.ReflectionUtils;
+import org.jvnet.zephyr.jcl.impl.misc.UnsafeHolder;
+import org.jvnet.zephyr.jcl.java.util.function.IntUnaryOperator;
 import sun.misc.Unsafe;
+
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
 import java.security.AccessController;
+import java.security.PrivilegedActionException;
 import java.security.PrivilegedExceptionAction;
-import java.security.PrivilegedActionException;
-import sun.reflect.CallerSensitive;
-import sun.reflect.Reflection;
+import java.util.function.IntBinaryOperator;

 /**
  * A reflection-based utility that enables atomic updates to
@@ -80,11 +82,10 @@
      * or the field is inaccessible to the caller according to Java language
      * access control
      */
-    @CallerSensitive
     public static <U> AtomicIntegerFieldUpdater<U> newUpdater(Class<U> tclass,
                                                               String fieldName) {
         return new AtomicIntegerFieldUpdaterImpl<U>
-            (tclass, fieldName, Reflection.getCallerClass());
+            (tclass, fieldName, ReflectionUtils.getClassContext()[3]);
     }

     /**
@@ -367,7 +368,7 @@
      */
     private static class AtomicIntegerFieldUpdaterImpl<T>
             extends AtomicIntegerFieldUpdater<T> {
-        private static final Unsafe unsafe = Unsafe.getUnsafe();
+        private static final Unsafe unsafe = UnsafeHolder.getUnsafe();
         private final long offset;
         private final Class<T> tclass;
         private final Class<?> cclass;
diff -r 57336c319de8 src/share/classes/java/util/concurrent/atomic/AtomicLong.java
--- a/src/share/classes/java/util/concurrent/atomic/AtomicLong.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/atomic/AtomicLong.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,14 +33,18 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent.atomic;
-import java.util.function.LongUnaryOperator;
+package org.jvnet.zephyr.jcl.java.util.concurrent.atomic;
+
+import org.jvnet.zephyr.jcl.impl.misc.UnsafeHolder;
+import org.jvnet.zephyr.jcl.java.util.function.LongUnaryOperator;
+import sun.misc.Unsafe;
+
+import java.lang.reflect.Field;
 import java.util.function.LongBinaryOperator;
-import sun.misc.Unsafe;

 /**
  * A {@code long} value that may be updated atomically.  See the
- * {@link java.util.concurrent.atomic} package specification for
+ * {@link org.jvnet.zephyr.jcl.java.util.concurrent.atomic} package specification for
  * description of the properties of atomic variables. An
  * {@code AtomicLong} is used in applications such as atomically
  * incremented sequence numbers, and cannot be used as a replacement
@@ -55,7 +59,7 @@
     private static final long serialVersionUID = 1927816293512124184L;

     // setup to use Unsafe.compareAndSwapLong for updates
-    private static final Unsafe unsafe = Unsafe.getUnsafe();
+    private static final Unsafe unsafe = UnsafeHolder.getUnsafe();
     private static final long valueOffset;

     /**
@@ -64,13 +68,17 @@
      * method works in either case, some constructions should be
      * handled at Java level to avoid locking user-visible locks.
      */
-    static final boolean VM_SUPPORTS_LONG_CAS = VMSupportsCS8();
+    static final boolean VM_SUPPORTS_LONG_CAS;

-    /**
-     * Returns whether underlying JVM supports lockless CompareAndSet
-     * for longs. Called only once and cached in VM_SUPPORTS_LONG_CAS.
-     */
-    private static native boolean VMSupportsCS8();
+    static {
+        try {
+            Field field = java.util.concurrent.atomic.AtomicLong.class.getDeclaredField("VM_SUPPORTS_LONG_CAS");
+            field.setAccessible(true);
+            VM_SUPPORTS_LONG_CAS = field.getBoolean(null);
+        } catch (Exception e) {
+            throw new Error(e);
+        }
+    }

     static {
         try {
diff -r 57336c319de8 src/share/classes/java/util/concurrent/atomic/AtomicLongArray.java
--- a/src/share/classes/java/util/concurrent/atomic/AtomicLongArray.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/atomic/AtomicLongArray.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,14 +33,17 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent.atomic;
-import java.util.function.LongUnaryOperator;
+package org.jvnet.zephyr.jcl.java.util.concurrent.atomic;
+
+import org.jvnet.zephyr.jcl.impl.misc.UnsafeHolder;
+import org.jvnet.zephyr.jcl.java.util.function.LongUnaryOperator;
+import sun.misc.Unsafe;
+
 import java.util.function.LongBinaryOperator;
-import sun.misc.Unsafe;

 /**
  * A {@code long} array in which elements may be updated atomically.
- * See the {@link java.util.concurrent.atomic} package specification
+ * See the {@link org.jvnet.zephyr.jcl.java.util.concurrent.atomic} package specification
  * for description of the properties of atomic variables.
  * @since 1.5
  * @author Doug Lea
@@ -48,7 +51,7 @@
 public class AtomicLongArray implements java.io.Serializable {
     private static final long serialVersionUID = -2308431214976778248L;

-    private static final Unsafe unsafe = Unsafe.getUnsafe();
+    private static final Unsafe unsafe = UnsafeHolder.getUnsafe();
     private static final int base = unsafe.arrayBaseOffset(long[].class);
     private static final int shift;
     private final long[] array;
diff -r 57336c319de8 src/share/classes/java/util/concurrent/atomic/AtomicLongFieldUpdater.java
--- a/src/share/classes/java/util/concurrent/atomic/AtomicLongFieldUpdater.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/atomic/AtomicLongFieldUpdater.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,17 +33,19 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent.atomic;
-import java.util.function.LongUnaryOperator;
-import java.util.function.LongBinaryOperator;
+package org.jvnet.zephyr.jcl.java.util.concurrent.atomic;
+
+import org.jvnet.zephyr.jcl.impl.misc.ReflectionUtils;
+import org.jvnet.zephyr.jcl.impl.misc.UnsafeHolder;
+import org.jvnet.zephyr.jcl.java.util.function.LongUnaryOperator;
 import sun.misc.Unsafe;
+
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
 import java.security.AccessController;
+import java.security.PrivilegedActionException;
 import java.security.PrivilegedExceptionAction;
-import java.security.PrivilegedActionException;
-import sun.reflect.CallerSensitive;
-import sun.reflect.Reflection;
+import java.util.function.LongBinaryOperator;

 /**
  * A reflection-based utility that enables atomic updates to
@@ -80,10 +82,9 @@
      * or the field is inaccessible to the caller according to Java language
      * access control
      */
-    @CallerSensitive
     public static <U> AtomicLongFieldUpdater<U> newUpdater(Class<U> tclass,
                                                            String fieldName) {
-        Class<?> caller = Reflection.getCallerClass();
+        Class<?> caller = ReflectionUtils.getClassContext()[3];
         if (AtomicLong.VM_SUPPORTS_LONG_CAS)
             return new CASUpdater<U>(tclass, fieldName, caller);
         else
@@ -366,7 +367,7 @@
     }

     private static class CASUpdater<T> extends AtomicLongFieldUpdater<T> {
-        private static final Unsafe unsafe = Unsafe.getUnsafe();
+        private static final Unsafe unsafe = UnsafeHolder.getUnsafe();
         private final long offset;
         private final Class<T> tclass;
         private final Class<?> cclass;
@@ -490,7 +491,7 @@


     private static class LockedUpdater<T> extends AtomicLongFieldUpdater<T> {
-        private static final Unsafe unsafe = Unsafe.getUnsafe();
+        private static final Unsafe unsafe = UnsafeHolder.getUnsafe();
         private final long offset;
         private final Class<T> tclass;
         private final Class<?> cclass;
diff -r 57336c319de8 src/share/classes/java/util/concurrent/atomic/AtomicReference.java
--- a/src/share/classes/java/util/concurrent/atomic/AtomicReference.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/atomic/AtomicReference.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,14 +33,16 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent.atomic;
-import java.util.function.UnaryOperator;
-import java.util.function.BinaryOperator;
+package org.jvnet.zephyr.jcl.java.util.concurrent.atomic;
+
+import org.jvnet.zephyr.jcl.impl.misc.UnsafeHolder;
+import org.jvnet.zephyr.jcl.java.util.function.BinaryOperator;
+import org.jvnet.zephyr.jcl.java.util.function.UnaryOperator;
 import sun.misc.Unsafe;

 /**
  * An object reference that may be updated atomically. See the {@link
- * java.util.concurrent.atomic} package specification for description
+ * org.jvnet.zephyr.jcl.java.util.concurrent.atomic} package specification for description
  * of the properties of atomic variables.
  * @since 1.5
  * @author Doug Lea
@@ -49,7 +51,7 @@
 public class AtomicReference<V> implements java.io.Serializable {
     private static final long serialVersionUID = -1848883965231344442L;

-    private static final Unsafe unsafe = Unsafe.getUnsafe();
+    private static final Unsafe unsafe = UnsafeHolder.getUnsafe();
     private static final long valueOffset;

     static {
diff -r 57336c319de8 src/share/classes/java/util/concurrent/atomic/AtomicReferenceArray.java
--- a/src/share/classes/java/util/concurrent/atomic/AtomicReferenceArray.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/atomic/AtomicReferenceArray.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,16 +33,19 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent.atomic;
-import java.util.function.UnaryOperator;
-import java.util.function.BinaryOperator;
-import java.util.Arrays;
+package org.jvnet.zephyr.jcl.java.util.concurrent.atomic;
+
+import org.jvnet.zephyr.jcl.impl.misc.UnsafeHolder;
+import org.jvnet.zephyr.jcl.java.util.Arrays;
+import org.jvnet.zephyr.jcl.java.util.function.BinaryOperator;
+import org.jvnet.zephyr.jcl.java.util.function.UnaryOperator;
+import sun.misc.Unsafe;
+
 import java.lang.reflect.Array;
-import sun.misc.Unsafe;

 /**
  * An array of object references in which elements may be updated
- * atomically.  See the {@link java.util.concurrent.atomic} package
+ * atomically.  See the {@link org.jvnet.zephyr.jcl.java.util.concurrent.atomic} package
  * specification for description of the properties of atomic
  * variables.
  * @since 1.5
@@ -60,7 +63,7 @@

     static {
         try {
-            unsafe = Unsafe.getUnsafe();
+            unsafe = UnsafeHolder.getUnsafe();
             arrayFieldOffset = unsafe.objectFieldOffset
                 (AtomicReferenceArray.class.getDeclaredField("array"));
             base = unsafe.arrayBaseOffset(Object[].class);
diff -r 57336c319de8 src/share/classes/java/util/concurrent/atomic/AtomicReferenceFieldUpdater.java
--- a/src/share/classes/java/util/concurrent/atomic/AtomicReferenceFieldUpdater.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/atomic/AtomicReferenceFieldUpdater.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,17 +33,19 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent.atomic;
-import java.util.function.UnaryOperator;
-import java.util.function.BinaryOperator;
+package org.jvnet.zephyr.jcl.java.util.concurrent.atomic;
+
+import org.jvnet.zephyr.jcl.impl.misc.ReflectionUtils;
+import org.jvnet.zephyr.jcl.impl.misc.UnsafeHolder;
+import org.jvnet.zephyr.jcl.java.util.function.BinaryOperator;
+import org.jvnet.zephyr.jcl.java.util.function.UnaryOperator;
 import sun.misc.Unsafe;
+
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
 import java.security.AccessController;
+import java.security.PrivilegedActionException;
 import java.security.PrivilegedExceptionAction;
-import java.security.PrivilegedActionException;
-import sun.reflect.CallerSensitive;
-import sun.reflect.Reflection;

 /**
  * A reflection-based utility that enables atomic updates to
@@ -101,12 +103,11 @@
      * or the field is inaccessible to the caller according to Java language
      * access control
      */
-    @CallerSensitive
     public static <U,W> AtomicReferenceFieldUpdater<U,W> newUpdater(Class<U> tclass,
                                                                     Class<W> vclass,
                                                                     String fieldName) {
         return new AtomicReferenceFieldUpdaterImpl<U,W>
-            (tclass, vclass, fieldName, Reflection.getCallerClass());
+            (tclass, vclass, fieldName, ReflectionUtils.getClassContext()[3]);
     }

     /**
@@ -284,7 +285,7 @@

     private static final class AtomicReferenceFieldUpdaterImpl<T,V>
         extends AtomicReferenceFieldUpdater<T,V> {
-        private static final Unsafe unsafe = Unsafe.getUnsafe();
+        private static final Unsafe unsafe = UnsafeHolder.getUnsafe();
         private final long offset;
         private final Class<T> tclass;
         private final Class<V> vclass;
diff -r 57336c319de8 src/share/classes/java/util/concurrent/atomic/Striped64.java
--- a/src/share/classes/java/util/concurrent/atomic/Striped64.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/atomic/Striped64.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,10 +33,14 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent.atomic;
+package org.jvnet.zephyr.jcl.java.util.concurrent.atomic;
+
+import org.jvnet.zephyr.jcl.impl.misc.UnsafeHolder;
+import org.jvnet.zephyr.jcl.java.lang.Thread;
+import org.jvnet.zephyr.jcl.java.util.concurrent.ThreadLocalRandom;
+
+import java.util.function.DoubleBinaryOperator;
 import java.util.function.LongBinaryOperator;
-import java.util.function.DoubleBinaryOperator;
-import java.util.concurrent.ThreadLocalRandom;

 /**
  * A package-local class holding common representation and mechanics
@@ -129,7 +133,7 @@
         private static final long valueOffset;
         static {
             try {
-                UNSAFE = sun.misc.Unsafe.getUnsafe();
+                UNSAFE = UnsafeHolder.getUnsafe();
                 Class<?> ak = Cell.class;
                 valueOffset = UNSAFE.objectFieldOffset
                     (ak.getDeclaredField("value"));
@@ -396,7 +400,7 @@
     private static final long PROBE;
     static {
         try {
-            UNSAFE = sun.misc.Unsafe.getUnsafe();
+            UNSAFE = UnsafeHolder.getUnsafe();
             Class<?> sk = Striped64.class;
             BASE = UNSAFE.objectFieldOffset
                 (sk.getDeclaredField("base"));
diff -r 57336c319de8 src/share/classes/java/util/concurrent/locks/AbstractOwnableSynchronizer.java
--- a/src/share/classes/java/util/concurrent/locks/AbstractOwnableSynchronizer.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/locks/AbstractOwnableSynchronizer.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,7 +33,9 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent.locks;
+package org.jvnet.zephyr.jcl.java.util.concurrent.locks;
+
+import org.jvnet.zephyr.jcl.java.lang.Thread;

 /**
  * A synchronizer that may be exclusively owned by a thread.  This
diff -r 57336c319de8 src/share/classes/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.java
--- a/src/share/classes/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/locks/AbstractQueuedLongSynchronizer.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,12 +33,16 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent.locks;
-import java.util.concurrent.TimeUnit;
-import java.util.ArrayList;
-import java.util.Collection;
+package org.jvnet.zephyr.jcl.java.util.concurrent.locks;
+
+import org.jvnet.zephyr.jcl.impl.misc.UnsafeHolder;
+import org.jvnet.zephyr.jcl.java.lang.Thread;
+import org.jvnet.zephyr.jcl.java.util.ArrayList;
+import org.jvnet.zephyr.jcl.java.util.Collection;
+import org.jvnet.zephyr.jcl.java.util.concurrent.TimeUnit;
+import sun.misc.Unsafe;
+
 import java.util.Date;
-import sun.misc.Unsafe;

 /**
  * A version of {@link AbstractQueuedSynchronizer} in
@@ -2037,7 +2041,7 @@
      * are at it, we do the same for other CASable fields (which could
      * otherwise be done with atomic field updaters).
      */
-    private static final Unsafe unsafe = Unsafe.getUnsafe();
+    private static final Unsafe unsafe = UnsafeHolder.getUnsafe();
     private static final long stateOffset;
     private static final long headOffset;
     private static final long tailOffset;
diff -r 57336c319de8 src/share/classes/java/util/concurrent/locks/AbstractQueuedSynchronizer.java
--- a/src/share/classes/java/util/concurrent/locks/AbstractQueuedSynchronizer.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/locks/AbstractQueuedSynchronizer.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,12 +33,18 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent.locks;
-import java.util.concurrent.TimeUnit;
-import java.util.ArrayList;
-import java.util.Collection;
+package org.jvnet.zephyr.jcl.java.util.concurrent.locks;
+
+import org.jvnet.zephyr.jcl.impl.misc.UnsafeHolder;
+import org.jvnet.zephyr.jcl.java.lang.Thread;
+import org.jvnet.zephyr.jcl.java.util.ArrayList;
+import org.jvnet.zephyr.jcl.java.util.Collection;
+import org.jvnet.zephyr.jcl.java.util.Queue;
+import org.jvnet.zephyr.jcl.java.util.concurrent.CountDownLatch;
+import org.jvnet.zephyr.jcl.java.util.concurrent.TimeUnit;
+import sun.misc.Unsafe;
+
 import java.util.Date;
-import sun.misc.Unsafe;

 /**
  * Provides a framework for implementing blocking locks and related
@@ -181,8 +187,8 @@
  * synchronizers that can rely on {@code int} state, acquire, and
  * release parameters, and an internal FIFO wait queue. When this does
  * not suffice, you can build synchronizers from a lower level using
- * {@link java.util.concurrent.atomic atomic} classes, your own custom
- * {@link java.util.Queue} classes, and {@link LockSupport} blocking
+ * {@link org.jvnet.zephyr.jcl.java.util.concurrent.atomic atomic} classes, your own custom
+ * {@link Queue} classes, and {@link LockSupport} blocking
  * support.
  *
  * <h3>Usage Examples</h3>
@@ -254,7 +260,7 @@
  * }}</pre>
  *
  * <p>Here is a latch class that is like a
- * {@link java.util.concurrent.CountDownLatch CountDownLatch}
+ * {@link CountDownLatch CountDownLatch}
  * except that it only requires a single {@code signal} to
  * fire. Because a latch is non-exclusive, it uses the {@code shared}
  * acquire and release methods.
@@ -2257,7 +2263,7 @@
      * are at it, we do the same for other CASable fields (which could
      * otherwise be done with atomic field updaters).
      */
-    private static final Unsafe unsafe = Unsafe.getUnsafe();
+    private static final Unsafe unsafe = UnsafeHolder.getUnsafe();
     private static final long stateOffset;
     private static final long headOffset;
     private static final long tailOffset;
diff -r 57336c319de8 src/share/classes/java/util/concurrent/locks/Condition.java
--- a/src/share/classes/java/util/concurrent/locks/Condition.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/locks/Condition.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,8 +33,12 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent.locks;
-import java.util.concurrent.TimeUnit;
+package org.jvnet.zephyr.jcl.java.util.concurrent.locks;
+
+import org.jvnet.zephyr.jcl.java.lang.Thread;
+import org.jvnet.zephyr.jcl.java.util.concurrent.ArrayBlockingQueue;
+import org.jvnet.zephyr.jcl.java.util.concurrent.TimeUnit;
+
 import java.util.Date;

 /**
@@ -111,7 +115,7 @@
  * }
  * </pre>
  *
- * (The {@link java.util.concurrent.ArrayBlockingQueue} class provides
+ * (The {@link ArrayBlockingQueue} class provides
  * this functionality, so there is no reason to implement this
  * sample usage class.)
  *
diff -r 57336c319de8 src/share/classes/java/util/concurrent/locks/Lock.java
--- a/src/share/classes/java/util/concurrent/locks/Lock.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/locks/Lock.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,8 +33,10 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent.locks;
-import java.util.concurrent.TimeUnit;
+package org.jvnet.zephyr.jcl.java.util.concurrent.locks;
+
+import org.jvnet.zephyr.jcl.java.lang.Thread;
+import org.jvnet.zephyr.jcl.java.util.concurrent.TimeUnit;

 /**
  * {@code Lock} implementations provide more extensive locking
diff -r 57336c319de8 src/share/classes/java/util/concurrent/locks/LockSupport.java
--- a/src/share/classes/java/util/concurrent/locks/LockSupport.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/locks/LockSupport.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,15 +33,22 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent.locks;
-import sun.misc.Unsafe;
+package org.jvnet.zephyr.jcl.java.util.concurrent.locks;
+
+import org.jvnet.zephyr.jcl.impl.misc.SharedSecrets;
+import org.jvnet.zephyr.jcl.impl.misc.UnsafeHolder;
+import org.jvnet.zephyr.jcl.java.lang.Thread;
+import org.jvnet.zephyr.jcl.java.util.concurrent.Semaphore;
+import org.jvnet.zephyr.jcl.java.util.concurrent.ThreadLocalRandom;
+
+import java.util.concurrent.TimeUnit;

 /**
  * Basic thread blocking primitives for creating locks and other
  * synchronization classes.
  *
  * <p>This class associates, with each thread that uses it, a permit
- * (in the sense of the {@link java.util.concurrent.Semaphore
+ * (in the sense of the {@link Semaphore
  * Semaphore} class). A call to {@code park} will return immediately
  * if the permit is available, consuming it in the process; otherwise
  * it <em>may</em> block.  A call to {@code unpark} makes the permit
@@ -138,7 +145,7 @@
      */
     public static void unpark(Thread thread) {
         if (thread != null)
-            UNSAFE.unpark(thread);
+            SharedSecrets.getThreadAccess().getImpl(thread).unpark();
     }

     /**
@@ -172,7 +179,7 @@
     public static void park(Object blocker) {
         Thread t = Thread.currentThread();
         setBlocker(t, blocker);
-        UNSAFE.park(false, 0L);
+        SharedSecrets.getThreadAccess().getImpl(Thread.currentThread()).park();
         setBlocker(t, null);
     }

@@ -212,7 +219,7 @@
         if (nanos > 0) {
             Thread t = Thread.currentThread();
             setBlocker(t, blocker);
-            UNSAFE.park(false, nanos);
+            SharedSecrets.getThreadAccess().getImpl(Thread.currentThread()).park(nanos, TimeUnit.NANOSECONDS);
             setBlocker(t, null);
         }
     }
@@ -253,7 +260,7 @@
     public static void parkUntil(Object blocker, long deadline) {
         Thread t = Thread.currentThread();
         setBlocker(t, blocker);
-        UNSAFE.park(true, deadline);
+        SharedSecrets.getThreadAccess().getImpl(Thread.currentThread()).parkUntil(deadline);
         setBlocker(t, null);
     }

@@ -301,7 +308,7 @@
      * for example, the interrupt status of the thread upon return.
      */
     public static void park() {
-        UNSAFE.park(false, 0L);
+        SharedSecrets.getThreadAccess().getImpl(Thread.currentThread()).park();
     }

     /**
@@ -335,7 +342,7 @@
      */
     public static void parkNanos(long nanos) {
         if (nanos > 0)
-            UNSAFE.park(false, nanos);
+            SharedSecrets.getThreadAccess().getImpl(Thread.currentThread()).park(nanos, TimeUnit.NANOSECONDS);
     }

     /**
@@ -369,7 +376,7 @@
      *        to wait until
      */
     public static void parkUntil(long deadline) {
-        UNSAFE.park(true, deadline);
+        SharedSecrets.getThreadAccess().getImpl(Thread.currentThread()).parkUntil(deadline);
     }

     /**
@@ -384,7 +391,7 @@
             r ^= r >>> 17;
             r ^= r << 5;
         }
-        else if ((r = java.util.concurrent.ThreadLocalRandom.current().nextInt()) == 0)
+        else if ((r = ThreadLocalRandom.current().nextInt()) == 0)
             r = 1; // avoid zero
         UNSAFE.putInt(t, SECONDARY, r);
         return r;
@@ -398,7 +405,7 @@
     private static final long SECONDARY;
     static {
         try {
-            UNSAFE = sun.misc.Unsafe.getUnsafe();
+            UNSAFE = UnsafeHolder.getUnsafe();
             Class<?> tk = Thread.class;
             parkBlockerOffset = UNSAFE.objectFieldOffset
                 (tk.getDeclaredField("parkBlocker"));
diff -r 57336c319de8 src/share/classes/java/util/concurrent/locks/ReadWriteLock.java
--- a/src/share/classes/java/util/concurrent/locks/ReadWriteLock.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/locks/ReadWriteLock.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,7 +33,7 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent.locks;
+package org.jvnet.zephyr.jcl.java.util.concurrent.locks;

 /**
  * A {@code ReadWriteLock} maintains a pair of associated {@link
diff -r 57336c319de8 src/share/classes/java/util/concurrent/locks/ReentrantLock.java
--- a/src/share/classes/java/util/concurrent/locks/ReentrantLock.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/locks/ReentrantLock.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,9 +33,11 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent.locks;
-import java.util.concurrent.TimeUnit;
-import java.util.Collection;
+package org.jvnet.zephyr.jcl.java.util.concurrent.locks;
+
+import org.jvnet.zephyr.jcl.java.lang.Thread;
+import org.jvnet.zephyr.jcl.java.util.Collection;
+import org.jvnet.zephyr.jcl.java.util.concurrent.TimeUnit;

 /**
  * A reentrant mutual exclusion {@link Lock} with the same basic
diff -r 57336c319de8 src/share/classes/java/util/concurrent/locks/ReentrantReadWriteLock.java
--- a/src/share/classes/java/util/concurrent/locks/ReentrantReadWriteLock.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/locks/ReentrantReadWriteLock.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,9 +33,13 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent.locks;
-import java.util.concurrent.TimeUnit;
-import java.util.Collection;
+package org.jvnet.zephyr.jcl.java.util.concurrent.locks;
+
+import org.jvnet.zephyr.jcl.impl.misc.UnsafeHolder;
+import org.jvnet.zephyr.jcl.java.lang.Thread;
+import org.jvnet.zephyr.jcl.java.lang.ThreadLocal;
+import org.jvnet.zephyr.jcl.java.util.Collection;
+import org.jvnet.zephyr.jcl.java.util.concurrent.TimeUnit;

 /**
  * An implementation of {@link ReadWriteLock} supporting similar
@@ -1498,7 +1502,7 @@
     private static final long TID_OFFSET;
     static {
         try {
-            UNSAFE = sun.misc.Unsafe.getUnsafe();
+            UNSAFE = UnsafeHolder.getUnsafe();
             Class<?> tk = Thread.class;
             TID_OFFSET = UNSAFE.objectFieldOffset
                 (tk.getDeclaredField("tid"));
diff -r 57336c319de8 src/share/classes/java/util/concurrent/locks/StampedLock.java
--- a/src/share/classes/java/util/concurrent/locks/StampedLock.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/concurrent/locks/StampedLock.java	Fri Jul 31 15:50:29 2015 +0300
@@ -33,13 +33,11 @@
  * http://creativecommons.org/publicdomain/zero/1.0/
  */

-package java.util.concurrent.locks;
+package org.jvnet.zephyr.jcl.java.util.concurrent.locks;

-import java.util.concurrent.TimeUnit;
-import java.util.concurrent.locks.Lock;
-import java.util.concurrent.locks.Condition;
-import java.util.concurrent.locks.ReadWriteLock;
-import java.util.concurrent.locks.LockSupport;
+import org.jvnet.zephyr.jcl.impl.misc.UnsafeHolder;
+import org.jvnet.zephyr.jcl.java.lang.Thread;
+import org.jvnet.zephyr.jcl.java.util.concurrent.TimeUnit;

 /**
  * A capability-based lock with three modes for controlling read/write
@@ -1388,7 +1386,7 @@

     static {
         try {
-            U = sun.misc.Unsafe.getUnsafe();
+            U = UnsafeHolder.getUnsafe();
             Class<?> k = StampedLock.class;
             Class<?> wk = WNode.class;
             STATE = U.objectFieldOffset
diff -r 57336c319de8 src/share/classes/java/util/function/BiConsumer.java
--- a/src/share/classes/java/util/function/BiConsumer.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/function/BiConsumer.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,9 +22,9 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.function;
+package org.jvnet.zephyr.jcl.java.util.function;

-import java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.Objects;

 /**
  * Represents an operation that accepts two input arguments and returns no
diff -r 57336c319de8 src/share/classes/java/util/function/BiFunction.java
--- a/src/share/classes/java/util/function/BiFunction.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/function/BiFunction.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,9 +22,9 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.function;
+package org.jvnet.zephyr.jcl.java.util.function;

-import java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.Objects;

 /**
  * Represents a function that accepts two arguments and produces a result.
diff -r 57336c319de8 src/share/classes/java/util/function/BiPredicate.java
--- a/src/share/classes/java/util/function/BiPredicate.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/function/BiPredicate.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,9 +22,9 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.function;
+package org.jvnet.zephyr.jcl.java.util.function;

-import java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.Objects;

 /**
  * Represents a predicate (boolean-valued function) of two arguments.  This is
diff -r 57336c319de8 src/share/classes/java/util/function/BinaryOperator.java
--- a/src/share/classes/java/util/function/BinaryOperator.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/function/BinaryOperator.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,10 +22,10 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.function;
+package org.jvnet.zephyr.jcl.java.util.function;

-import java.util.Objects;
-import java.util.Comparator;
+import org.jvnet.zephyr.jcl.java.util.Comparator;
+import org.jvnet.zephyr.jcl.java.util.Objects;

 /**
  * Represents an operation upon two operands of the same type, producing a result
diff -r 57336c319de8 src/share/classes/java/util/function/Consumer.java
--- a/src/share/classes/java/util/function/Consumer.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/function/Consumer.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,9 +22,9 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.function;
+package org.jvnet.zephyr.jcl.java.util.function;

-import java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.Objects;

 /**
  * Represents an operation that accepts a single input argument and returns no
diff -r 57336c319de8 src/share/classes/java/util/function/DoubleConsumer.java
--- a/src/share/classes/java/util/function/DoubleConsumer.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/function/DoubleConsumer.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,9 +22,9 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.function;
+package org.jvnet.zephyr.jcl.java.util.function;

-import java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.Objects;

 /**
  * Represents an operation that accepts a single {@code double}-valued argument and
diff -r 57336c319de8 src/share/classes/java/util/function/DoublePredicate.java
--- a/src/share/classes/java/util/function/DoublePredicate.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/function/DoublePredicate.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,9 +22,9 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.function;
+package org.jvnet.zephyr.jcl.java.util.function;

-import java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.Objects;

 /**
  * Represents a predicate (boolean-valued function) of one {@code double}-valued
diff -r 57336c319de8 src/share/classes/java/util/function/DoubleUnaryOperator.java
--- a/src/share/classes/java/util/function/DoubleUnaryOperator.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/function/DoubleUnaryOperator.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,9 +22,9 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.function;
+package org.jvnet.zephyr.jcl.java.util.function;

-import java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.Objects;

 /**
  * Represents an operation on a single {@code double}-valued operand that produces
diff -r 57336c319de8 src/share/classes/java/util/function/Function.java
--- a/src/share/classes/java/util/function/Function.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/function/Function.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,9 +22,9 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.function;
+package org.jvnet.zephyr.jcl.java.util.function;

-import java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.Objects;

 /**
  * Represents a function that accepts one argument and produces a result.
diff -r 57336c319de8 src/share/classes/java/util/function/IntConsumer.java
--- a/src/share/classes/java/util/function/IntConsumer.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/function/IntConsumer.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,9 +22,9 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.function;
+package org.jvnet.zephyr.jcl.java.util.function;

-import java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.Objects;

 /**
  * Represents an operation that accepts a single {@code int}-valued argument and
diff -r 57336c319de8 src/share/classes/java/util/function/IntPredicate.java
--- a/src/share/classes/java/util/function/IntPredicate.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/function/IntPredicate.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,9 +22,9 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.function;
+package org.jvnet.zephyr.jcl.java.util.function;

-import java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.Objects;

 /**
  * Represents a predicate (boolean-valued function) of one {@code int}-valued
diff -r 57336c319de8 src/share/classes/java/util/function/IntUnaryOperator.java
--- a/src/share/classes/java/util/function/IntUnaryOperator.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/function/IntUnaryOperator.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,9 +22,9 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.function;
+package org.jvnet.zephyr.jcl.java.util.function;

-import java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.Objects;

 /**
  * Represents an operation on a single {@code int}-valued operand that produces
diff -r 57336c319de8 src/share/classes/java/util/function/LongConsumer.java
--- a/src/share/classes/java/util/function/LongConsumer.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/function/LongConsumer.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,9 +22,9 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.function;
+package org.jvnet.zephyr.jcl.java.util.function;

-import java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.Objects;

 /**
  * Represents an operation that accepts a single {@code long}-valued argument and
diff -r 57336c319de8 src/share/classes/java/util/function/LongPredicate.java
--- a/src/share/classes/java/util/function/LongPredicate.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/function/LongPredicate.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,9 +22,9 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.function;
+package org.jvnet.zephyr.jcl.java.util.function;

-import java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.Objects;

 /**
  * Represents a predicate (boolean-valued function) of one {@code long}-valued
diff -r 57336c319de8 src/share/classes/java/util/function/LongUnaryOperator.java
--- a/src/share/classes/java/util/function/LongUnaryOperator.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/function/LongUnaryOperator.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,9 +22,9 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.function;
+package org.jvnet.zephyr.jcl.java.util.function;

-import java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.Objects;

 /**
  * Represents an operation on a single {@code long}-valued operand that produces
diff -r 57336c319de8 src/share/classes/java/util/function/Predicate.java
--- a/src/share/classes/java/util/function/Predicate.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/function/Predicate.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,9 +22,9 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.function;
+package org.jvnet.zephyr.jcl.java.util.function;

-import java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.Objects;

 /**
  * Represents a predicate (boolean-valued function) of one argument.
diff -r 57336c319de8 src/share/classes/java/util/function/UnaryOperator.java
--- a/src/share/classes/java/util/function/UnaryOperator.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/function/UnaryOperator.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,7 +22,7 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.function;
+package org.jvnet.zephyr.jcl.java.util.function;

 /**
  * Represents an operation on a single operand that produces a result of the
diff -r 57336c319de8 src/share/classes/java/util/stream/AbstractPipeline.java
--- a/src/share/classes/java/util/stream/AbstractPipeline.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/stream/AbstractPipeline.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,10 +22,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.stream;
+package org.jvnet.zephyr.jcl.java.util.stream;

-import java.util.Objects;
-import java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+
 import java.util.function.IntFunction;
 import java.util.function.Supplier;

@@ -660,7 +661,7 @@
     /**
      * Returns whether this operation is stateful or not.  If it is stateful,
      * then the method
-     * {@link #opEvaluateParallel(PipelineHelper, java.util.Spliterator, java.util.function.IntFunction)}
+     * {@link #opEvaluateParallel(PipelineHelper, Spliterator, java.util.function.IntFunction)}
      * must be overridden.
      *
      * @return {@code true} if this operation is stateful
diff -r 57336c319de8 src/share/classes/java/util/stream/AbstractShortCircuitTask.java
--- a/src/share/classes/java/util/stream/AbstractShortCircuitTask.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/stream/AbstractShortCircuitTask.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,10 +22,10 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.stream;
+package org.jvnet.zephyr.jcl.java.util.stream;

-import java.util.Spliterator;
-import java.util.concurrent.atomic.AtomicReference;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.concurrent.atomic.AtomicReference;

 /**
  * Abstract class for fork-join tasks used to implement short-circuiting
diff -r 57336c319de8 src/share/classes/java/util/stream/AbstractSpinedBuffer.java
--- a/src/share/classes/java/util/stream/AbstractSpinedBuffer.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/stream/AbstractSpinedBuffer.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,7 +22,7 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.stream;
+package org.jvnet.zephyr.jcl.java.util.stream;

 /**
  * Base class for a data structure for gathering elements into a buffer and then
diff -r 57336c319de8 src/share/classes/java/util/stream/AbstractTask.java
--- a/src/share/classes/java/util/stream/AbstractTask.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/stream/AbstractTask.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,9 +22,10 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.stream;
+package org.jvnet.zephyr.jcl.java.util.stream;

-import java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+
 import java.util.concurrent.CountedCompleter;
 import java.util.concurrent.ForkJoinPool;

diff -r 57336c319de8 src/share/classes/java/util/stream/BaseStream.java
--- a/src/share/classes/java/util/stream/BaseStream.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/stream/BaseStream.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,17 +22,10 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.stream;
+package org.jvnet.zephyr.jcl.java.util.stream;

-import java.nio.charset.Charset;
-import java.nio.file.Files;
-import java.nio.file.Path;
-import java.util.Collection;
-import java.util.Iterator;
-import java.util.Spliterator;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.function.IntConsumer;
-import java.util.function.Predicate;
+import org.jvnet.zephyr.jcl.java.util.Iterator;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;

 /**
  * Base interface for streams, which are sequences of elements supporting
@@ -48,7 +41,7 @@
  * }</pre>
  *
  * See the class documentation for {@link Stream} and the package documentation
- * for <a href="package-summary.html">java.util.stream</a> for additional
+ * for <a href="package-summary.html">org.jvnet.zephyr.jcl.java.util.stream</a> for additional
  * specification of streams, stream operations, stream pipelines, and
  * parallelism, which governs the behavior of all stream types.
  *
@@ -59,7 +52,7 @@
  * @see IntStream
  * @see LongStream
  * @see DoubleStream
- * @see <a href="package-summary.html">java.util.stream</a>
+ * @see <a href="package-summary.html">org.jvnet.zephyr.jcl.java.util.stream</a>
  */
 public interface BaseStream<T, S extends BaseStream<T, S>>
         extends AutoCloseable {
diff -r 57336c319de8 src/share/classes/java/util/stream/Collector.java
--- a/src/share/classes/java/util/stream/Collector.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/stream/Collector.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,15 +22,16 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.stream;
+package org.jvnet.zephyr.jcl.java.util.stream;

-import java.util.Collections;
-import java.util.EnumSet;
-import java.util.Objects;
-import java.util.Set;
-import java.util.function.BiConsumer;
-import java.util.function.BinaryOperator;
-import java.util.function.Function;
+import org.jvnet.zephyr.jcl.java.util.Collections;
+import org.jvnet.zephyr.jcl.java.util.EnumSet;
+import org.jvnet.zephyr.jcl.java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.Set;
+import org.jvnet.zephyr.jcl.java.util.function.BiConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.BinaryOperator;
+import org.jvnet.zephyr.jcl.java.util.function.Function;
+
 import java.util.function.Supplier;

 /**
diff -r 57336c319de8 src/share/classes/java/util/stream/Collectors.java
--- a/src/share/classes/java/util/stream/Collectors.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/stream/Collectors.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,36 +22,37 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.stream;
+package org.jvnet.zephyr.jcl.java.util.stream;

-import java.util.AbstractMap;
-import java.util.AbstractSet;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.DoubleSummaryStatistics;
-import java.util.EnumSet;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.IntSummaryStatistics;
-import java.util.Iterator;
-import java.util.List;
-import java.util.LongSummaryStatistics;
-import java.util.Map;
-import java.util.Objects;
-import java.util.Optional;
-import java.util.Set;
+import org.jvnet.zephyr.jcl.java.util.AbstractMap;
+import org.jvnet.zephyr.jcl.java.util.AbstractSet;
+import org.jvnet.zephyr.jcl.java.util.ArrayList;
+import org.jvnet.zephyr.jcl.java.util.Arrays;
+import org.jvnet.zephyr.jcl.java.util.Collection;
+import org.jvnet.zephyr.jcl.java.util.Collections;
+import org.jvnet.zephyr.jcl.java.util.Comparator;
+import org.jvnet.zephyr.jcl.java.util.DoubleSummaryStatistics;
+import org.jvnet.zephyr.jcl.java.util.EnumSet;
+import org.jvnet.zephyr.jcl.java.util.HashMap;
+import org.jvnet.zephyr.jcl.java.util.HashSet;
+import org.jvnet.zephyr.jcl.java.util.IntSummaryStatistics;
+import org.jvnet.zephyr.jcl.java.util.Iterator;
+import org.jvnet.zephyr.jcl.java.util.List;
+import org.jvnet.zephyr.jcl.java.util.LongSummaryStatistics;
+import org.jvnet.zephyr.jcl.java.util.Map;
+import org.jvnet.zephyr.jcl.java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.Optional;
+import org.jvnet.zephyr.jcl.java.util.Set;
+import org.jvnet.zephyr.jcl.java.util.concurrent.ConcurrentHashMap;
+import org.jvnet.zephyr.jcl.java.util.concurrent.ConcurrentMap;
+import org.jvnet.zephyr.jcl.java.util.function.BiConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.BiFunction;
+import org.jvnet.zephyr.jcl.java.util.function.BinaryOperator;
+import org.jvnet.zephyr.jcl.java.util.function.Consumer;
+import org.jvnet.zephyr.jcl.java.util.function.Function;
+import org.jvnet.zephyr.jcl.java.util.function.Predicate;
+
 import java.util.StringJoiner;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.ConcurrentMap;
-import java.util.function.BiConsumer;
-import java.util.function.BiFunction;
-import java.util.function.BinaryOperator;
-import java.util.function.Consumer;
-import java.util.function.Function;
-import java.util.function.Predicate;
 import java.util.function.Supplier;
 import java.util.function.ToDoubleFunction;
 import java.util.function.ToIntFunction;
@@ -316,8 +317,11 @@
     private static <K, V, M extends Map<K,V>>
     BinaryOperator<M> mapMerger(BinaryOperator<V> mergeFunction) {
         return (m1, m2) -> {
-            for (Map.Entry<K,V> e : m2.entrySet())
+            for (Iterator<Map.Entry<K, V>> iterator = m2.entrySet().iterator();
+                    iterator.hasNext(); ) {
+                Map.Entry<K, V> e = iterator.next();
                 m1.merge(e.getKey(), e.getValue(), mergeFunction);
+            }
             return m1;
         };
     }
@@ -1169,7 +1173,7 @@
      * @apiNote
      * It is common for either the key or the value to be the input elements.
      * In this case, the utility method
-     * {@link java.util.function.Function#identity()} may be helpful.
+     * {@link Function#identity()} may be helpful.
      * For example, the following produces a {@code Map} mapping
      * students to their grade point average:
      * <pre>{@code
@@ -1336,7 +1340,7 @@
      * @apiNote
      * It is common for either the key or the value to be the input elements.
      * In this case, the utility method
-     * {@link java.util.function.Function#identity()} may be helpful.
+     * {@link Function#identity()} may be helpful.
      * For example, the following produces a {@code Map} mapping
      * students to their grade point average:
      * <pre>{@code
diff -r 57336c319de8 src/share/classes/java/util/stream/DistinctOps.java
--- a/src/share/classes/java/util/stream/DistinctOps.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/stream/DistinctOps.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,14 +22,15 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.stream;
+package org.jvnet.zephyr.jcl.java.util.stream;

-import java.util.HashSet;
-import java.util.LinkedHashSet;
-import java.util.Objects;
-import java.util.Set;
-import java.util.Spliterator;
-import java.util.concurrent.ConcurrentHashMap;
+import org.jvnet.zephyr.jcl.java.util.HashSet;
+import org.jvnet.zephyr.jcl.java.util.LinkedHashSet;
+import org.jvnet.zephyr.jcl.java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.Set;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.concurrent.ConcurrentHashMap;
+
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.function.IntFunction;

diff -r 57336c319de8 src/share/classes/java/util/stream/DoublePipeline.java
--- a/src/share/classes/java/util/stream/DoublePipeline.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/stream/DoublePipeline.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,23 +22,24 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.stream;
+package org.jvnet.zephyr.jcl.java.util.stream;

-import java.util.DoubleSummaryStatistics;
-import java.util.Objects;
-import java.util.OptionalDouble;
-import java.util.PrimitiveIterator;
-import java.util.Spliterator;
-import java.util.Spliterators;
-import java.util.function.BiConsumer;
-import java.util.function.BinaryOperator;
+import org.jvnet.zephyr.jcl.java.util.DoubleSummaryStatistics;
+import org.jvnet.zephyr.jcl.java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.OptionalDouble;
+import org.jvnet.zephyr.jcl.java.util.PrimitiveIterator;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.Spliterators;
+import org.jvnet.zephyr.jcl.java.util.function.BiConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.BinaryOperator;
+import org.jvnet.zephyr.jcl.java.util.function.DoubleConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.DoublePredicate;
+import org.jvnet.zephyr.jcl.java.util.function.DoubleUnaryOperator;
+
 import java.util.function.DoubleBinaryOperator;
-import java.util.function.DoubleConsumer;
 import java.util.function.DoubleFunction;
-import java.util.function.DoublePredicate;
 import java.util.function.DoubleToIntFunction;
 import java.util.function.DoubleToLongFunction;
-import java.util.function.DoubleUnaryOperator;
 import java.util.function.IntFunction;
 import java.util.function.ObjDoubleConsumer;
 import java.util.function.Supplier;
diff -r 57336c319de8 src/share/classes/java/util/stream/DoubleStream.java
--- a/src/share/classes/java/util/stream/DoubleStream.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/stream/DoubleStream.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,30 +22,26 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.stream;
+package org.jvnet.zephyr.jcl.java.util.stream;

-import java.nio.charset.Charset;
-import java.nio.file.Files;
-import java.nio.file.Path;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.DoubleSummaryStatistics;
-import java.util.Objects;
-import java.util.OptionalDouble;
-import java.util.PrimitiveIterator;
-import java.util.Spliterator;
-import java.util.Spliterators;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.function.BiConsumer;
+import org.jvnet.zephyr.jcl.java.util.Arrays;
+import org.jvnet.zephyr.jcl.java.util.DoubleSummaryStatistics;
+import org.jvnet.zephyr.jcl.java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.OptionalDouble;
+import org.jvnet.zephyr.jcl.java.util.PrimitiveIterator;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.Spliterators;
+import org.jvnet.zephyr.jcl.java.util.function.BiConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.DoubleConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.DoublePredicate;
+import org.jvnet.zephyr.jcl.java.util.function.DoubleUnaryOperator;
+import org.jvnet.zephyr.jcl.java.util.function.Function;
+
 import java.util.function.DoubleBinaryOperator;
-import java.util.function.DoubleConsumer;
 import java.util.function.DoubleFunction;
-import java.util.function.DoublePredicate;
 import java.util.function.DoubleSupplier;
 import java.util.function.DoubleToIntFunction;
 import java.util.function.DoubleToLongFunction;
-import java.util.function.DoubleUnaryOperator;
-import java.util.function.Function;
 import java.util.function.ObjDoubleConsumer;
 import java.util.function.Supplier;

@@ -66,13 +62,13 @@
  * }</pre>
  *
  * See the class documentation for {@link Stream} and the package documentation
- * for <a href="package-summary.html">java.util.stream</a> for additional
+ * for <a href="package-summary.html">org.jvnet.zephyr.jcl.java.util.stream</a> for additional
  * specification of streams, stream operations, stream pipelines, and
  * parallelism.
  *
  * @since 1.8
  * @see Stream
- * @see <a href="package-summary.html">java.util.stream</a>
+ * @see <a href="package-summary.html">org.jvnet.zephyr.jcl.java.util.stream</a>
  */
 public interface DoubleStream extends BaseStream<Double, DoubleStream> {

@@ -152,7 +148,7 @@
      * Returns a stream consisting of the results of replacing each element of
      * this stream with the contents of a mapped stream produced by applying
      * the provided mapping function to each element.  Each mapped stream is
-     * {@link java.util.stream.BaseStream#close() closed} after its contents
+     * {@link BaseStream#close() closed} after its contents
      * have been placed into this stream.  (If a mapped stream is {@code null}
      * an empty stream is used, instead.)
      *
diff -r 57336c319de8 src/share/classes/java/util/stream/FindOps.java
--- a/src/share/classes/java/util/stream/FindOps.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/stream/FindOps.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,15 +22,16 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.stream;
+package org.jvnet.zephyr.jcl.java.util.stream;

-import java.util.Optional;
-import java.util.OptionalDouble;
-import java.util.OptionalInt;
-import java.util.OptionalLong;
-import java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.Optional;
+import org.jvnet.zephyr.jcl.java.util.OptionalDouble;
+import org.jvnet.zephyr.jcl.java.util.OptionalInt;
+import org.jvnet.zephyr.jcl.java.util.OptionalLong;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.function.Predicate;
+
 import java.util.concurrent.CountedCompleter;
-import java.util.function.Predicate;
 import java.util.function.Supplier;

 /**
diff -r 57336c319de8 src/share/classes/java/util/stream/ForEachOps.java
--- a/src/share/classes/java/util/stream/ForEachOps.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/stream/ForEachOps.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,18 +22,18 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.stream;
+package org.jvnet.zephyr.jcl.java.util.stream;

-import java.util.Objects;
-import java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.function.Consumer;
+import org.jvnet.zephyr.jcl.java.util.function.DoubleConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.IntConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.LongConsumer;
+
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.CountedCompleter;
-import java.util.concurrent.ForkJoinTask;
-import java.util.function.Consumer;
-import java.util.function.DoubleConsumer;
-import java.util.function.IntConsumer;
 import java.util.function.IntFunction;
-import java.util.function.LongConsumer;

 /**
  * Factory for creating instances of {@code TerminalOp} that perform an
diff -r 57336c319de8 src/share/classes/java/util/stream/IntPipeline.java
--- a/src/share/classes/java/util/stream/IntPipeline.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/stream/IntPipeline.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,24 +22,25 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.stream;
+package org.jvnet.zephyr.jcl.java.util.stream;

-import java.util.IntSummaryStatistics;
-import java.util.Objects;
-import java.util.OptionalDouble;
-import java.util.OptionalInt;
-import java.util.PrimitiveIterator;
-import java.util.Spliterator;
-import java.util.Spliterators;
-import java.util.function.BiConsumer;
-import java.util.function.BinaryOperator;
+import org.jvnet.zephyr.jcl.java.util.IntSummaryStatistics;
+import org.jvnet.zephyr.jcl.java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.OptionalDouble;
+import org.jvnet.zephyr.jcl.java.util.OptionalInt;
+import org.jvnet.zephyr.jcl.java.util.PrimitiveIterator;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.Spliterators;
+import org.jvnet.zephyr.jcl.java.util.function.BiConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.BinaryOperator;
+import org.jvnet.zephyr.jcl.java.util.function.IntConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.IntPredicate;
+import org.jvnet.zephyr.jcl.java.util.function.IntUnaryOperator;
+
 import java.util.function.IntBinaryOperator;
-import java.util.function.IntConsumer;
 import java.util.function.IntFunction;
-import java.util.function.IntPredicate;
 import java.util.function.IntToDoubleFunction;
 import java.util.function.IntToLongFunction;
-import java.util.function.IntUnaryOperator;
 import java.util.function.ObjIntConsumer;
 import java.util.function.Supplier;

diff -r 57336c319de8 src/share/classes/java/util/stream/IntStream.java
--- a/src/share/classes/java/util/stream/IntStream.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/stream/IntStream.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,26 +22,27 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.stream;
+package org.jvnet.zephyr.jcl.java.util.stream;

-import java.util.Arrays;
-import java.util.IntSummaryStatistics;
-import java.util.Objects;
-import java.util.OptionalDouble;
-import java.util.OptionalInt;
-import java.util.PrimitiveIterator;
-import java.util.Spliterator;
-import java.util.Spliterators;
-import java.util.function.BiConsumer;
-import java.util.function.Function;
+import org.jvnet.zephyr.jcl.java.util.Arrays;
+import org.jvnet.zephyr.jcl.java.util.IntSummaryStatistics;
+import org.jvnet.zephyr.jcl.java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.OptionalDouble;
+import org.jvnet.zephyr.jcl.java.util.OptionalInt;
+import org.jvnet.zephyr.jcl.java.util.PrimitiveIterator;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.Spliterators;
+import org.jvnet.zephyr.jcl.java.util.function.BiConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.Function;
+import org.jvnet.zephyr.jcl.java.util.function.IntConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.IntPredicate;
+import org.jvnet.zephyr.jcl.java.util.function.IntUnaryOperator;
+
 import java.util.function.IntBinaryOperator;
-import java.util.function.IntConsumer;
 import java.util.function.IntFunction;
-import java.util.function.IntPredicate;
 import java.util.function.IntSupplier;
 import java.util.function.IntToDoubleFunction;
 import java.util.function.IntToLongFunction;
-import java.util.function.IntUnaryOperator;
 import java.util.function.ObjIntConsumer;
 import java.util.function.Supplier;

@@ -62,13 +63,13 @@
  * }</pre>
  *
  * See the class documentation for {@link Stream} and the package documentation
- * for <a href="package-summary.html">java.util.stream</a> for additional
+ * for <a href="package-summary.html">org.jvnet.zephyr.jcl.java.util.stream</a> for additional
  * specification of streams, stream operations, stream pipelines, and
  * parallelism.
  *
  * @since 1.8
  * @see Stream
- * @see <a href="package-summary.html">java.util.stream</a>
+ * @see <a href="package-summary.html">org.jvnet.zephyr.jcl.java.util.stream</a>
  */
 public interface IntStream extends BaseStream<Integer, IntStream> {

@@ -148,7 +149,7 @@
      * Returns a stream consisting of the results of replacing each element of
      * this stream with the contents of a mapped stream produced by applying
      * the provided mapping function to each element.  Each mapped stream is
-     * {@link java.util.stream.BaseStream#close() closed} after its contents
+     * {@link BaseStream#close() closed} after its contents
      * have been placed into this stream.  (If a mapped stream is {@code null}
      * an empty stream is used, instead.)
      *
diff -r 57336c319de8 src/share/classes/java/util/stream/LongPipeline.java
--- a/src/share/classes/java/util/stream/LongPipeline.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/stream/LongPipeline.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,25 +22,26 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.stream;
+package org.jvnet.zephyr.jcl.java.util.stream;

-import java.util.LongSummaryStatistics;
-import java.util.Objects;
-import java.util.OptionalDouble;
-import java.util.OptionalLong;
-import java.util.PrimitiveIterator;
-import java.util.Spliterator;
-import java.util.Spliterators;
-import java.util.function.BiConsumer;
-import java.util.function.BinaryOperator;
+import org.jvnet.zephyr.jcl.java.util.LongSummaryStatistics;
+import org.jvnet.zephyr.jcl.java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.OptionalDouble;
+import org.jvnet.zephyr.jcl.java.util.OptionalLong;
+import org.jvnet.zephyr.jcl.java.util.PrimitiveIterator;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.Spliterators;
+import org.jvnet.zephyr.jcl.java.util.function.BiConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.BinaryOperator;
+import org.jvnet.zephyr.jcl.java.util.function.LongConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.LongPredicate;
+import org.jvnet.zephyr.jcl.java.util.function.LongUnaryOperator;
+
 import java.util.function.IntFunction;
 import java.util.function.LongBinaryOperator;
-import java.util.function.LongConsumer;
 import java.util.function.LongFunction;
-import java.util.function.LongPredicate;
 import java.util.function.LongToDoubleFunction;
 import java.util.function.LongToIntFunction;
-import java.util.function.LongUnaryOperator;
 import java.util.function.ObjLongConsumer;
 import java.util.function.Supplier;

diff -r 57336c319de8 src/share/classes/java/util/stream/LongStream.java
--- a/src/share/classes/java/util/stream/LongStream.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/stream/LongStream.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,31 +22,27 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.stream;
+package org.jvnet.zephyr.jcl.java.util.stream;

-import java.nio.charset.Charset;
-import java.nio.file.Files;
-import java.nio.file.Path;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.LongSummaryStatistics;
-import java.util.Objects;
-import java.util.OptionalDouble;
-import java.util.OptionalLong;
-import java.util.PrimitiveIterator;
-import java.util.Spliterator;
-import java.util.Spliterators;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.function.BiConsumer;
-import java.util.function.Function;
+import org.jvnet.zephyr.jcl.java.util.Arrays;
+import org.jvnet.zephyr.jcl.java.util.LongSummaryStatistics;
+import org.jvnet.zephyr.jcl.java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.OptionalDouble;
+import org.jvnet.zephyr.jcl.java.util.OptionalLong;
+import org.jvnet.zephyr.jcl.java.util.PrimitiveIterator;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.Spliterators;
+import org.jvnet.zephyr.jcl.java.util.function.BiConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.Function;
+import org.jvnet.zephyr.jcl.java.util.function.LongConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.LongPredicate;
+import org.jvnet.zephyr.jcl.java.util.function.LongUnaryOperator;
+
 import java.util.function.LongBinaryOperator;
-import java.util.function.LongConsumer;
 import java.util.function.LongFunction;
-import java.util.function.LongPredicate;
 import java.util.function.LongSupplier;
 import java.util.function.LongToDoubleFunction;
 import java.util.function.LongToIntFunction;
-import java.util.function.LongUnaryOperator;
 import java.util.function.ObjLongConsumer;
 import java.util.function.Supplier;

@@ -67,13 +63,13 @@
  * }</pre>
  *
  * See the class documentation for {@link Stream} and the package documentation
- * for <a href="package-summary.html">java.util.stream</a> for additional
+ * for <a href="package-summary.html">org.jvnet.zephyr.jcl.java.util.stream</a> for additional
  * specification of streams, stream operations, stream pipelines, and
  * parallelism.
  *
  * @since 1.8
  * @see Stream
- * @see <a href="package-summary.html">java.util.stream</a>
+ * @see <a href="package-summary.html">org.jvnet.zephyr.jcl.java.util.stream</a>
  */
 public interface LongStream extends BaseStream<Long, LongStream> {

@@ -153,7 +149,7 @@
      * Returns a stream consisting of the results of replacing each element of
      * this stream with the contents of a mapped stream produced by applying
      * the provided mapping function to each element.  Each mapped stream is
-     * {@link java.util.stream.BaseStream#close() closed} after its contents
+     * {@link BaseStream#close() closed} after its contents
      * have been placed into this stream.  (If a mapped stream is {@code null}
      * an empty stream is used, instead.)
      *
diff -r 57336c319de8 src/share/classes/java/util/stream/MatchOps.java
--- a/src/share/classes/java/util/stream/MatchOps.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/stream/MatchOps.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,14 +22,15 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.stream;
+package org.jvnet.zephyr.jcl.java.util.stream;

-import java.util.Objects;
-import java.util.Spliterator;
-import java.util.function.DoublePredicate;
-import java.util.function.IntPredicate;
-import java.util.function.LongPredicate;
-import java.util.function.Predicate;
+import org.jvnet.zephyr.jcl.java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.function.DoublePredicate;
+import org.jvnet.zephyr.jcl.java.util.function.IntPredicate;
+import org.jvnet.zephyr.jcl.java.util.function.LongPredicate;
+import org.jvnet.zephyr.jcl.java.util.function.Predicate;
+
 import java.util.function.Supplier;

 /**
diff -r 57336c319de8 src/share/classes/java/util/stream/Node.java
--- a/src/share/classes/java/util/stream/Node.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/stream/Node.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,14 +22,15 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.stream;
+package org.jvnet.zephyr.jcl.java.util.stream;

-import java.util.Spliterator;
-import java.util.function.Consumer;
-import java.util.function.DoubleConsumer;
-import java.util.function.IntConsumer;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.function.Consumer;
+import org.jvnet.zephyr.jcl.java.util.function.DoubleConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.IntConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.LongConsumer;
+
 import java.util.function.IntFunction;
-import java.util.function.LongConsumer;

 /**
  * An immutable container for describing an ordered sequence of elements of some
@@ -261,8 +262,8 @@
          */
         @Override
         default T[] asArray(IntFunction<T[]> generator) {
-            if (java.util.stream.Tripwire.ENABLED)
-                java.util.stream.Tripwire.trip(getClass(), "{0} calling Node.OfPrimitive.asArray");
+            if (Tripwire.ENABLED)
+                Tripwire.trip(getClass(), "{0} calling Node.OfPrimitive.asArray");

             long size = count();
             if (size >= Nodes.MAX_ARRAY_SIZE)
diff -r 57336c319de8 src/share/classes/java/util/stream/Nodes.java
--- a/src/share/classes/java/util/stream/Nodes.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/stream/Nodes.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,23 +22,24 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.stream;
+package org.jvnet.zephyr.jcl.java.util.stream;

-import java.util.ArrayDeque;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Deque;
-import java.util.List;
-import java.util.Objects;
-import java.util.Spliterator;
-import java.util.Spliterators;
+import org.jvnet.zephyr.jcl.java.util.ArrayDeque;
+import org.jvnet.zephyr.jcl.java.util.Arrays;
+import org.jvnet.zephyr.jcl.java.util.Collection;
+import org.jvnet.zephyr.jcl.java.util.Deque;
+import org.jvnet.zephyr.jcl.java.util.Iterator;
+import org.jvnet.zephyr.jcl.java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.Spliterators;
+import org.jvnet.zephyr.jcl.java.util.function.BinaryOperator;
+import org.jvnet.zephyr.jcl.java.util.function.Consumer;
+import org.jvnet.zephyr.jcl.java.util.function.DoubleConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.IntConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.LongConsumer;
+
 import java.util.concurrent.CountedCompleter;
-import java.util.function.BinaryOperator;
-import java.util.function.Consumer;
-import java.util.function.DoubleConsumer;
-import java.util.function.IntConsumer;
 import java.util.function.IntFunction;
-import java.util.function.LongConsumer;
 import java.util.function.LongFunction;

 /**
@@ -711,8 +712,10 @@

         @Override
         public void copyInto(T[] array, int offset) {
-            for (T t : c)
+            for (Iterator<T> iterator = c.iterator(); iterator.hasNext(); ) {
+                T t = iterator.next();
                 array[offset++] = t;
+            }
         }

         @Override
diff -r 57336c319de8 src/share/classes/java/util/stream/PipelineHelper.java
--- a/src/share/classes/java/util/stream/PipelineHelper.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/stream/PipelineHelper.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,9 +22,10 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.stream;
+package org.jvnet.zephyr.jcl.java.util.stream;

-import java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+
 import java.util.function.IntFunction;

 /**
@@ -39,9 +40,9 @@
  * incorporate information about the terminal (or stateful) operation which
  * follows the last intermediate operation described by this
  * {@code PipelineHelper}. The {@code PipelineHelper} is passed to the
- * {@link TerminalOp#evaluateParallel(PipelineHelper, java.util.Spliterator)},
- * {@link TerminalOp#evaluateSequential(PipelineHelper, java.util.Spliterator)},
- * and {@link AbstractPipeline#opEvaluateParallel(PipelineHelper, java.util.Spliterator,
+ * {@link TerminalOp#evaluateParallel(PipelineHelper, Spliterator)},
+ * {@link TerminalOp#evaluateSequential(PipelineHelper, Spliterator)},
+ * and {@link AbstractPipeline#opEvaluateParallel(PipelineHelper, Spliterator,
  * java.util.function.IntFunction)}, methods, which can use the
  * {@code PipelineHelper} to access information about the pipeline such as
  * head shape, stream flags, and size, and use the helper methods
diff -r 57336c319de8 src/share/classes/java/util/stream/ReduceOps.java
--- a/src/share/classes/java/util/stream/ReduceOps.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/stream/ReduceOps.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,18 +22,19 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.stream;
+package org.jvnet.zephyr.jcl.java.util.stream;

-import java.util.Objects;
-import java.util.Optional;
-import java.util.OptionalDouble;
-import java.util.OptionalInt;
-import java.util.OptionalLong;
-import java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.Optional;
+import org.jvnet.zephyr.jcl.java.util.OptionalDouble;
+import org.jvnet.zephyr.jcl.java.util.OptionalInt;
+import org.jvnet.zephyr.jcl.java.util.OptionalLong;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.function.BiConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.BiFunction;
+import org.jvnet.zephyr.jcl.java.util.function.BinaryOperator;
+
 import java.util.concurrent.CountedCompleter;
-import java.util.function.BiConsumer;
-import java.util.function.BiFunction;
-import java.util.function.BinaryOperator;
 import java.util.function.DoubleBinaryOperator;
 import java.util.function.IntBinaryOperator;
 import java.util.function.LongBinaryOperator;
diff -r 57336c319de8 src/share/classes/java/util/stream/ReferencePipeline.java
--- a/src/share/classes/java/util/stream/ReferencePipeline.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/stream/ReferencePipeline.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,24 +22,25 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.stream;
+package org.jvnet.zephyr.jcl.java.util.stream;

-import java.util.Comparator;
-import java.util.Iterator;
-import java.util.Objects;
-import java.util.Optional;
-import java.util.Spliterator;
-import java.util.Spliterators;
-import java.util.function.BiConsumer;
-import java.util.function.BiFunction;
-import java.util.function.BinaryOperator;
-import java.util.function.Consumer;
-import java.util.function.DoubleConsumer;
-import java.util.function.Function;
-import java.util.function.IntConsumer;
+import org.jvnet.zephyr.jcl.java.util.Comparator;
+import org.jvnet.zephyr.jcl.java.util.Iterator;
+import org.jvnet.zephyr.jcl.java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.Optional;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.Spliterators;
+import org.jvnet.zephyr.jcl.java.util.function.BiConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.BiFunction;
+import org.jvnet.zephyr.jcl.java.util.function.BinaryOperator;
+import org.jvnet.zephyr.jcl.java.util.function.Consumer;
+import org.jvnet.zephyr.jcl.java.util.function.DoubleConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.Function;
+import org.jvnet.zephyr.jcl.java.util.function.IntConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.LongConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.Predicate;
+
 import java.util.function.IntFunction;
-import java.util.function.LongConsumer;
-import java.util.function.Predicate;
 import java.util.function.Supplier;
 import java.util.function.ToDoubleFunction;
 import java.util.function.ToIntFunction;
diff -r 57336c319de8 src/share/classes/java/util/stream/Sink.java
--- a/src/share/classes/java/util/stream/Sink.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/stream/Sink.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,13 +22,13 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.stream;
+package org.jvnet.zephyr.jcl.java.util.stream;

-import java.util.Objects;
-import java.util.function.Consumer;
-import java.util.function.DoubleConsumer;
-import java.util.function.IntConsumer;
-import java.util.function.LongConsumer;
+import org.jvnet.zephyr.jcl.java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.function.Consumer;
+import org.jvnet.zephyr.jcl.java.util.function.DoubleConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.IntConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.LongConsumer;

 /**
  * An extension of {@link Consumer} used to conduct values through the stages of
diff -r 57336c319de8 src/share/classes/java/util/stream/SliceOps.java
--- a/src/share/classes/java/util/stream/SliceOps.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/stream/SliceOps.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,9 +22,10 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.stream;
+package org.jvnet.zephyr.jcl.java.util.stream;

-import java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+
 import java.util.concurrent.CountedCompleter;
 import java.util.function.IntFunction;

diff -r 57336c319de8 src/share/classes/java/util/stream/SortedOps.java
--- a/src/share/classes/java/util/stream/SortedOps.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/stream/SortedOps.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,13 +22,15 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.stream;
+package org.jvnet.zephyr.jcl.java.util.stream;

-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Comparator;
-import java.util.Objects;
-import java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.ArrayList;
+import org.jvnet.zephyr.jcl.java.util.Arrays;
+import org.jvnet.zephyr.jcl.java.util.Comparator;
+import org.jvnet.zephyr.jcl.java.util.Iterator;
+import org.jvnet.zephyr.jcl.java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+
 import java.util.function.IntFunction;


@@ -390,7 +392,8 @@
                 list.forEach(downstream::accept);
             }
             else {
-                for (T t : list) {
+                for (Iterator<T> iterator = list.iterator(); iterator.hasNext(); ) {
+                    T t = iterator.next();
                     if (downstream.cancellationRequested()) break;
                     downstream.accept(t);
                 }
diff -r 57336c319de8 src/share/classes/java/util/stream/SpinedBuffer.java
--- a/src/share/classes/java/util/stream/SpinedBuffer.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/stream/SpinedBuffer.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,21 +22,23 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.stream;
+package org.jvnet.zephyr.jcl.java.util.stream;

-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Objects;
-import java.util.PrimitiveIterator;
-import java.util.Spliterator;
-import java.util.Spliterators;
-import java.util.function.Consumer;
-import java.util.function.DoubleConsumer;
-import java.util.function.IntConsumer;
+import org.jvnet.zephyr.jcl.java.lang.Iterable;
+import org.jvnet.zephyr.jcl.java.util.ArrayList;
+import org.jvnet.zephyr.jcl.java.util.Arrays;
+import org.jvnet.zephyr.jcl.java.util.Iterator;
+import org.jvnet.zephyr.jcl.java.util.List;
+import org.jvnet.zephyr.jcl.java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.PrimitiveIterator;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.Spliterators;
+import org.jvnet.zephyr.jcl.java.util.function.Consumer;
+import org.jvnet.zephyr.jcl.java.util.function.DoubleConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.IntConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.LongConsumer;
+
 import java.util.function.IntFunction;
-import java.util.function.LongConsumer;

 /**
  * An ordered collection of elements.  Elements can be added, but not removed.
diff -r 57336c319de8 src/share/classes/java/util/stream/Stream.java
--- a/src/share/classes/java/util/stream/Stream.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/stream/Stream.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,32 +22,33 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.stream;
+package org.jvnet.zephyr.jcl.java.util.stream;
+
+import org.jvnet.zephyr.jcl.java.util.Arrays;
+import org.jvnet.zephyr.jcl.java.util.Collection;
+import org.jvnet.zephyr.jcl.java.util.Comparator;
+import org.jvnet.zephyr.jcl.java.util.Iterator;
+import org.jvnet.zephyr.jcl.java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.Optional;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.Spliterators;
+import org.jvnet.zephyr.jcl.java.util.concurrent.ConcurrentHashMap;
+import org.jvnet.zephyr.jcl.java.util.function.BiConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.BiFunction;
+import org.jvnet.zephyr.jcl.java.util.function.BinaryOperator;
+import org.jvnet.zephyr.jcl.java.util.function.Consumer;
+import org.jvnet.zephyr.jcl.java.util.function.Function;
+import org.jvnet.zephyr.jcl.java.util.function.Predicate;
+import org.jvnet.zephyr.jcl.java.util.function.UnaryOperator;

 import java.nio.charset.Charset;
 import java.nio.file.Files;
 import java.nio.file.Path;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.Comparator;
-import java.util.Iterator;
-import java.util.Objects;
-import java.util.Optional;
-import java.util.Spliterator;
-import java.util.Spliterators;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.function.BiConsumer;
-import java.util.function.BiFunction;
-import java.util.function.BinaryOperator;
-import java.util.function.Consumer;
-import java.util.function.Function;
 import java.util.function.IntFunction;
-import java.util.function.Predicate;
 import java.util.function.Supplier;
 import java.util.function.ToDoubleFunction;
 import java.util.function.ToIntFunction;
 import java.util.function.ToLongFunction;
-import java.util.function.UnaryOperator;

 /**
  * A sequence of elements supporting sequential and parallel aggregate
@@ -114,7 +115,7 @@
  *
  * <p>Such parameters are always instances of a
  * <a href="../function/package-summary.html">functional interface</a> such
- * as {@link java.util.function.Function}, and are often lambda expressions or
+ * as {@link Function}, and are often lambda expressions or
  * method references.  Unless otherwise specified these parameters must be
  * <em>non-null</em>.
  *
@@ -149,7 +150,7 @@
  * @see IntStream
  * @see LongStream
  * @see DoubleStream
- * @see <a href="package-summary.html">java.util.stream</a>
+ * @see <a href="package-summary.html">org.jvnet.zephyr.jcl.java.util.stream</a>
  */
 public interface Stream<T> extends BaseStream<T, Stream<T>> {

@@ -229,7 +230,7 @@
      * Returns a stream consisting of the results of replacing each element of
      * this stream with the contents of a mapped stream produced by applying
      * the provided mapping function to each element.  Each mapped stream is
-     * {@link java.util.stream.BaseStream#close() closed} after its contents
+     * {@link BaseStream#close() closed} after its contents
      * have been placed into this stream.  (If a mapped stream is {@code null}
      * an empty stream is used, instead.)
      *
@@ -273,7 +274,7 @@
      * Returns an {@code IntStream} consisting of the results of replacing each
      * element of this stream with the contents of a mapped stream produced by
      * applying the provided mapping function to each element.  Each mapped
-     * stream is {@link java.util.stream.BaseStream#close() closed} after its
+     * stream is {@link BaseStream#close() closed} after its
      * contents have been placed into this stream.  (If a mapped stream is
      * {@code null} an empty stream is used, instead.)
      *
@@ -293,7 +294,7 @@
      * Returns an {@code LongStream} consisting of the results of replacing each
      * element of this stream with the contents of a mapped stream produced by
      * applying the provided mapping function to each element.  Each mapped
-     * stream is {@link java.util.stream.BaseStream#close() closed} after its
+     * stream is {@link BaseStream#close() closed} after its
      * contents have been placed into this stream.  (If a mapped stream is
      * {@code null} an empty stream is used, instead.)
      *
@@ -313,7 +314,7 @@
      * Returns an {@code DoubleStream} consisting of the results of replacing
      * each element of this stream with the contents of a mapped stream produced
      * by applying the provided mapping function to each element.  Each mapped
-     * stream is {@link java.util.stream.BaseStream#close() closed} after its
+     * stream is {@link BaseStream#close() closed} after its
      * contents have placed been into this stream.  (If a mapped stream is
      * {@code null} an empty stream is used, instead.)
      *
diff -r 57336c319de8 src/share/classes/java/util/stream/StreamOpFlag.java
--- a/src/share/classes/java/util/stream/StreamOpFlag.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/stream/StreamOpFlag.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,11 +22,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.stream;
+package org.jvnet.zephyr.jcl.java.util.stream;

-import java.util.EnumMap;
-import java.util.Map;
-import java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.EnumMap;
+import org.jvnet.zephyr.jcl.java.util.Map;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;

 /**
  * Flags corresponding to characteristics of streams and operations. Flags are
@@ -131,12 +131,12 @@
  *
  * <p>
  * With the exception of {@link #SHORT_CIRCUIT}, stream characteristics can be
- * derived from the equivalent {@link java.util.Spliterator} characteristics:
- * {@link java.util.Spliterator#DISTINCT}, {@link java.util.Spliterator#SORTED},
- * {@link java.util.Spliterator#ORDERED}, and
- * {@link java.util.Spliterator#SIZED}.  A spliterator characteristics bit set
+ * derived from the equivalent {@link Spliterator} characteristics:
+ * {@link Spliterator#DISTINCT}, {@link Spliterator#SORTED},
+ * {@link Spliterator#ORDERED}, and
+ * {@link Spliterator#SIZED}.  A spliterator characteristics bit set
  * can be converted to stream flags using the method
- * {@link #fromCharacteristics(java.util.Spliterator)} and converted back using
+ * {@link #fromCharacteristics(Spliterator)} and converted back using
  * {@link #toCharacteristics(int)}.  (The bit set
  * {@link #SPLITERATOR_CHARACTERISTICS_MASK} is used to AND with a bit set to
  * produce a valid spliterator characteristics bit set that can be converted to
@@ -194,7 +194,7 @@
  * {@code SIZED.isKnown(flags)} returns true then the stream size remains
  * constant throughout the pipeline, this information can be utilized to
  * pre-allocate data structures and combined with
- * {@link java.util.Spliterator#SUBSIZED} that information can be utilized to
+ * {@link Spliterator#SUBSIZED} that information can be utilized to
  * perform concurrent in-place updates into a shared array.
  *
  * For specific details see the {@link AbstractPipeline} constructors.
@@ -254,7 +254,7 @@
      * A stream can have this value or an intermediate operation can preserve,
      * clear or inject this value.
      * <p>
-     * Note: The {@link java.util.Spliterator#SORTED} characteristic can define
+     * Note: The {@link Spliterator#SORTED} characteristic can define
      * a sort order with an associated non-null comparator.  Augmenting flag
      * state with addition properties such that those properties can be passed
      * to operations requires some disruptive changes for a singular use-case.
diff -r 57336c319de8 src/share/classes/java/util/stream/StreamShape.java
--- a/src/share/classes/java/util/stream/StreamShape.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/stream/StreamShape.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,7 +22,7 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.stream;
+package org.jvnet.zephyr.jcl.java.util.stream;

 /**
  * An enum describing the known shape specializations for stream abstractions.
diff -r 57336c319de8 src/share/classes/java/util/stream/StreamSpliterators.java
--- a/src/share/classes/java/util/stream/StreamSpliterators.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/stream/StreamSpliterators.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,20 +22,21 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.stream;
+package org.jvnet.zephyr.jcl.java.util.stream;

-import java.util.Comparator;
-import java.util.Objects;
-import java.util.Spliterator;
-import java.util.concurrent.ConcurrentHashMap;
-import java.util.concurrent.atomic.AtomicLong;
+import org.jvnet.zephyr.jcl.java.util.Comparator;
+import org.jvnet.zephyr.jcl.java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.concurrent.ConcurrentHashMap;
+import org.jvnet.zephyr.jcl.java.util.concurrent.atomic.AtomicLong;
+import org.jvnet.zephyr.jcl.java.util.function.Consumer;
+import org.jvnet.zephyr.jcl.java.util.function.DoubleConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.IntConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.LongConsumer;
+
 import java.util.function.BooleanSupplier;
-import java.util.function.Consumer;
-import java.util.function.DoubleConsumer;
 import java.util.function.DoubleSupplier;
-import java.util.function.IntConsumer;
 import java.util.function.IntSupplier;
-import java.util.function.LongConsumer;
 import java.util.function.LongSupplier;
 import java.util.function.Supplier;

diff -r 57336c319de8 src/share/classes/java/util/stream/StreamSupport.java
--- a/src/share/classes/java/util/stream/StreamSupport.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/stream/StreamSupport.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,10 +22,11 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.stream;
+package org.jvnet.zephyr.jcl.java.util.stream;

-import java.util.Objects;
-import java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+
 import java.util.function.Supplier;

 /**
@@ -82,7 +83,7 @@
      * <p>For spliterators that report a characteristic of {@code IMMUTABLE}
      * or {@code CONCURRENT}, or that are
      * <a href="../Spliterator.html#binding">late-binding</a>, it is likely
-     * more efficient to use {@link #stream(java.util.Spliterator, boolean)}
+     * more efficient to use {@link #stream(Spliterator, boolean)}
      * instead.
      * <p>The use of a {@code Supplier} in this form provides a level of
      * indirection that reduces the scope of potential interference with the
@@ -102,7 +103,7 @@
      *        stream; if {@code false} the returned stream is a sequential
      *        stream.
      * @return a new sequential or parallel {@code Stream}
-     * @see #stream(java.util.Spliterator, boolean)
+     * @see #stream(Spliterator, boolean)
      */
     public static <T> Stream<T> stream(Supplier<? extends Spliterator<T>> supplier,
                                        int characteristics,
@@ -151,7 +152,7 @@
      * <p>For spliterators that report a characteristic of {@code IMMUTABLE}
      * or {@code CONCURRENT}, or that are
      * <a href="../Spliterator.html#binding">late-binding</a>, it is likely
-     * more efficient to use {@link #intStream(java.util.Spliterator.OfInt, boolean)}
+     * more efficient to use {@link #intStream(Spliterator.OfInt, boolean)}
      * instead.
      * <p>The use of a {@code Supplier} in this form provides a level of
      * indirection that reduces the scope of potential interference with the
@@ -170,7 +171,7 @@
      *        stream; if {@code false} the returned stream is a sequential
      *        stream.
      * @return a new sequential or parallel {@code IntStream}
-     * @see #intStream(java.util.Spliterator.OfInt, boolean)
+     * @see #intStream(Spliterator.OfInt, boolean)
      */
     public static IntStream intStream(Supplier<? extends Spliterator.OfInt> supplier,
                                       int characteristics,
@@ -219,7 +220,7 @@
      * <p>For spliterators that report a characteristic of {@code IMMUTABLE}
      * or {@code CONCURRENT}, or that are
      * <a href="../Spliterator.html#binding">late-binding</a>, it is likely
-     * more efficient to use {@link #longStream(java.util.Spliterator.OfLong, boolean)}
+     * more efficient to use {@link #longStream(Spliterator.OfLong, boolean)}
      * instead.
      * <p>The use of a {@code Supplier} in this form provides a level of
      * indirection that reduces the scope of potential interference with the
@@ -238,7 +239,7 @@
      *        stream; if {@code false} the returned stream is a sequential
      *        stream.
      * @return a new sequential or parallel {@code LongStream}
-     * @see #longStream(java.util.Spliterator.OfLong, boolean)
+     * @see #longStream(Spliterator.OfLong, boolean)
      */
     public static LongStream longStream(Supplier<? extends Spliterator.OfLong> supplier,
                                         int characteristics,
@@ -287,7 +288,7 @@
      * <p>For spliterators that report a characteristic of {@code IMMUTABLE}
      * or {@code CONCURRENT}, or that are
      * <a href="../Spliterator.html#binding">late-binding</a>, it is likely
-     * more efficient to use {@link #doubleStream(java.util.Spliterator.OfDouble, boolean)}
+     * more efficient to use {@link #doubleStream(Spliterator.OfDouble, boolean)}
      * instead.
      * <p>The use of a {@code Supplier} in this form provides a level of
      * indirection that reduces the scope of potential interference with the
@@ -306,7 +307,7 @@
      *        stream; if {@code false} the returned stream is a sequential
      *        stream.
      * @return a new sequential or parallel {@code DoubleStream}
-     * @see #doubleStream(java.util.Spliterator.OfDouble, boolean)
+     * @see #doubleStream(Spliterator.OfDouble, boolean)
      */
     public static DoubleStream doubleStream(Supplier<? extends Spliterator.OfDouble> supplier,
                                             int characteristics,
diff -r 57336c319de8 src/share/classes/java/util/stream/Streams.java
--- a/src/share/classes/java/util/stream/Streams.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/stream/Streams.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,15 +22,15 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.stream;
+package org.jvnet.zephyr.jcl.java.util.stream;

-import java.util.Comparator;
-import java.util.Objects;
-import java.util.Spliterator;
-import java.util.function.Consumer;
-import java.util.function.DoubleConsumer;
-import java.util.function.IntConsumer;
-import java.util.function.LongConsumer;
+import org.jvnet.zephyr.jcl.java.util.Comparator;
+import org.jvnet.zephyr.jcl.java.util.Objects;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.function.Consumer;
+import org.jvnet.zephyr.jcl.java.util.function.DoubleConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.IntConsumer;
+import org.jvnet.zephyr.jcl.java.util.function.LongConsumer;

 /**
  * Utility methods for operating on and creating streams.
diff -r 57336c319de8 src/share/classes/java/util/stream/TerminalOp.java
--- a/src/share/classes/java/util/stream/TerminalOp.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/stream/TerminalOp.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,9 +22,9 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.stream;
+package org.jvnet.zephyr.jcl.java.util.stream;

-import java.util.Spliterator;
+import org.jvnet.zephyr.jcl.java.util.Spliterator;

 /**
  * An operation in a stream pipeline that takes a stream as input and produces
diff -r 57336c319de8 src/share/classes/java/util/stream/TerminalSink.java
--- a/src/share/classes/java/util/stream/TerminalSink.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/stream/TerminalSink.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,7 +22,7 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.stream;
+package org.jvnet.zephyr.jcl.java.util.stream;

 import java.util.function.Supplier;

diff -r 57336c319de8 src/share/classes/java/util/stream/Tripwire.java
--- a/src/share/classes/java/util/stream/Tripwire.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/java/util/stream/Tripwire.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,16 +22,16 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package java.util.stream;
+package org.jvnet.zephyr.jcl.java.util.stream;
+
+import sun.util.logging.PlatformLogger;

 import java.security.AccessController;
 import java.security.PrivilegedAction;

-import sun.util.logging.PlatformLogger;
-
 /**
  * Utility class for detecting inadvertent uses of boxing in
- * {@code java.util.stream} classes.  The detection is turned on or off based on
+ * {@code org.jvnet.zephyr.jcl.java.util.stream} classes.  The detection is turned on or off based on
  * whether the system property {@code org.openjdk.java.util.stream.tripwire} is
  * considered {@code true} according to {@link Boolean#getBoolean(String)}.
  * This should normally be turned off for production use.
diff -r 57336c319de8 src/share/classes/jdk/internal/util/xml/BasicXmlPropertiesProvider.java
--- a/src/share/classes/jdk/internal/util/xml/BasicXmlPropertiesProvider.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/jdk/internal/util/xml/BasicXmlPropertiesProvider.java	Fri Jul 31 15:50:29 2015 +0300
@@ -22,15 +22,15 @@
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
-package jdk.internal.util.xml;
+package org.jvnet.zephyr.jcl.jdk.internal.util.xml;

-import java.util.Properties;
-import java.util.InvalidPropertiesFormatException;
+import org.jvnet.zephyr.jcl.java.util.Properties;
+import org.jvnet.zephyr.jcl.sun.util.spi.XmlPropertiesProvider;
+
+import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
-import java.io.IOException;
-
-import sun.util.spi.XmlPropertiesProvider;
+import java.util.InvalidPropertiesFormatException;

 /**
  * A {@code XmlPropertiesProvider} implementation that uses the UKit XML parser.
diff -r 57336c319de8 src/share/classes/jdk/internal/util/xml/PropertiesDefaultHandler.java
--- a/src/share/classes/jdk/internal/util/xml/PropertiesDefaultHandler.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/jdk/internal/util/xml/PropertiesDefaultHandler.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,19 +23,28 @@
  * questions.
  */

-package jdk.internal.util.xml;
+package org.jvnet.zephyr.jcl.jdk.internal.util.xml;

-import java.io.*;
-import java.util.InvalidPropertiesFormatException;
-import java.util.Map.Entry;
-import java.util.Properties;
 import jdk.internal.org.xml.sax.Attributes;
 import jdk.internal.org.xml.sax.InputSource;
 import jdk.internal.org.xml.sax.SAXException;
 import jdk.internal.org.xml.sax.SAXParseException;
 import jdk.internal.org.xml.sax.helpers.DefaultHandler;
+import jdk.internal.util.xml.SAXParser;
+import jdk.internal.util.xml.XMLStreamException;
+import jdk.internal.util.xml.XMLStreamWriter;
 import jdk.internal.util.xml.impl.SAXParserImpl;
 import jdk.internal.util.xml.impl.XMLStreamWriterImpl;
+import org.jvnet.zephyr.jcl.java.util.Iterator;
+import org.jvnet.zephyr.jcl.java.util.Map.Entry;
+import org.jvnet.zephyr.jcl.java.util.Properties;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.io.StringReader;
+import java.io.UnsupportedEncodingException;
+import java.util.InvalidPropertiesFormatException;

 /**
  * A class used to aid in Properties load and save in XML. This class is
@@ -109,7 +118,8 @@
             }

             synchronized(props) {
-                for (Entry<Object, Object> e : props.entrySet()) {
+                for (Iterator<Entry<Object, Object>> iterator = props.entrySet().iterator(); iterator.hasNext(); ) {
+                    Entry<Object, Object> e = iterator.next();
                     final Object k = e.getKey();
                     final Object v = e.getValue();
                     if (k instanceof String && v instanceof String) {
@@ -157,7 +167,7 @@

         if (rootElm == null) {
             fatalError(new SAXParseException("An XML properties document must contain"
-                    + " the DOCTYPE declaration as defined by java.util.Properties.", null));
+                    + " the DOCTYPE declaration as defined by org.jvnet.zephyr.jcl.java.util.Properties.", null));
         }

         if (rootElem == 1 && !rootElm.equals(qName)) {
diff -r 57336c319de8 src/share/classes/sun/util/spi/XmlPropertiesProvider.java
--- a/src/share/classes/sun/util/spi/XmlPropertiesProvider.java	Thu May 28 16:47:07 2015 -0700
+++ b/src/share/classes/sun/util/spi/XmlPropertiesProvider.java	Fri Jul 31 15:50:29 2015 +0300
@@ -23,13 +23,14 @@
  * questions.
  */

-package sun.util.spi;
+package org.jvnet.zephyr.jcl.sun.util.spi;

-import java.util.Properties;
-import java.util.InvalidPropertiesFormatException;
+import org.jvnet.zephyr.jcl.java.util.Properties;
+
+import java.io.IOException;
 import java.io.InputStream;
 import java.io.OutputStream;
-import java.io.IOException;
+import java.util.InvalidPropertiesFormatException;

 /**
  * Service-provider class for loading and storing {@link Properites} in XML
